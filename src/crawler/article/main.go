package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

type AutoGenerated struct {
	Success bool        `json:"success"`
	Errnum  interface{} `json:"errnum"`
	Errmsg  interface{} `json:"errmsg"`
	Data    struct {
		PageIndex int `json:"pageIndex"`
		PageSize  int `json:"pageSize"`
		RowCount  int `json:"rowCount"`
		List      []struct {
			ProjectID      int       `json:"projectID"`
			DataID         int       `json:"dataID"`
			RelateWord     string    `json:"relateWord"`
			IncludeWord    string    `json:"includeWord"`
			Desc           string    `json:"desc"`
			Tags           string    `json:"tags"`
			Signs          string    `json:"signs"`
			AddTime        string    `json:"addTime"`
			Status         int       `json:"status"`
			PlatformID     int       `json:"platformID"`
			IconName       string    `json:"iconName"`
			Title          string    `json:"title"`
			URL            string    `json:"url"`
			AuthorID       int       `json:"authorID"`
			AuthorName     string    `json:"authorName"`
			WordCount      int       `json:"wordCount"`
			HasImg         int       `json:"hasImg"`
			HeaderImg      string    `json:"headerImg"`
			Setting        string    `json:"setting"`
			MonitorStatus  int       `json:"monitorStatus"`
			HighlightWord  string    `json:"highlightWord"`
			IsShieldAuthor int       `json:"isShieldAuthor"`
			Content        string    `json:"content"`
			PublishTime    time.Time `json:"publishTime"`
		} `json:"list"`
		State struct {
			ID        int `json:"id"`
			All       int `json:"all"`
			Unread    int `json:"unread"`
			Priority  int `json:"priority"`
			Favorites int `json:"favorites"`
			Monitor   int `json:"monitor"`
			Discard   int `json:"discard"`
			Recovery  int `json:"recovery"`
		} `json:"state"`
	} `json:"data"`
}
type AutoGeneratedContent struct {
	Success bool        `json:"success"`
	Errnum  interface{} `json:"errnum"`
	Errmsg  interface{} `json:"errmsg"`
	Data    struct {
		Result struct {
			ProjectID      int       `json:"projectID"`
			DataID         int       `json:"dataID"`
			RelateWord     string    `json:"relateWord"`
			IncludeWord    string    `json:"includeWord"`
			Desc           string    `json:"desc"`
			Tags           string    `json:"tags"`
			Signs          string    `json:"signs"`
			AddTime        string    `json:"addTime"`
			Status         int       `json:"status"`
			PlatformID     int       `json:"platformID"`
			IconName       string    `json:"iconName"`
			Title          string    `json:"title"`
			URL            string    `json:"url"`
			AuthorID       int       `json:"authorID"`
			AuthorName     string    `json:"authorName"`
			WordCount      int       `json:"wordCount"`
			HasImg         int       `json:"hasImg"`
			HeaderImg      string    `json:"headerImg"`
			Setting        string    `json:"setting"`
			MonitorStatus  int       `json:"monitorStatus"`
			HighlightWord  string    `json:"highlightWord"`
			IsShieldAuthor int       `json:"isShieldAuthor"`
			Content        string    `json:"content"`
			PublishTime    time.Time `json:"publishTime"`
		} `json:"result"`
		RowCount int         `json:"rowCount"`
		Success  bool        `json:"success"`
		Message  interface{} `json:"message"`
	} `json:"data"`
}
func main() {

	bodystr := httpHandle("GET","http://www.ciliuti.com/webapi/project/GetProjectDataList?type=&projectId=135220&keyword=&pageIndex=1&startDate=&endDate=&publishStartDate=&publishEndDate=&tagName=&platformID=&platformName=&authorName=","type=&projectId=135220&keyword=&pageIndex=1&startDate=&endDate=&publishStartDate=&publishEndDate=&tagName=&platformID=&platformName=&authorName=");
	var gener AutoGenerated
	json.Unmarshal([]byte(bodystr), &gener)
	var prxurl = ""
	for i := 0; i< len(gener.Data.List);i++  {
		var osbj = gener.Data.List[i]
		dataidstr := strconv.Itoa(osbj.DataID)
		projectid := strconv.Itoa(osbj.ProjectID)
		prxurl = "http://www.ciliuti.com/webapi/project/GetProjectDataInfo?projectId="+projectid+"&dataId="+dataidstr
		content := httpHandleContent("GET",prxurl,"projectId="+projectid+"&dataId="+dataidstr)
		fmt.Println(content)
		var genercontent AutoGeneratedContent
		json.Unmarshal([]byte(content), &genercontent)
		fmt.Println(genercontent.Data.Result.Desc)
	}
}


//http请求
func httpHandle(method, urlVal,data string) string {
	client := &http.Client{}
	var req *http.Request

	if data == "" {
		urlArr := strings.Split(urlVal,"?")
		if len(urlArr)  == 2 {
			urlVal = urlArr[0] + "?" + getParseParam(urlArr[1])
		}
		req, _ = http.NewRequest(method, urlVal, nil)
	}else {
		req, _ = http.NewRequest(method, urlVal, strings.NewReader(data))
	}

	//可以添加多个cookie
	req.Header.Add("Cookie",".AspNetCore.Antiforgery.rCalEsOEp-s=CfDJ8BKKU7M7Pt1HkTMNrcKLFdcB0Ews5NotxEXkWofIv9dm62K2ILRTohmBGdR9LrFb0quFRmgfgoxZ33pUvWrQGsVQtvIG_ivTMDmWVNOy-IX31afWNNHaBaqaIm03ym_icEehtQhifcNH6ZichkDwk_4; Hm_lvt_bc0c29933416c4299d1ac56ff149e2ba=1570885616; .wcms=CfDJ8K5KqQYpLvVNggKnmz-fjDYSIfsdA53C1NzVd46O4jR-HMh19JqqMSqNllgqkouY_KZH4RTEPmAmKzGMKGaLEBaoLuRcjHnz7qmzW8hrfDi_A6VQ3KZDbXjsegfvUqH8OzXcthtSZUn2-bvum821ll_voVoMkhvvRsgBpidwBJoRpURAtAqaRRxrN9612qKqzoBpqNZOfVWsbpqStkLas6v5uTD6IGwtNgTRlCvIvAVVl1qRfGVDRnH09hIOd7b4H4BrFUMUaauCtZQ9r0oQnZloztWuj5uTQIO8sQaQwxP283EOpwxJRCFrimhuNOlnTeDk22HAyGGVxROZf-P54_nvqBlkPZnFaF8pLaL7CzCrJJsnS597h_ldCd63jxkRENW_QKMqegHOmMWw1G3j7Ck16lBSJ-9QkvDzqXbxUn1rSj3K76TRESAQujBTkbhAJAQYSj1n9XgRn8xVDQIhJNv1UqYcjHCOBkv-IAVuREJkjG1JLqCSMcyjTXkmLJ3TenGaR9Ma2H4tMRgrkE5GCmT4D_gx3aZM8mXNdga_BBZ0RXusdSM4verD7X83Tr9OJ5q3eLXM59EPL5Zli99kCTdtPkZxPXemg6O3mHsF-E6Kw6G7wE0wBJ3k8VIx8JdR-e5EJfpuS_IDjRK7WQScsOtFpXrObHSgtpeg_Kbg67n7; .wcms_socket=a6867b4a-0a90-4c73-90ce-47374b5db7c7; .AspNetCore.Session=CfDJ8BKKU7M7Pt1HkTMNrcKLFdeN%2Fd9u24wNpYUnIOVgeiwExZ4RiAS8ePy2F3PlT6765J9DGRrpiT3TcFf78Z6%2BlaczTSjBLnZwXM0THtFYySMCaKRAAjf6jcvsEXVtgz9xcTe%2BIH9a%2B%2F2kslSHwloGNvj5rYlM0%2Fuv%2Ffv%2Fox9AM%2Fxi; Hm_lpvt_bc0c29933416c4299d1ac56ff149e2ba=1570928963")

	req.Header.Add("Accept","application/json, text/javascript, */*; q=0.01")
	req.Header.Add("Accept-Encoding","gzip, deflate")
	req.Header.Add("Accept-Language","zh-CN,zh;q=0.9,en;q=0.8,und;q=0.7,zh-TW;q=0.6,vi;q=0.5,sv;q=0.4,fr;q=0.3,nb;q=0.2,de;q=0.1,pl;q=0.1,pt;q=0.1,lb;q=0.1")
	req.Header.Add("DNT","1")
	req.Header.Add("Host","www.ciliuti.com")
	current := time.Now()
	req.Header.Add("Date",current.Format("2006-01-02 15:04:05"))
	req.Header.Add("Proxy-Connection","keep-alive")
	req.Header.Add("Referer","http://www.ciliuti.com/project/all/135220")
	req.Header.Add("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.71 Safari/537.36")
	req.Header.Add("X-Requested-With","XMLHttpRequest")

	resp, err := client.Do(req)

	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	b, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println(string(b))
	return string(b)
}

//http请求
func httpHandleContent(method, urlVal,data string) string {
	client := &http.Client{}
	var req *http.Request

	if data == "" {
		urlArr := strings.Split(urlVal,"?")
		if len(urlArr)  == 2 {
			urlVal = urlArr[0] + "?" + getParseParam(urlArr[1])
		}
		req, _ = http.NewRequest(method, urlVal, nil)
	}else {
		req, _ = http.NewRequest(method, urlVal, strings.NewReader(data))
	}

	//可以添加多个cookie
	req.Header.Add("Cookie",".AspNetCore.Antiforgery.rCalEsOEp-s=CfDJ8BKKU7M7Pt1HkTMNrcKLFdcB0Ews5NotxEXkWofIv9dm62K2ILRTohmBGdR9LrFb0quFRmgfgoxZ33pUvWrQGsVQtvIG_ivTMDmWVNOy-IX31afWNNHaBaqaIm03ym_icEehtQhifcNH6ZichkDwk_4; Hm_lvt_bc0c29933416c4299d1ac56ff149e2ba=1570885616; .wcms=CfDJ8K5KqQYpLvVNggKnmz-fjDYSIfsdA53C1NzVd46O4jR-HMh19JqqMSqNllgqkouY_KZH4RTEPmAmKzGMKGaLEBaoLuRcjHnz7qmzW8hrfDi_A6VQ3KZDbXjsegfvUqH8OzXcthtSZUn2-bvum821ll_voVoMkhvvRsgBpidwBJoRpURAtAqaRRxrN9612qKqzoBpqNZOfVWsbpqStkLas6v5uTD6IGwtNgTRlCvIvAVVl1qRfGVDRnH09hIOd7b4H4BrFUMUaauCtZQ9r0oQnZloztWuj5uTQIO8sQaQwxP283EOpwxJRCFrimhuNOlnTeDk22HAyGGVxROZf-P54_nvqBlkPZnFaF8pLaL7CzCrJJsnS597h_ldCd63jxkRENW_QKMqegHOmMWw1G3j7Ck16lBSJ-9QkvDzqXbxUn1rSj3K76TRESAQujBTkbhAJAQYSj1n9XgRn8xVDQIhJNv1UqYcjHCOBkv-IAVuREJkjG1JLqCSMcyjTXkmLJ3TenGaR9Ma2H4tMRgrkE5GCmT4D_gx3aZM8mXNdga_BBZ0RXusdSM4verD7X83Tr9OJ5q3eLXM59EPL5Zli99kCTdtPkZxPXemg6O3mHsF-E6Kw6G7wE0wBJ3k8VIx8JdR-e5EJfpuS_IDjRK7WQScsOtFpXrObHSgtpeg_Kbg67n7; .wcms_socket=a6867b4a-0a90-4c73-90ce-47374b5db7c7; .AspNetCore.Session=CfDJ8BKKU7M7Pt1HkTMNrcKLFdeN%2Fd9u24wNpYUnIOVgeiwExZ4RiAS8ePy2F3PlT6765J9DGRrpiT3TcFf78Z6%2BlaczTSjBLnZwXM0THtFYySMCaKRAAjf6jcvsEXVtgz9xcTe%2BIH9a%2B%2F2kslSHwloGNvj5rYlM0%2Fuv%2Ffv%2Fox9AM%2Fxi; Hm_lpvt_bc0c29933416c4299d1ac56ff149e2ba=1570928963")

	req.Header.Add("Accept","application/json, text/javascript, */*; q=0.01")
	req.Header.Add("Accept-Encoding","gzip, deflate")
	req.Header.Add("Accept-Language","zh-CN,zh;q=0.9,en;q=0.8,und;q=0.7,zh-TW;q=0.6,vi;q=0.5,sv;q=0.4,fr;q=0.3,nb;q=0.2,de;q=0.1,pl;q=0.1,pt;q=0.1,lb;q=0.1")
	req.Header.Add("DNT","1")
	req.Header.Add("Host","www.ciliuti.com")
	current := time.Now()
	req.Header.Add("Date",current.Format("2006-01-02 15:04:05"))
	req.Header.Add("Proxy-Connection","keep-alive")
	req.Header.Add("Referer","http://www.ciliuti.com/project/all/135220")
	req.Header.Add("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.71 Safari/537.36")
	req.Header.Add("X-Requested-With","XMLHttpRequest")

	resp, err := client.Do(req)

	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	b, _ := ioutil.ReadAll(resp.Body)
	return string(b)
}

//将get请求的参数进行转义
func getParseParam(param string) string  {
	return url.PathEscape(param)
}





func httpPostWithAuth(pUrl string, pBody []byte) {
	//生成client 参数为默认
	client := &http.Client{}

	//提交请求
	request, err := http.NewRequest("POST", pUrl, bytes.NewReader(pBody))

	if err != nil {
		panic(err)
	}

	request.Proto = "HTTP/1.1"
	request.Header.Set("Content-Type", "Content-type:application/x-www-form-urlencoded")
	request.Header.Add("Authorization", "GqzR7yqCTZkFW6lF4aB5hWUkSUk")


	//处理返回结果
	response, err := client.Do(request)

	if err == nil {
		body, err := ioutil.ReadAll(response.Body)
		if err != nil {
			// handle error
			log.Fatal("no resp  error:" + err.Error())
			return
		}
		//返回的状态码
		status := response.StatusCode

		log.Fatal("resp with body:%s, httpCode:%v", string(body), status)

	} else {
		log.Fatal("6666666httpPost  resp with error:" + err.Error())
	}

}