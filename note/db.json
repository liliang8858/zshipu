{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robot.txt","path":"robot.txt","modified":1,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":1,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":1,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":1,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":1,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":1,"renderable":0},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":1,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":1,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":1,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":1,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":1,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":1,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":1,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":1,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":1,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":1,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":1,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":1,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":1,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":1,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":1,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":1,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":1,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":1,"renderable":0},{"_id":"source/images/pasted-41.png","path":"images/pasted-41.png","modified":1,"renderable":0},{"_id":"source/images/pasted-45.png","path":"images/pasted-45.png","modified":1,"renderable":0},{"_id":"source/images/pasted-44.png","path":"images/pasted-44.png","modified":1,"renderable":0},{"_id":"source/images/pasted-46.png","path":"images/pasted-46.png","modified":1,"renderable":0},{"_id":"source/images/pasted-52.png","path":"images/pasted-52.png","modified":1,"renderable":0},{"_id":"source/images/pasted-57.png","path":"images/pasted-57.png","modified":1,"renderable":0},{"_id":"source/images/pasted-58.png","path":"images/pasted-58.png","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-43.png","path":"images/pasted-43.png","modified":1,"renderable":0},{"_id":"source/images/pasted-47.png","path":"images/pasted-47.png","modified":1,"renderable":0},{"_id":"source/images/pasted-56.png","path":"images/pasted-56.png","modified":1,"renderable":0},{"_id":"source/images/pasted-59.png","path":"images/pasted-59.png","modified":1,"renderable":0},{"_id":"source/images/pasted-60.png","path":"images/pasted-60.png","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-54.png","path":"images/pasted-54.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"source/images/pasted-42.png","path":"images/pasted-42.png","modified":1,"renderable":0},{"_id":"source/images/pasted-49.png","path":"images/pasted-49.png","modified":1,"renderable":0},{"_id":"source/images/pasted-50.png","path":"images/pasted-50.png","modified":1,"renderable":0},{"_id":"source/images/pasted-51.png","path":"images/pasted-51.png","modified":1,"renderable":0},{"_id":"source/images/pasted-53.png","path":"images/pasted-53.png","modified":1,"renderable":0},{"_id":"source/images/pasted-61.png","path":"images/pasted-61.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-62.png","path":"images/pasted-62.png","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"source/images/pasted-48.png","path":"images/pasted-48.png","modified":1,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"source/images/pasted-55.png","path":"images/pasted-55.png","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/img/5d3521411f3f169375.png","path":"img/5d3521411f3f169375.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/_config.yml","hash":"903df31c94b85833fd0f2ddb94efc36a6829dbe8","modified":1586588942000},{"_id":"themes/3-hexo/README.md","hash":"2cf4cefd4dcd71cc4d7c7664251d07acb11fb793","modified":1572771049953},{"_id":"themes/3-hexo/.gitignore","hash":"5e85fe97e87211619c1db29fd3f3b0dbf16be4a7","modified":1572771049954},{"_id":"source/robot.txt","hash":"49eafd7f9e9c2a42290ad4693c461f0a58d9de36","modified":1572771593900},{"_id":"themes/3-hexo/layout/indexs.md","hash":"7f57faed7e459a3e045774a6cbc91c4e73ef232a","modified":1572771049954},{"_id":"themes/3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1572771049955},{"_id":"themes/3-hexo/layout/index.ejs","hash":"56fc95610a240e8bfe3d5b611896a819c1eb5dee","modified":1572771049954},{"_id":"source/images/pasted-0.png","hash":"a3c2d2e1758d6efae4ef33248f995bdd9d10098f","modified":1572771593872},{"_id":"source/images/pasted-11.png","hash":"9e73357736fae79671d20256a000c6a69b460410","modified":1572771593880},{"_id":"source/images/pasted-10.png","hash":"5b61fc6408862eb5fb1b4cf715921e86998afc93","modified":1572771593888},{"_id":"source/images/pasted-12.png","hash":"41d935d1da62188da49a974a014fb7260e586e82","modified":1572771593873},{"_id":"source/images/pasted-13.png","hash":"92aa50661c4908f23f77d553578299f7c23bcc4d","modified":1572776169236},{"_id":"source/images/pasted-14.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1572776280720},{"_id":"source/images/pasted-15.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1572776281768},{"_id":"source/images/pasted-17.png","hash":"bb0a0c274fc3d3863da6a2206430efb94754489f","modified":1572776443940},{"_id":"source/images/pasted-18.png","hash":"2c7c009d8f337f9a9ca364b7407a126374e54d36","modified":1572776584435},{"_id":"source/images/pasted-16.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1572776282599},{"_id":"source/images/pasted-19.png","hash":"0910920e132be468244ee28a95d0832ad685d3b2","modified":1572777009232},{"_id":"source/images/pasted-20.png","hash":"29dc13e68c2212d6739eefd7ec6d06fdb7117aa2","modified":1572777197949},{"_id":"source/images/pasted-22.png","hash":"9093b8671238eff0f45c99aa053e153131488504","modified":1572778287744},{"_id":"source/images/pasted-21.png","hash":"93b855398c6498146884bc15e36c544e7d980b43","modified":1572778275948},{"_id":"source/images/pasted-23.png","hash":"1f8d11d2a8e969721f1133496a339e8fd9303692","modified":1572778564955},{"_id":"source/images/pasted-25.png","hash":"af838e6767c91134a34964b74f288c22d370c4ff","modified":1572778849471},{"_id":"source/images/pasted-26.png","hash":"f0261f1234175c0b266237e4321166ff79767eee","modified":1572778999875},{"_id":"source/images/pasted-24.png","hash":"1f8d11d2a8e969721f1133496a339e8fd9303692","modified":1572778573350},{"_id":"source/images/pasted-27.png","hash":"6aef92884168e893da56c4592048d4bb35e1ae2a","modified":1572779085701},{"_id":"source/images/pasted-28.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779111524},{"_id":"source/images/pasted-29.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779113158},{"_id":"source/images/pasted-30.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779113381},{"_id":"source/images/pasted-31.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779113587},{"_id":"source/images/pasted-32.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779113627},{"_id":"source/images/pasted-34.png","hash":"ae2bf3f968d09d0e9e995f57201b0bba215d5839","modified":1572787286035},{"_id":"source/images/pasted-36.png","hash":"9bf496ffd46db1070c18a2d7e9109dc47e703b19","modified":1572787358266},{"_id":"source/images/pasted-35.png","hash":"fcf2c565ff9110bd0c6a717959416855c7918811","modified":1572787328398},{"_id":"source/images/pasted-33.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1572779113856},{"_id":"source/images/pasted-37.png","hash":"a2bf952c40d0bc78f4055df214859cd55b30ce83","modified":1572787402210},{"_id":"source/images/pasted-38.png","hash":"25405dd08d2808dd07e21c7c63422f6bbd37a107","modified":1572787468171},{"_id":"source/images/pasted-39.png","hash":"41d1dcc59216e56cdfddea8961f72a4e7434e9f8","modified":1572787495551},{"_id":"source/images/pasted-40.png","hash":"f4eac91f202b5c6aadd9ae961b0388ea91ceee7a","modified":1572787516009},{"_id":"source/images/pasted-41.png","hash":"cab1e6e50d0cb19b8e6a2c9495af7f4ef05e3f1b","modified":1572787554868},{"_id":"source/images/pasted-45.png","hash":"17848ec9e61e90964a37257deea1b05b5bd612ea","modified":1572789853384},{"_id":"source/images/pasted-44.png","hash":"fd0d4e4c827644410eb068fd902b48ea28cfaf95","modified":1572789735535},{"_id":"source/images/pasted-46.png","hash":"9f71a930e96ea2cb1d7d10872230c3098848e68c","modified":1572789911190},{"_id":"source/images/pasted-52.png","hash":"24e9f9f058d0bd75fd71027f4870a1f15c499683","modified":1573302711464},{"_id":"source/images/pasted-57.png","hash":"84468c584e8b39c233b8c434e48d35a0e08ee445","modified":1573303262738},{"_id":"source/images/pasted-58.png","hash":"f5aef743f8e24d53b57107af1dd2f5cf01ca0946","modified":1573303274813},{"_id":"source/images/pasted-6.png","hash":"586bb726534dd103c916f35403283a14afaa8030","modified":1572771593875},{"_id":"source/_posts/hexo-通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo-g-d-，彻底脱离命令行操作！！！！.md","hash":"88a80672c24bd69554b172aedcab0612802ef45e","modified":1572771593899},{"_id":"source/_posts/Hexo admin 自动发布文章.md","hash":"3d66b7a547d0b460edf1ebf9606ff2c3e3bf8f9f","modified":1572771593897},{"_id":"source/_posts/hexo-admin安装使用.md","hash":"e9b5426b9f143ca6a21a534cda474845e097b64f","modified":1572771593899},{"_id":"source/_posts/Hexo搭建个人博客.md","hash":"0efbcd12bfdcf4bb540492363b7b5612e5e2e31d","modified":1572771593893},{"_id":"source/_posts/hexo主题之hexo-theme-yilia-plus.md","hash":"19c2614c8a762b3dd06ec974c8f4121f0d5ddbe3","modified":1572771593897},{"_id":"source/_posts/不停折腾hexo-admin，直到完全实时自动发布为止.md","hash":"60cc7a8305bebea770d75bd45b71e078fb8b8cfe","modified":1572790201675},{"_id":"source/_posts/linux-find命令详解大全.md","hash":"27664c9cc61b596091509ad086e520a5fb8d0ba1","modified":1572845472827},{"_id":"source/_posts/从零开始创建一个属于技术宅的产品-万站联盟接入-知识铺.md","hash":"1e5d2b3859689ab388c6fc3777cec45407121fda","modified":1572771593896},{"_id":"source/_posts/中小网站SEO九大步骤.md","hash":"2971c4b61e9fdea99bc0125d48ccc57d7e9d6f10","modified":1573396523003},{"_id":"source/_posts/从零开始创建一个属于程序员的网站，第一个个人博客-知识铺.md","hash":"31a07a858157caacba03f4ac01465d110d1558d3","modified":1572771593898},{"_id":"source/_posts/从零开始创建一个属于技术宅的产品，万站联盟-知识铺.md","hash":"2f3b96e3daa86ffd757011b60dc27d99f575c173","modified":1572771593892},{"_id":"source/_posts/企业网站SEO优化指南.md","hash":"52efb5dad6a3256167b351fb60d8e6569414ac40","modified":1573396645754},{"_id":"source/_posts/从零开始创建一个漂亮的todo-第一版-知识铺.md","hash":"2d0241e1dc4f492098774815458a6c98312032aa","modified":1572787580010},{"_id":"source/_posts/大型网站SEO十二步曲.md","hash":"9c425ffd47917b622a883081f580357e7d855210","modified":1573396119853},{"_id":"source/_posts/如何优雅地发布Hexo博客.md","hash":"2740753e3488acebf9156464f0bfe11035f44220","modified":1572771593895},{"_id":"source/_posts/偏向内容网站SEO优化指南.md","hash":"2d5aca59be8c67a5b1073e6c5d99cb2e2257001d","modified":1573396734659},{"_id":"source/_posts/如何让百度收录新站.md","hash":"ce791f328dea19559c9b3845e604c0d61ed36a78","modified":1573303623210},{"_id":"source/_posts/影响网站收录的15个因素.md","hash":"ab833528df93d7d11129649312f3548e83ebe1e5","modified":1573303714243},{"_id":"source/_posts/新站SEO绝密九式，不小心泄漏.md","hash":"7467faa19727ca664e2d511c5bb33d2463f1b993","modified":1573396341522},{"_id":"source/_posts/新站不被收录自检.md","hash":"5808e9349ee4d70be3133b8740b03dd2eefb26de","modified":1573304180630},{"_id":"source/_posts/电商网站SEO优化指南.md","hash":"c2cd6baa9e6b67baceaeda4cddd0e99f8be64c29","modified":1573396808671},{"_id":"source/_posts/网站收录踩过的坑.md","hash":"bc3d9d68ba6a07d1e84ea45d6730a21c9ba10dd7","modified":1573306251033},{"_id":"themes/3-hexo/source/js/script.js","hash":"53ff0e47ef0e12b8e6ce70a73065b72f2967f598","modified":1572771049958},{"_id":"themes/3-hexo/source/js/search.js","hash":"bccd29420fc9c946d6a131f48dae45fc2cedcb37","modified":1572771049958},{"_id":"source/images/pasted-1.png","hash":"d1fd04ff88b18546b3e10422cfafdca926a66d7c","modified":1572771593881},{"_id":"source/images/pasted-43.png","hash":"e05bb59f201ceb5350829493ca20655db5255ca3","modified":1572789498180},{"_id":"source/images/pasted-47.png","hash":"b5db971a71dc095d0c735ab68535f54a2411dd3c","modified":1573302507791},{"_id":"source/images/pasted-56.png","hash":"e6de0a4f0dc7a3c6357f5a1201a93c4e4bc4de18","modified":1573303224279},{"_id":"source/images/pasted-59.png","hash":"f4da55118fdd7de86bace39597fc27ba37ee47a2","modified":1573303297221},{"_id":"source/images/pasted-60.png","hash":"0606355de6758bd7353f2f396816f5a23b2d2b98","modified":1573303874929},{"_id":"source/images/pasted-8.png","hash":"2e159d4afe19040ec7b41bf61250311c0ec978de","modified":1572771593889},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1572771049958},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1572771049958},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1572771049959},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1572771049956},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1572771049956},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1572771049955},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1572771049956},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1572771049956},{"_id":"themes/3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1572771049957},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1572771049958},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"6f9f2b6234db3b99323595028f3123a80af67ce3","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"27738c280cc03c18381164b339cf460568c7e586","modified":1586593246000},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"5f6c948d0a24fe439f8aee1c3a7b15409aff6627","modified":1586595272000},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"87a6e4c258e07eeb5428188ba4030f1b07404883","modified":1578359269000},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"266e4b638b71892fdca1f5870e8f2e5d695e0958","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"7e6c50b6c24de864e0d6a106e6a8e423e312454a","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"599d96c7d8c6bf835528aba627da9869e5679174","modified":1572961388000},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"da40cb48b6b1f24cbd7107f7c97b04f063e9c299","modified":1572771049954},{"_id":"source/images/pasted-4.png","hash":"9727a4005b12fb27259c74465d96ff82526b7000","modified":1572771593883},{"_id":"source/images/pasted-54.png","hash":"bd4bae6a638b4f343335d8cd7ba847c99ae857b5","modified":1573302744211},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"436ba95097714279cc5cd790fa6ef5aafe6f6cf4","modified":1572771765000},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"b1085ab35f86cc5848637a190c68f8b878899011","modified":1580366230000},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"fa4dfd707d67106ea31d65679cd96ef8fc9b6b94","modified":1572771049955},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"d2c0910565858035a608765978b9cee73523cacc","modified":1572771049956},{"_id":"source/images/pasted-42.png","hash":"fa5289375c13a95d01a959851cbd6e289c1282a0","modified":1572787567838},{"_id":"source/images/pasted-49.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1573302568064},{"_id":"source/images/pasted-50.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1573302575801},{"_id":"source/images/pasted-51.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1573302582963},{"_id":"source/images/pasted-53.png","hash":"bd4bae6a638b4f343335d8cd7ba847c99ae857b5","modified":1573302736135},{"_id":"source/images/pasted-61.png","hash":"4ba69273cd1f5b282cf9bc7d753e1dc9ca4fe2b7","modified":1573303996930},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"d7acabed9d375a0ee44d1480b68b7f50abdc7712","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1572771049957},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"cdead1a127e9bdd4818117e4c7fe7ac4638b4c19","modified":1572771049957},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1572771049957},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1572771049957},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1572771049957},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1572771049958},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1572771049957},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1572771049956},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1572771049956},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1572771049956},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1572771049957},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1572771049956},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1572771049956},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1572771049959},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1572771049956},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1572771049957},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1572771049956},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"359f73329b9821f3ca3554d306a04d6766110a5a","modified":1572771049954},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1572771049954},{"_id":"source/images/pasted-2.png","hash":"f6f9a0478761cb2e4d692421f1705c5eec9db863","modified":1572771593872},{"_id":"source/images/pasted-3.png","hash":"a2944215ece304d078cc05649ebb0ce6435de141","modified":1572771593886},{"_id":"source/images/pasted-62.png","hash":"5a8b92b0251e139cd1d52871adb205255202eaaf","modified":1573304018392},{"_id":"source/images/pasted-7.png","hash":"f7855de786fbbdf651c96ca3bd5e6de240d48615","modified":1572771593884},{"_id":"source/images/pasted-9.png","hash":"e19709e1a2d3e4c4116fcc551e7dacb293259971","modified":1572771593891},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1572771049959},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1572771049954},{"_id":"source/images/pasted-48.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1573302558137},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"0fc66d6c78fe56c2916e3257d5a52b2c27a8647d","modified":1586589833000},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1572771049954},{"_id":"source/images/pasted-5.png","hash":"7d4086cb38c890c689995bb66a53a340d2ae8c12","modified":1572771593879},{"_id":"source/images/pasted-55.png","hash":"88036870320ecdb82b71d6dd2559bded81a2ed19","modified":1573302777201},{"_id":"themes/3-hexo/source/img/5d3521411f3f169375.png","hash":"1b5b9c4707634baed12b9ed02c57973c54663f09","modified":1572771049956},{"_id":"public/baidusitemap.xml","hash":"0aebdb16518144728cf84a8b14a9dfb37db7e754","modified":1586595343331},{"_id":"public/sitemap.xml","hash":"1af1014a01e66d339eb9a1bd8b13f484a5caf258","modified":1586595343332},{"_id":"public/2019/11/10/电商网站SEO优化指南/index.html","hash":"2c1487248671c8fa489037463d04683a42e1451e","modified":1586595343379},{"_id":"public/2019/11/10/偏向内容网站SEO优化指南/index.html","hash":"0827ca7c6762042b35f4478f84442023a12923a7","modified":1586595343379},{"_id":"public/2019/11/10/企业网站SEO优化指南/index.html","hash":"f542f9c6dbc8b6e0ba9478d3df35e9c1e5ece5d6","modified":1586595343379},{"_id":"public/2019/11/10/中小网站SEO九大步骤/index.html","hash":"e4b1ba11fdde2b25e0bb9519d43034980eae92ec","modified":1586595343381},{"_id":"public/2019/11/10/新站SEO绝密九式，不小心泄漏/index.html","hash":"44ddae63148c6171102bf303944428ad6023197d","modified":1586595343382},{"_id":"public/2019/11/10/大型网站SEO十二步曲/index.html","hash":"6d25280a5bb5542be994cd2f0eeabbf951191b8a","modified":1586595343382},{"_id":"public/2019/11/09/网站收录踩过的坑/index.html","hash":"87fe19b5754382d2c7ef76bbfb44f5a33b2ae901","modified":1586595343382},{"_id":"public/2019/11/09/新站不被收录自检/index.html","hash":"08b27b96869adabcd7e8063e1623859379b653c6","modified":1586595343382},{"_id":"public/2019/11/09/影响网站收录的15个因素/index.html","hash":"4fdc850917dfbdb8d57b7dc651646c7e1f95e6a3","modified":1586595343382},{"_id":"public/2019/11/09/如何让百度收录新站/index.html","hash":"8507e186a2cd5a275ca7faeae457e0dbbd652f0c","modified":1586595343382},{"_id":"public/2019/11/04/linux-find命令详解大全/index.html","hash":"2bfadda32f63777a330403e5a241e2de8a550766","modified":1586595343383},{"_id":"public/2019/11/03/不停折腾hexo-admin，直到完全实时自动发布为止/index.html","hash":"0a4ef440546ff38c180dc0cbc3f24873bb50bc41","modified":1586595343383},{"_id":"public/2019/11/03/从零开始创建一个漂亮的todo-第一版-知识铺/index.html","hash":"ae46fabade43268d10d4fc818bb2d3358537cab9","modified":1586595343383},{"_id":"public/2019/11/03/从零开始创建一个属于技术宅的产品-万站联盟接入-知识铺/index.html","hash":"cd996b678b7260acbac60c4daf96933c549ca7ab","modified":1586595343383},{"_id":"public/2019/11/03/从零开始创建一个属于技术宅的产品，万站联盟-知识铺/index.html","hash":"3ecee4a8c16e27f154e0f5974a4d56465617c98b","modified":1586595343383},{"_id":"public/2019/11/03/从零开始创建一个属于程序员的网站，第一个个人博客-知识铺/index.html","hash":"101792b575e3bec573b39f08acd2e434f86ce718","modified":1586595343383},{"_id":"public/2019/11/03/hexo-通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo-g-d-，彻底脱离命令行操作！！！！/index.html","hash":"a1b572af2ad742bdbc2fac7b44e7777011f6ba34","modified":1586595343383},{"_id":"public/2019/11/03/Hexo admin 自动发布文章/index.html","hash":"8fcb22dc986510c4f2a28e7007705e92160794b4","modified":1586595343383},{"_id":"public/2019/11/03/hexo-admin安装使用/index.html","hash":"0086899fba99090c61c808a361affbd526fe1652","modified":1586595343383},{"_id":"public/2019/11/03/Hexo搭建个人博客/index.html","hash":"a13a84dde5c027b3eed5cd750a401d42d7c23a20","modified":1586595343383},{"_id":"public/2019/11/03/hexo主题之hexo-theme-yilia-plus/index.html","hash":"b25f07c49a0703b905f37153a0630c7c537ed178","modified":1586595343384},{"_id":"public/2019/11/03/如何优雅地发布Hexo博客/index.html","hash":"fa99fc1f32151dfb1465e3669584db4dc752b494","modified":1586595343384},{"_id":"public/archives/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343384},{"_id":"public/archives/page/2/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343384},{"_id":"public/archives/page/3/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343384},{"_id":"public/archives/2019/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343384},{"_id":"public/archives/2019/page/2/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/archives/2019/page/3/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/archives/2019/11/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/archives/2019/11/page/2/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/archives/2019/11/page/3/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/categories/hexo/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/categories/hexo/个人建站/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343385},{"_id":"public/page/2/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343408},{"_id":"public/page/3/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343408},{"_id":"public/tags/hexo/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343431},{"_id":"public/tags/个人博客/index.html","hash":"3ca60ce364bf081415a9c02e4ad88828a4fd1d5d","modified":1586595343431},{"_id":"public/robot.txt","hash":"49eafd7f9e9c2a42290ad4693c461f0a58d9de36","modified":1586595343469},{"_id":"public/images/pasted-0.png","hash":"a3c2d2e1758d6efae4ef33248f995bdd9d10098f","modified":1586595343469},{"_id":"public/images/pasted-11.png","hash":"9e73357736fae79671d20256a000c6a69b460410","modified":1586595343469},{"_id":"public/images/pasted-10.png","hash":"5b61fc6408862eb5fb1b4cf715921e86998afc93","modified":1586595343469},{"_id":"public/images/pasted-12.png","hash":"41d935d1da62188da49a974a014fb7260e586e82","modified":1586595343469},{"_id":"public/images/pasted-13.png","hash":"92aa50661c4908f23f77d553578299f7c23bcc4d","modified":1586595343469},{"_id":"public/images/pasted-14.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1586595343469},{"_id":"public/images/pasted-15.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1586595343469},{"_id":"public/images/pasted-17.png","hash":"bb0a0c274fc3d3863da6a2206430efb94754489f","modified":1586595343470},{"_id":"public/images/pasted-18.png","hash":"2c7c009d8f337f9a9ca364b7407a126374e54d36","modified":1586595343470},{"_id":"public/images/pasted-16.png","hash":"8deb0fec39595eb288fb692a187bdcc5efbd482f","modified":1586595343470},{"_id":"public/images/pasted-19.png","hash":"0910920e132be468244ee28a95d0832ad685d3b2","modified":1586595343470},{"_id":"public/images/pasted-20.png","hash":"29dc13e68c2212d6739eefd7ec6d06fdb7117aa2","modified":1586595343470},{"_id":"public/images/pasted-22.png","hash":"9093b8671238eff0f45c99aa053e153131488504","modified":1586595343470},{"_id":"public/images/pasted-21.png","hash":"93b855398c6498146884bc15e36c544e7d980b43","modified":1586595343470},{"_id":"public/images/pasted-23.png","hash":"1f8d11d2a8e969721f1133496a339e8fd9303692","modified":1586595343470},{"_id":"public/images/pasted-25.png","hash":"af838e6767c91134a34964b74f288c22d370c4ff","modified":1586595343470},{"_id":"public/images/pasted-26.png","hash":"f0261f1234175c0b266237e4321166ff79767eee","modified":1586595343470},{"_id":"public/images/pasted-24.png","hash":"1f8d11d2a8e969721f1133496a339e8fd9303692","modified":1586595343470},{"_id":"public/images/pasted-27.png","hash":"6aef92884168e893da56c4592048d4bb35e1ae2a","modified":1586595343470},{"_id":"public/images/pasted-28.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343470},{"_id":"public/images/pasted-29.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343470},{"_id":"public/images/pasted-30.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343471},{"_id":"public/images/pasted-31.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343471},{"_id":"public/images/pasted-32.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343471},{"_id":"public/images/pasted-34.png","hash":"ae2bf3f968d09d0e9e995f57201b0bba215d5839","modified":1586595343471},{"_id":"public/images/pasted-36.png","hash":"9bf496ffd46db1070c18a2d7e9109dc47e703b19","modified":1586595343471},{"_id":"public/images/pasted-33.png","hash":"f0ed373f87b5a2be54d4b64c26b6ba10e913e534","modified":1586595343478},{"_id":"public/images/pasted-37.png","hash":"a2bf952c40d0bc78f4055df214859cd55b30ce83","modified":1586595343478},{"_id":"public/images/pasted-40.png","hash":"f4eac91f202b5c6aadd9ae961b0388ea91ceee7a","modified":1586595343478},{"_id":"public/images/pasted-44.png","hash":"fd0d4e4c827644410eb068fd902b48ea28cfaf95","modified":1586595343478},{"_id":"public/images/pasted-46.png","hash":"9f71a930e96ea2cb1d7d10872230c3098848e68c","modified":1586595343478},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1586595343479},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1586595343479},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1586595343479},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1586595343479},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1586595343479},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1586595343479},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1586595343479},{"_id":"public/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1586595343479},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1586595343479},{"_id":"public/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1586595343479},{"_id":"public/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1586595343479},{"_id":"public/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1586595343479},{"_id":"public/images/pasted-35.png","hash":"fcf2c565ff9110bd0c6a717959416855c7918811","modified":1586595344531},{"_id":"public/images/pasted-38.png","hash":"25405dd08d2808dd07e21c7c63422f6bbd37a107","modified":1586595344532},{"_id":"public/images/pasted-39.png","hash":"41d1dcc59216e56cdfddea8961f72a4e7434e9f8","modified":1586595344544},{"_id":"public/images/pasted-41.png","hash":"cab1e6e50d0cb19b8e6a2c9495af7f4ef05e3f1b","modified":1586595344544},{"_id":"public/images/pasted-45.png","hash":"17848ec9e61e90964a37257deea1b05b5bd612ea","modified":1586595344544},{"_id":"public/images/pasted-52.png","hash":"24e9f9f058d0bd75fd71027f4870a1f15c499683","modified":1586595344544},{"_id":"public/images/pasted-57.png","hash":"84468c584e8b39c233b8c434e48d35a0e08ee445","modified":1586595344544},{"_id":"public/images/pasted-58.png","hash":"f5aef743f8e24d53b57107af1dd2f5cf01ca0946","modified":1586595344544},{"_id":"public/images/pasted-6.png","hash":"586bb726534dd103c916f35403283a14afaa8030","modified":1586595344544},{"_id":"public/images/pasted-1.png","hash":"d1fd04ff88b18546b3e10422cfafdca926a66d7c","modified":1586595344544},{"_id":"public/images/pasted-43.png","hash":"e05bb59f201ceb5350829493ca20655db5255ca3","modified":1586595344545},{"_id":"public/images/pasted-47.png","hash":"b5db971a71dc095d0c735ab68535f54a2411dd3c","modified":1586595344545},{"_id":"public/images/pasted-56.png","hash":"e6de0a4f0dc7a3c6357f5a1201a93c4e4bc4de18","modified":1586595344545},{"_id":"public/images/pasted-59.png","hash":"f4da55118fdd7de86bace39597fc27ba37ee47a2","modified":1586595344545},{"_id":"public/images/pasted-60.png","hash":"0606355de6758bd7353f2f396816f5a23b2d2b98","modified":1586595344545},{"_id":"public/images/pasted-8.png","hash":"2e159d4afe19040ec7b41bf61250311c0ec978de","modified":1586595344545},{"_id":"public/img/weixin.jpg","hash":"fa4dfd707d67106ea31d65679cd96ef8fc9b6b94","modified":1586595344545},{"_id":"public/img/alipay.jpg","hash":"d2c0910565858035a608765978b9cee73523cacc","modified":1586595344546},{"_id":"public/js/search.js","hash":"bccd29420fc9c946d6a131f48dae45fc2cedcb37","modified":1586595344610},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1586595344610},{"_id":"public/css/mobile.css","hash":"79ab291be160e0ca753512a96c5198f7477f13be","modified":1586595344610},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1586595344610},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1586595344611},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1586595344611},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1586595344611},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1586595344611},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1586595344611},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1586595344637},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1586595344638},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1586595344638},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1586595344638},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1586595344638},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1586595344638},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1586595344638},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1586595344638},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1586595344638},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1586595344638},{"_id":"public/js/script.js","hash":"53ff0e47ef0e12b8e6ce70a73065b72f2967f598","modified":1586595344638},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1586595344638},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1586595344638},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1586595344638},{"_id":"public/css/style.css","hash":"6bdecc63325857abe2b75293f79d5b1fd1e25fa6","modified":1586595344639},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1586595344639},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1586595344639},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1586595344639},{"_id":"public/images/pasted-4.png","hash":"9727a4005b12fb27259c74465d96ff82526b7000","modified":1586595344639},{"_id":"public/images/pasted-54.png","hash":"bd4bae6a638b4f343335d8cd7ba847c99ae857b5","modified":1586595344639},{"_id":"public/images/pasted-7.png","hash":"f7855de786fbbdf651c96ca3bd5e6de240d48615","modified":1586595344639},{"_id":"public/images/pasted-9.png","hash":"e19709e1a2d3e4c4116fcc551e7dacb293259971","modified":1586595344639},{"_id":"public/images/pasted-48.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1586595344639},{"_id":"public/images/pasted-42.png","hash":"fa5289375c13a95d01a959851cbd6e289c1282a0","modified":1586595344644},{"_id":"public/images/pasted-50.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1586595344644},{"_id":"public/images/pasted-53.png","hash":"bd4bae6a638b4f343335d8cd7ba847c99ae857b5","modified":1586595344644},{"_id":"public/images/pasted-51.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1586595344664},{"_id":"public/images/pasted-61.png","hash":"4ba69273cd1f5b282cf9bc7d753e1dc9ca4fe2b7","modified":1586595344664},{"_id":"public/images/pasted-3.png","hash":"a2944215ece304d078cc05649ebb0ce6435de141","modified":1586595344664},{"_id":"public/images/pasted-62.png","hash":"5a8b92b0251e139cd1d52871adb205255202eaaf","modified":1586595344664},{"_id":"public/images/pasted-49.png","hash":"d6d20d912bc5a9c2e9c6395c83ccb507572e638b","modified":1586595344669},{"_id":"public/images/pasted-2.png","hash":"f6f9a0478761cb2e4d692421f1705c5eec9db863","modified":1586595344669},{"_id":"public/images/pasted-55.png","hash":"88036870320ecdb82b71d6dd2559bded81a2ed19","modified":1586595344681},{"_id":"public/images/pasted-5.png","hash":"7d4086cb38c890c689995bb66a53a340d2ae8c12","modified":1586595344694},{"_id":"public/img/5d3521411f3f169375.png","hash":"1b5b9c4707634baed12b9ed02c57973c54663f09","modified":1586595344696}],"Category":[{"name":"hexo","_id":"ck8vdwgh50004okdm4rgiimgs"},{"name":"个人建站","parent":"ck8vdwgh50004okdm4rgiimgs","_id":"ck8vdwgib000fokdm3lrlzfgq"}],"Data":[],"Page":[],"Post":[{"title":"hexo 通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo g -d ，彻底脱离命令行操作！！！！","author":"知识铺","date":"2019-11-03T05:22:00.000Z","_content":"\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。  \n源码：https://github.com/dataiyangu/dataiyangu.github.io\n\n首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～\n\nhexo-admin官网\nhttps://jaredforsyth.com/hexo-admin/\n\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\nhexo根目录配置文件\n\nadmin:\n\nusername: zoro\n\npassword_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash\n\nsecret: hey hexo deploy//用以cookies安全；\n\nCommand: './admin_script/hexo-generate.sh' # expire: 60*1\n\n这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！\ncommad后续操作：\n\n在根目录新建admin_script，文件夹，进入执行：\n\ntouch hexo-generate.sh;\nvim hexo-generate.sh;\n在里面加入\n\n#!/usr/bin/env sh\nhexo clean\nhexo g -d\n//想加什么命令都可以，一键完成。\n最后，修改权限\n\nchmod +x hexo-generate.sh\n登录界面\n\n主页中的按钮：\n\n还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！\n\nPost：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\nPages：就是诸如标签云之类的页面管理；\nAbout：关于admin插件的说明\nhexo-gen：这个原来是Deploy，被我修改了，关键节点；\nSettings:配置；\n注意：\n(node:10338) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nhexo clean的时候会多一条警告，如上图，对程序不会有影响，原因是node.js版本的问题，对某些语句不支持，不是强迫症的可以不用管，强迫症的可以通过hexo --debug，对错误追踪，然后 mpn uninstall xxxx  --save卸载掉。   \n\n————————————————   \n版权声明：本文为CSDN博主「Leesin Dong」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/dataiyangu/article/details/83066586","source":"_posts/hexo-通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo-g-d-，彻底脱离命令行操作！！！！.md","raw":"title: hexo 通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo g -d ，彻底脱离命令行操作！！！！\nauthor: 知识铺\ntags:\n  - hexo\ncategories: []\ndate: 2019-11-03 13:22:00\n---\n\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。  \n源码：https://github.com/dataiyangu/dataiyangu.github.io\n\n首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～\n\nhexo-admin官网\nhttps://jaredforsyth.com/hexo-admin/\n\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\nhexo根目录配置文件\n\nadmin:\n\nusername: zoro\n\npassword_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash\n\nsecret: hey hexo deploy//用以cookies安全；\n\nCommand: './admin_script/hexo-generate.sh' # expire: 60*1\n\n这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！\ncommad后续操作：\n\n在根目录新建admin_script，文件夹，进入执行：\n\ntouch hexo-generate.sh;\nvim hexo-generate.sh;\n在里面加入\n\n#!/usr/bin/env sh\nhexo clean\nhexo g -d\n//想加什么命令都可以，一键完成。\n最后，修改权限\n\nchmod +x hexo-generate.sh\n登录界面\n\n主页中的按钮：\n\n还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！\n\nPost：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\nPages：就是诸如标签云之类的页面管理；\nAbout：关于admin插件的说明\nhexo-gen：这个原来是Deploy，被我修改了，关键节点；\nSettings:配置；\n注意：\n(node:10338) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nhexo clean的时候会多一条警告，如上图，对程序不会有影响，原因是node.js版本的问题，对某些语句不支持，不是强迫症的可以不用管，强迫症的可以通过hexo --debug，对错误追踪，然后 mpn uninstall xxxx  --save卸载掉。   \n\n————————————————   \n版权声明：本文为CSDN博主「Leesin Dong」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/dataiyangu/article/details/83066586","slug":"hexo-通过hexo-admin进行全自动发布文章，能在线拷贝图片，实时查看效果，更加优雅！！！完成hexo-g-d-，彻底脱离命令行操作！！！！","published":1,"updated":"2019-11-03T08:59:53.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwggn0000okdmrn3lnocd","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>源码：<a href=\"https://github.com/dataiyangu/dataiyangu.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/dataiyangu/dataiyangu.github.io</a></p>\n<p>首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～</p>\n<p>hexo-admin官网<br><a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a></p>\n<p>npm install –save hexo-admin<br>hexo server -d<br>open <a href=\"http://localhost:4000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin/</a><br>hexo根目录配置文件</p>\n<p>admin:</p>\n<p>username: zoro</p>\n<p>password_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash</p>\n<p>secret: hey hexo deploy//用以cookies安全；</p>\n<p>Command: ‘./admin_script/hexo-generate.sh’ # expire: 60*1</p>\n<p>这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！<br>commad后续操作：</p>\n<p>在根目录新建admin_script，文件夹，进入执行：</p>\n<p>touch hexo-generate.sh;<br>vim hexo-generate.sh;<br>在里面加入</p>\n<p>#!/usr/bin/env sh<br>hexo clean<br>hexo g -d<br>//想加什么命令都可以，一键完成。<br>最后，修改权限</p>\n<p>chmod +x hexo-generate.sh<br>登录界面</p>\n<p>主页中的按钮：</p>\n<p>还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！</p>\n<p>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；<br>Pages：就是诸如标签云之类的页面管理；<br>About：关于admin插件的说明<br>hexo-gen：这个原来是Deploy，被我修改了，关键节点；<br>Settings:配置；<br>注意：<br>(node:10338) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>hexo clean的时候会多一条警告，如上图，对程序不会有影响，原因是node.js版本的问题，对某些语句不支持，不是强迫症的可以不用管，强迫症的可以通过hexo –debug，对错误追踪，然后 mpn uninstall xxxx  –save卸载掉。   </p>\n<p>————————————————<br>版权声明：本文为CSDN博主「Leesin Dong」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/dataiyangu/article/details/83066586\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dataiyangu/article/details/83066586</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>源码：<a href=\"https://github.com/dataiyangu/dataiyangu.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/dataiyangu/dataiyangu.github.io</a></p>\n<p>首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～</p>\n<p>hexo-admin官网<br><a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a></p>\n<p>npm install –save hexo-admin<br>hexo server -d<br>open <a href=\"http://localhost:4000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin/</a><br>hexo根目录配置文件</p>\n<p>admin:</p>\n<p>username: zoro</p>\n<p>password_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash</p>\n<p>secret: hey hexo deploy//用以cookies安全；</p>\n<p>Command: ‘./admin_script/hexo-generate.sh’ # expire: 60*1</p>\n<p>这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！<br>commad后续操作：</p>\n<p>在根目录新建admin_script，文件夹，进入执行：</p>\n<p>touch hexo-generate.sh;<br>vim hexo-generate.sh;<br>在里面加入</p>\n<p>#!/usr/bin/env sh<br>hexo clean<br>hexo g -d<br>//想加什么命令都可以，一键完成。<br>最后，修改权限</p>\n<p>chmod +x hexo-generate.sh<br>登录界面</p>\n<p>主页中的按钮：</p>\n<p>还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！</p>\n<p>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；<br>Pages：就是诸如标签云之类的页面管理；<br>About：关于admin插件的说明<br>hexo-gen：这个原来是Deploy，被我修改了，关键节点；<br>Settings:配置；<br>注意：<br>(node:10338) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>hexo clean的时候会多一条警告，如上图，对程序不会有影响，原因是node.js版本的问题，对某些语句不支持，不是强迫症的可以不用管，强迫症的可以通过hexo –debug，对错误追踪，然后 mpn uninstall xxxx  –save卸载掉。   </p>\n<p>————————————————<br>版权声明：本文为CSDN博主「Leesin Dong」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/dataiyangu/article/details/83066586\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dataiyangu/article/details/83066586</a></p>\n"},{"title":"Hexo admin 自动发布文章","author":"知识铺","date":"2019-11-03T05:12:00.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \n首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～\n\nhexo-admin官网\nhttps://jaredforsyth.com/hexo-admin/\n`\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\n`\nhexo根目录配置文件\n`\nadmin:\n\nusername: zoro\n\npassword_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash\n\nsecret: hey hexo deploy//用以cookies安全；\n\nCommand: './admin_script/hexo-generate.sh' # expire: 60*1\n`\n这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！\ncommad后续操作：\n\n在根目录新建admin_script，文件夹，进入执行：\n`\ntouch hexo-generate.sh;\nvim hexo-generate.sh;\n`\n在里面加入\n`\n#!/usr/bin/env sh\nhexo clean\nhexo g -d\n`\n//想加什么命令都可以，一键完成。\n\n最后，修改权限\n`\nchmod +x hexo-generate.sh\n`\n主页中的按钮：\n\n还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！\n\nPost：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\nPages：就是诸如标签云之类的页面管理；\nAbout：关于admin插件的说明\nDeploy：关键节点；\nSettings:配置；\n————————————————\n版权声明：本文为CSDN博主「姚飞亮」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/u010932545/article/details/85882936","source":"_posts/Hexo admin 自动发布文章.md","raw":"title: Hexo admin 自动发布文章\nauthor: 知识铺\ntags:\n  - hexo\ncategories:\n  - hexo\n  - 个人建站\ndate: 2019-11-03 13:12:00\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \n首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～\n\nhexo-admin官网\nhttps://jaredforsyth.com/hexo-admin/\n`\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\n`\nhexo根目录配置文件\n`\nadmin:\n\nusername: zoro\n\npassword_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash\n\nsecret: hey hexo deploy//用以cookies安全；\n\nCommand: './admin_script/hexo-generate.sh' # expire: 60*1\n`\n这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！\ncommad后续操作：\n\n在根目录新建admin_script，文件夹，进入执行：\n`\ntouch hexo-generate.sh;\nvim hexo-generate.sh;\n`\n在里面加入\n`\n#!/usr/bin/env sh\nhexo clean\nhexo g -d\n`\n//想加什么命令都可以，一键完成。\n\n最后，修改权限\n`\nchmod +x hexo-generate.sh\n`\n主页中的按钮：\n\n还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！\n\nPost：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\nPages：就是诸如标签云之类的页面管理；\nAbout：关于admin插件的说明\nDeploy：关键节点；\nSettings:配置；\n————————————————\n版权声明：本文为CSDN博主「姚飞亮」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/u010932545/article/details/85882936","slug":"Hexo admin 自动发布文章","published":1,"updated":"2019-11-03T08:59:53.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwggu0001okdmx66896s3","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～</p>\n<p>hexo-admin官网<br><a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a><br><code>npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/</code><br>hexo根目录配置文件<br>`<br>admin:</p>\n<p>username: zoro</p>\n<p>password_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash</p>\n<p>secret: hey hexo deploy//用以cookies安全；</p>\n<p>Command: ‘./admin_script/hexo-generate.sh’ # expire: 60*1<br>`<br>这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！<br>commad后续操作：</p>\n<p>在根目录新建admin_script，文件夹，进入执行：<br><code>touch hexo-generate.sh;\nvim hexo-generate.sh;</code><br>在里面加入<br>`</p>\n<p>#!/usr/bin/env sh<br>hexo clean<br>hexo g -d<br>`<br>//想加什么命令都可以，一键完成。</p>\n<p>最后，修改权限<br><code>chmod +x hexo-generate.sh</code><br>主页中的按钮：</p>\n<p>还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！</p>\n<p>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；<br>Pages：就是诸如标签云之类的页面管理；<br>About：关于admin插件的说明<br>Deploy：关键节点；<br>Settings:配置；<br>————————————————<br>版权声明：本文为CSDN博主「姚飞亮」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/u010932545/article/details/85882936\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010932545/article/details/85882936</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>首先因为有的图片外链是不能查看的比如我们的csdn，这个时候需要先执行npm命令下载插件，再下载图片在复制到某个文件夹，再进行引用，真的是好麻烦，但是自从有了hexo-admin，妈妈再也不用担心我了，直接用qq截图或者复制某个图片，commad（control）+v到我们的hexo-admin即可，会自动下载，并引用～idea编辑器也不错但是不能实现拷贝图片的功能～</p>\n<p>hexo-admin官网<br><a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a><br><code>npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/</code><br>hexo根目录配置文件<br>`<br>admin:</p>\n<p>username: zoro</p>\n<p>password_hash:be121740bf988b2225a313fa1f107ca1 //用户名密码不喜欢的可以不设置，这里通过bcrypt hash</p>\n<p>secret: hey hexo deploy//用以cookies安全；</p>\n<p>Command: ‘./admin_script/hexo-generate.sh’ # expire: 60*1<br>`<br>这里的command对应于界面中的deploy按钮，在下面写上脚本，可以一键生成html页面，并提交到托管的地址，这就是hexo admin的核心思想！<br>commad后续操作：</p>\n<p>在根目录新建admin_script，文件夹，进入执行：<br><code>touch hexo-generate.sh;\nvim hexo-generate.sh;</code><br>在里面加入<br>`</p>\n<p>#!/usr/bin/env sh<br>hexo clean<br>hexo g -d<br>`<br>//想加什么命令都可以，一键完成。</p>\n<p>最后，修改权限<br><code>chmod +x hexo-generate.sh</code><br>主页中的按钮：</p>\n<p>还有一个publish按钮，点击的话会出现在blog相应的文件夹中，unpublish的话就会在文件夹中消失！！！！！！</p>\n<p>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；<br>Pages：就是诸如标签云之类的页面管理；<br>About：关于admin插件的说明<br>Deploy：关键节点；<br>Settings:配置；<br>————————————————<br>版权声明：本文为CSDN博主「姚飞亮」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/u010932545/article/details/85882936\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010932545/article/details/85882936</a></p>\n"},{"title":"hexo-admin安装使用","author":"知识铺","date":"2019-11-03T05:10:40.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \nhexo-admin是一个很好用hexo管理工具，方便文章的编辑和查看，对插入图片友好。\n\n## 概要\n\n如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。\n这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。\n需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。\n\n## 安装过程\n\n安装过程中可能涉及到一些前提或内容，请参考我的另一篇文章\n[Hexo-Github-Pages安装部署](https://albenw.github.io/posts/3454819c/ \"Hexo-Github-Pages安装部署\")\n\n### 前提\n\n基于版本”hexo”: “^3.7.0”，”hexo-admin”: “^2.3.0”。\n\n### 安装 hexo-admin\n\ncd hexo 目录\n\n| 1 | npm install --save hexo-admin |\n\n启动 hexo\n\n| 1 | hexo s |\n\n然后打开 [http://localhost:4000/admin/](http://localhost:4000/admin/) 就可以看到管理页面。\n\n### 在 hexo-admin 你可以\n\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png)\n\nPages - 新加 page；\nPosts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；\nSettings - 一些配置；\nDeploy - 可以直接部署到 github。\n\n### 问题\n\n#### minimatch\n\n| 1 | npm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue |\n\n当你安装 hexo-admin，执行 npm install –save hexo-admin 时，可能会遇到上面的错误提示，是因为你缺少了一些依赖，执行下面的就好了。\n\n| 1\n2 | npm install minimatch@\"3.0.2\" \nnpm update -d |\n\n#### Config value “admin.deployCommand” not found\n\n当你第一次点击 Deploy 按钮时，可能会遇到上述的错误，因为缺少了执行 deploy 的命令，这个问题已经有人提了 issue 并且解决了\n[https://github.com/jaredly/hexo-admin/issues/70](https://github.com/jaredly/hexo-admin/issues/70)\n还需要注意的是，issue 中的脚本只是 hexo deploy，只是做 deploy 操作，但是一般我们的使用习惯是编辑完之后 deploy，所以是要 deploy 最新的，需要把脚本改为即可\n\n| 1\n2\n3 | #!/usr/bin/env sh\nhexo g\nhexo d |\n\ndeploy 后你可能看到\n\n| 1\n2\n3\n4 | Std Error\n(node:83411) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nWarning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.\nEverything up-to-date |\n\n这不是错误，你可以不用管。说明已经 deploy 成功。\n\n#### 复制图片时的一个小问题\n\nhexo-admin 编辑时支持直接复制图片（截图）到内容，这点是我比较喜欢的。但是有个问题，复制进去后是加载不出来的，会出现图裂的小图标。\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png)\n这时你只需要点击别的页面，再点回来就可以看到了，就是“刷”一下就好了，最简单的就是点击右上角打勾的按钮，这个按钮的作用是拼写检查，点一下再点回来，就可以看到你刚复制进去的图片了。\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png)\n这大概是因为 hexo-admin 对图片做了延迟加载，具体可以看看这篇文章说的\n[https://htchz.me/2018/03/10/Hexo/](https://htchz.me/2018/03/10/Hexo/)\n\n## 参考资料\n\n[https://www.jianshu.com/p/68e727dda16d](https://www.jianshu.com/p/68e727dda16d)\n[https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/](https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/)\n[https://github.com/jaredly/hexo-admin](https://github.com/jaredly/hexo-admin)","source":"_posts/hexo-admin安装使用.md","raw":"title: hexo-admin安装使用\nauthor: 知识铺\ndate: 2019-11-03 13:10:40\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \nhexo-admin是一个很好用hexo管理工具，方便文章的编辑和查看，对插入图片友好。\n\n## 概要\n\n如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。\n这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。\n需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。\n\n## 安装过程\n\n安装过程中可能涉及到一些前提或内容，请参考我的另一篇文章\n[Hexo-Github-Pages安装部署](https://albenw.github.io/posts/3454819c/ \"Hexo-Github-Pages安装部署\")\n\n### 前提\n\n基于版本”hexo”: “^3.7.0”，”hexo-admin”: “^2.3.0”。\n\n### 安装 hexo-admin\n\ncd hexo 目录\n\n| 1 | npm install --save hexo-admin |\n\n启动 hexo\n\n| 1 | hexo s |\n\n然后打开 [http://localhost:4000/admin/](http://localhost:4000/admin/) 就可以看到管理页面。\n\n### 在 hexo-admin 你可以\n\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png)\n\nPages - 新加 page；\nPosts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；\nSettings - 一些配置；\nDeploy - 可以直接部署到 github。\n\n### 问题\n\n#### minimatch\n\n| 1 | npm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue |\n\n当你安装 hexo-admin，执行 npm install –save hexo-admin 时，可能会遇到上面的错误提示，是因为你缺少了一些依赖，执行下面的就好了。\n\n| 1\n2 | npm install minimatch@\"3.0.2\" \nnpm update -d |\n\n#### Config value “admin.deployCommand” not found\n\n当你第一次点击 Deploy 按钮时，可能会遇到上述的错误，因为缺少了执行 deploy 的命令，这个问题已经有人提了 issue 并且解决了\n[https://github.com/jaredly/hexo-admin/issues/70](https://github.com/jaredly/hexo-admin/issues/70)\n还需要注意的是，issue 中的脚本只是 hexo deploy，只是做 deploy 操作，但是一般我们的使用习惯是编辑完之后 deploy，所以是要 deploy 最新的，需要把脚本改为即可\n\n| 1\n2\n3 | #!/usr/bin/env sh\nhexo g\nhexo d |\n\ndeploy 后你可能看到\n\n| 1\n2\n3\n4 | Std Error\n(node:83411) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nWarning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.\nEverything up-to-date |\n\n这不是错误，你可以不用管。说明已经 deploy 成功。\n\n#### 复制图片时的一个小问题\n\nhexo-admin 编辑时支持直接复制图片（截图）到内容，这点是我比较喜欢的。但是有个问题，复制进去后是加载不出来的，会出现图裂的小图标。\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png)\n这时你只需要点击别的页面，再点回来就可以看到了，就是“刷”一下就好了，最简单的就是点击右上角打勾的按钮，这个按钮的作用是拼写检查，点一下再点回来，就可以看到你刚复制进去的图片了。\n[![](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png)](https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png)\n这大概是因为 hexo-admin 对图片做了延迟加载，具体可以看看这篇文章说的\n[https://htchz.me/2018/03/10/Hexo/](https://htchz.me/2018/03/10/Hexo/)\n\n## 参考资料\n\n[https://www.jianshu.com/p/68e727dda16d](https://www.jianshu.com/p/68e727dda16d)\n[https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/](https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/)\n[https://github.com/jaredly/hexo-admin](https://github.com/jaredly/hexo-admin)","slug":"hexo-admin安装使用","published":1,"updated":"2019-11-03T08:59:53.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgh30003okdm2oo21ran","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>hexo-admin是一个很好用hexo管理工具，方便文章的编辑和查看，对插入图片友好。</p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。<br>这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。<br>需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>安装过程中可能涉及到一些前提或内容，请参考我的另一篇文章<br><a href=\"https://albenw.github.io/posts/3454819c/\" title=\"Hexo-Github-Pages安装部署\" target=\"_blank\" rel=\"noopener\">Hexo-Github-Pages安装部署</a></p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>基于版本”hexo”: “^3.7.0”，”hexo-admin”: “^2.3.0”。</p>\n<h3 id=\"安装-hexo-admin\"><a href=\"#安装-hexo-admin\" class=\"headerlink\" title=\"安装 hexo-admin\"></a>安装 hexo-admin</h3><p>cd hexo 目录</p>\n<p>| 1 | npm install –save hexo-admin |</p>\n<p>启动 hexo</p>\n<p>| 1 | hexo s |</p>\n<p>然后打开 <a href=\"http://localhost:4000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin/</a> 就可以看到管理页面。</p>\n<h3 id=\"在-hexo-admin-你可以\"><a href=\"#在-hexo-admin-你可以\" class=\"headerlink\" title=\"在 hexo-admin 你可以\"></a>在 hexo-admin 你可以</h3><p><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png\" alt></a></p>\n<p>Pages - 新加 page；<br>Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；<br>Settings - 一些配置；<br>Deploy - 可以直接部署到 github。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"minimatch\"><a href=\"#minimatch\" class=\"headerlink\" title=\"minimatch\"></a>minimatch</h4><p>| 1 | npm WARN deprecated <a href=\"mailto:minimatch@2.0.10\" target=\"_blank\" rel=\"noopener\">minimatch@2.0.10</a>: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue |</p>\n<p>当你安装 hexo-admin，执行 npm install –save hexo-admin 时，可能会遇到上面的错误提示，是因为你缺少了一些依赖，执行下面的就好了。</p>\n<p>| 1<br>2 | npm install minimatch@”3.0.2”<br>npm update -d |</p>\n<h4 id=\"Config-value-“admin-deployCommand”-not-found\"><a href=\"#Config-value-“admin-deployCommand”-not-found\" class=\"headerlink\" title=\"Config value “admin.deployCommand” not found\"></a>Config value “admin.deployCommand” not found</h4><p>当你第一次点击 Deploy 按钮时，可能会遇到上述的错误，因为缺少了执行 deploy 的命令，这个问题已经有人提了 issue 并且解决了<br><a href=\"https://github.com/jaredly/hexo-admin/issues/70\" target=\"_blank\" rel=\"noopener\">https://github.com/jaredly/hexo-admin/issues/70</a><br>还需要注意的是，issue 中的脚本只是 hexo deploy，只是做 deploy 操作，但是一般我们的使用习惯是编辑完之后 deploy，所以是要 deploy 最新的，需要把脚本改为即可</p>\n<p>| 1<br>2<br>3 | #!/usr/bin/env sh<br>hexo g<br>hexo d |</p>\n<p>deploy 后你可能看到</p>\n<p>| 1<br>2<br>3<br>4 | Std Error<br>(node:83411) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>Warning: Permanently added the RSA host key for IP address ‘13.229.188.59’ to the list of known hosts.<br>Everything up-to-date |</p>\n<p>这不是错误，你可以不用管。说明已经 deploy 成功。</p>\n<h4 id=\"复制图片时的一个小问题\"><a href=\"#复制图片时的一个小问题\" class=\"headerlink\" title=\"复制图片时的一个小问题\"></a>复制图片时的一个小问题</h4><p>hexo-admin 编辑时支持直接复制图片（截图）到内容，这点是我比较喜欢的。但是有个问题，复制进去后是加载不出来的，会出现图裂的小图标。<br><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png\" alt></a><br>这时你只需要点击别的页面，再点回来就可以看到了，就是“刷”一下就好了，最简单的就是点击右上角打勾的按钮，这个按钮的作用是拼写检查，点一下再点回来，就可以看到你刚复制进去的图片了。<br><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png\" alt></a><br>这大概是因为 hexo-admin 对图片做了延迟加载，具体可以看看这篇文章说的<br><a href=\"https://htchz.me/2018/03/10/Hexo/\" target=\"_blank\" rel=\"noopener\">https://htchz.me/2018/03/10/Hexo/</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/68e727dda16d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/68e727dda16d</a><br><a href=\"https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/\" target=\"_blank\" rel=\"noopener\">https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/</a><br><a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">https://github.com/jaredly/hexo-admin</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br>hexo-admin是一个很好用hexo管理工具，方便文章的编辑和查看，对插入图片友好。</p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。<br>这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。<br>需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>安装过程中可能涉及到一些前提或内容，请参考我的另一篇文章<br><a href=\"https://albenw.github.io/posts/3454819c/\" title=\"Hexo-Github-Pages安装部署\" target=\"_blank\" rel=\"noopener\">Hexo-Github-Pages安装部署</a></p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>基于版本”hexo”: “^3.7.0”，”hexo-admin”: “^2.3.0”。</p>\n<h3 id=\"安装-hexo-admin\"><a href=\"#安装-hexo-admin\" class=\"headerlink\" title=\"安装 hexo-admin\"></a>安装 hexo-admin</h3><p>cd hexo 目录</p>\n<p>| 1 | npm install –save hexo-admin |</p>\n<p>启动 hexo</p>\n<p>| 1 | hexo s |</p>\n<p>然后打开 <a href=\"http://localhost:4000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin/</a> 就可以看到管理页面。</p>\n<h3 id=\"在-hexo-admin-你可以\"><a href=\"#在-hexo-admin-你可以\" class=\"headerlink\" title=\"在 hexo-admin 你可以\"></a>在 hexo-admin 你可以</h3><p><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__0.png\" alt></a></p>\n<p>Pages - 新加 page；<br>Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；<br>Settings - 一些配置；<br>Deploy - 可以直接部署到 github。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"minimatch\"><a href=\"#minimatch\" class=\"headerlink\" title=\"minimatch\"></a>minimatch</h4><p>| 1 | npm WARN deprecated <a href=\"mailto:minimatch@2.0.10\" target=\"_blank\" rel=\"noopener\">minimatch@2.0.10</a>: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue |</p>\n<p>当你安装 hexo-admin，执行 npm install –save hexo-admin 时，可能会遇到上面的错误提示，是因为你缺少了一些依赖，执行下面的就好了。</p>\n<p>| 1<br>2 | npm install minimatch@”3.0.2”<br>npm update -d |</p>\n<h4 id=\"Config-value-“admin-deployCommand”-not-found\"><a href=\"#Config-value-“admin-deployCommand”-not-found\" class=\"headerlink\" title=\"Config value “admin.deployCommand” not found\"></a>Config value “admin.deployCommand” not found</h4><p>当你第一次点击 Deploy 按钮时，可能会遇到上述的错误，因为缺少了执行 deploy 的命令，这个问题已经有人提了 issue 并且解决了<br><a href=\"https://github.com/jaredly/hexo-admin/issues/70\" target=\"_blank\" rel=\"noopener\">https://github.com/jaredly/hexo-admin/issues/70</a><br>还需要注意的是，issue 中的脚本只是 hexo deploy，只是做 deploy 操作，但是一般我们的使用习惯是编辑完之后 deploy，所以是要 deploy 最新的，需要把脚本改为即可</p>\n<p>| 1<br>2<br>3 | #!/usr/bin/env sh<br>hexo g<br>hexo d |</p>\n<p>deploy 后你可能看到</p>\n<p>| 1<br>2<br>3<br>4 | Std Error<br>(node:83411) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>Warning: Permanently added the RSA host key for IP address ‘13.229.188.59’ to the list of known hosts.<br>Everything up-to-date |</p>\n<p>这不是错误，你可以不用管。说明已经 deploy 成功。</p>\n<h4 id=\"复制图片时的一个小问题\"><a href=\"#复制图片时的一个小问题\" class=\"headerlink\" title=\"复制图片时的一个小问题\"></a>复制图片时的一个小问题</h4><p>hexo-admin 编辑时支持直接复制图片（截图）到内容，这点是我比较喜欢的。但是有个问题，复制进去后是加载不出来的，会出现图裂的小图标。<br><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__1.png\" alt></a><br>这时你只需要点击别的页面，再点回来就可以看到了，就是“刷”一下就好了，最简单的就是点击右上角打勾的按钮，这个按钮的作用是拼写检查，点一下再点回来，就可以看到你刚复制进去的图片了。<br><a href=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://albenw.github.io/images/hexo-admin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8__2.png\" alt></a><br>这大概是因为 hexo-admin 对图片做了延迟加载，具体可以看看这篇文章说的<br><a href=\"https://htchz.me/2018/03/10/Hexo/\" target=\"_blank\" rel=\"noopener\">https://htchz.me/2018/03/10/Hexo/</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/68e727dda16d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/68e727dda16d</a><br><a href=\"https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/\" target=\"_blank\" rel=\"noopener\">https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/</a><br><a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">https://github.com/jaredly/hexo-admin</a></p>\n"},{"title":"Hexo搭建个人博客","author":"知识铺","date":"2019-11-03T04:56:00.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n## Hexo\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\nhexo官网： [http://hexo.io](https://links.jianshu.com/go?to=http%3A%2F%2Fhexo.io)\ngithub: [https://github.com/hexojs/hexo](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo)\n\n### hexo优势\n\n由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。\nhexo具有以下特点：\n\n> *   超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染\n> *   支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件\n> *   一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n> *   丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript\n\n### 安装hexo\n\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n*   [Node.js](https://links.jianshu.com/go?to=http%3A%2F%2Fnodejs.org%2F) (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)\n*   [Git](https://links.jianshu.com/go?to=http%3A%2F%2Fgit-scm.com%2F)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`npm install hexo-cli -g\nhexo init \nnpm install\nhexo s` \n\n如果您的电脑中尚未安装所需要的程序，请根据hexo官网安装指示完成安装:[https://hexo.io/zh-cn/docs/](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2F)。\n\n### hexo指令\n\n配置好之后，hexo就可以使用了，常用的hexo命令可访问[hexo指令](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2Fcommands.html)。\n\n`hexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本` \n\n缩写形式：\n\n`hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy` \n\n组合命令\n\n`hexo s -g #生成并本地预览\nhexo d -g #生成并上传` \n## Github\n\nGitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。\n\n### Github简介\n\n作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。\n\n如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份[复制](https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25A4%258D%25E5%2588%25B6)出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。\n\n### 清空Github仓库内容\n\n如果想要清空github仓库中的内容，可以先创建分支，然后清空本地master中的文件，保留.git和readme.md，清空后git到远程仓库中，可参考[Github清空远程仓库](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fsinat_34937826%2Farticle%2Fdetails%2F90512474)\n。\n\n### 配置SSH key\n\n为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。\n\n`$ cd ~/. ssh #检查本机已存在的ssh密钥` \n\n如果提示：No such file or directory 说明你是第一次使用git。\n\n`ssh-keygen -t rsa -C \"邮件地址\"` \n\n然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 `.ssh\\id_rsa.pub` 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -> SSH and GPG keys -> New SSH key：\n\n ![](//upload-images.jianshu.io/upload_images/763395-3393bb77d5fa0b4a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1035/format/webp)\n\n 配置SSH key\n\n测试是否成功`ssh -T git@github.com # 注意邮箱地址不用改` \n\n看到如下提示，说明配置成功。\n\n> You've successfully authenticated, but GitHub does not provide shell access.\n\n此时你还需要配置：\n\n`$ git config --global user.name \"liuxianan\"// 你的github用户名，非昵称\n$ git config --global user.email  \"xxx@qq.com\"// 填写你的github注册邮箱` \n\n> 参考：[使用hexo+github搭建免费个人博客详细教程](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fliuxianan%2Fp%2Fbuild-blog-website-by-hexo-github.html)\n\n### Deploy到github中\n\n修改站点配置文件(_config.yml)，修改 depoly ：\n\n`deploy:\n  type: git \n  repo: git@github.com:username/username.github.io.git //替换成自己的邮箱\n  branch: master` \n\n如果不行，安装插件：\n\n`npm install hexo-deployer-git --save` \n### 修改主题\n\nhexo的主题非常之多，可以从官网的[主题](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fthemes%2F)中自由选择。这里以next主题为例。\n主题的下载可以通过git到hexo/theme或者直接download zip然后解压到hexo/theme文件夹。\n在站点配置文件(_config.yml)中查找theme，\n\n ![](//upload-images.jianshu.io/upload_images/763395-b94f5483f3aa35cf.png?imageMogr2/auto-orient/strip|imageView2/2/w/342/format/webp)\n\n 修改主题\n\n然后将landscape修改为next或者hexo-theme-next，具体以theme中文件夹名称为主。\n`hexo d -g`后`hexo s`并刷新网页，可以看到主题已经更换成了next。\n## Next主题修改\n\n### 语言修改\n\n在站点文件_config.yml中查找language并将en修改为简体中文（zh-CN）：\n\n`title: 明明如月\nsubtitle:\ndescription:\nkeywords:\nauthor: sunfove\nlanguage: zh-CN //语言名称要写对\ntimezone:` \n\n注意更改的语言名称要写对，具体查看主题文件夹下的language文件夹中的名称。\n\n### 新建带日期格式的博文\n\n使用hexo new post “博文名称”生成的博文以博文名称生成文件，当文件太多时不便于管理查看，生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博文。\n在站点文件_config.yml中设置博客生成名称:\n\n`# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts` \n\n重新执行hexo new post “博文名称”命令，就可以生成yyyy-MM-dd-博文名称.md类型的名称了。\n\n### 侧栏头像\n\n在主题文件_config.yml中搜索：\n\n`avatar:\n  # In theme directory (source/images): /images/avatar.gif\n  # In site directory (source/uploads): /uploads/avatar.gif\n  # You can also use other linking images.\n  url: #/images/avatar.gif\n  # If true, the avatar would be dispalyed in circle.\n  rounded: false\n  # If true, the avatar would be rotated with the cursor.\n  rotated: false` \n\n在`url`处添加头像路径，本地图片放到主题文件夹下的`source/image`中，`rounded`为是否用圆形头像， `rotated`为是否旋转头像。\n\n### 添加标签和分类\n\n添加一个 分类 页面，并在菜单中显示页面链接。\n新建一个页面，命名为 categories 。命令如下：\n\n `hexo new page categories` \n\n编辑刚新建的页面，将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类。\n\n `title: 分类\n date: 2014-12-22 12:39:04\n type: \"categories\"\n ---` \n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 `comments`并将值设置为 `false`，如：\n\n `title: 分类\n date: 2014-12-22 12:39:04\n type: \"categories\"\n comments: false\n ---` \n\n在菜单中添加链接。编辑主题的_config.yml ，将 menu 中的 `categories: /categories`注释去掉，如下:\n\n `menu:\n   home: /\n   categories: /categories\n   archives: /archives\n   tags: /tags` \n\n添加标签和这个操作类似，将categories换成tags即可。\n\n> 参考：[创建分类界面](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fiissnan%2Fhexo-theme-next%2Fwiki%2F%25E5%2588%259B%25E5%25BB%25BA%25E5%2588%2586%25E7%25B1%25BB%25E9%25A1%25B5%25E9%259D%25A2)\n\n### 对文章进行加密\n\n打开`hemes\\hexo-theme-next\\layout\\_partials\\head\\head.swig`，在文件的开头位置找到如下代码\n\n`<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"{{ theme.android_chrome_color }}\">` \n\n在上边代码的末尾添加如下代码：\n\n`<script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入文章密码') !== '{{ page.password }}'){\n                alert('密码错误！');\n        if (history.length === 1) {\n            window.opener = null;\n            window.open('', '_self');\n            window.close();\n                } else {\n                    history.back();\n                }\n            }\n        }\n    })();\n</script>` \n\n添加完脚本代码，接下来在想要加密的文章的文件头加上`password` 属性就行了，如下：\n\n`---\ntitle: XXX\ndate: XXX\ntags:\n  - XXX\ncategories:\n  - XXX\npassword: 123\n---` \n\n这样在打开这篇文章时只有输入了123这个密码才可以打开成功。\n\n> 参考：[NexT主题个性化 - 对文章进行加密](https://links.jianshu.com/go?to=https%3A%2F%2Flewky.cn%2Fposts%2F15308.html)\n\n### Hexo admin编辑博客\n\n如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。\n这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。\n需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。\n安装过程：\n\n`npm install --save hexo-admin` \n\n在 hexo-admin 你可以\n\n*   Pages - 新加 page；\n*   Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；\n*   Settings - 一些配置；\n*   Deploy - 可以直接部署到 github。\n\n     ![](//upload-images.jianshu.io/upload_images/763395-73f5a0651ed10df0.png?imageMogr2/auto-orient/strip|imageView2/2/w/684/format/webp)\n\n     hexo admin\n\n> 参考：[hexo-admin安装使用](https://links.jianshu.com/go?to=https%3A%2F%2Falbenw.github.io%2Fposts%2F4ffa5bc6%2F)\n\n注：按照这个方案配置hexo-admin后，会出现如下警告，但不太影响使用。\n\n`hexo s -g\n(node:12084) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.` \n\n配置完成后，可以进行认证，详见：[【hexo】安装并配置admin插件](https://links.jianshu.com/go?to=http%3A%2F%2Fwww.pianshen.com%2Farticle%2F1382194525%2F)。\n这样登录admin就需要账号密码验证。\n\n hexo admin认证\n\n### 阅读全文\n\n推荐使用`< !--more-->` 进行手动截断，网上有很多教程自动截断，但文中包含中文和一些特殊符号的时候，判断可能会失效。自动截断教程可参考：[Hexo-设置阅读全文](https://www.jianshu.com/p/78c218f9d1e7)。\n\n### 修改标签样式\n\n修改模板 `\\themes\\hexo-theme-next\\layout\\_macro/post.swig`，搜索 `{%- set tag_indicate = '#' %}`，将 `#`换成`<i class=\"fa fa-tag\"></i>`\n\n### 修改布局模板\n\nlayout 布局模板放在 `scaffolds/`目录下，文件名称就是layout 名称。每次新建时，Hexo 会尝试在 scaffolds 文件夹中寻找同名文件，并根据其内容建立文章。所以可以在这里添加自己的 layout，作为常用的新建模板使用。同时你也可以编辑现有的 layout，比如 post 的 layout 默认是 `scaffolds\\post.md`。\n\n这里有一份文章配置信息，可以根据情况修改后作为模板复用，或直接在保存文章的路径新建.md文件中使用：\n\n`---\ntitle:   #文章名\ndate:   #发表日期\nupdated:   #更新日期\ncategories:   #文章分类\ntags:   #文章标签，多标签时使用英文逗号隔开\nphotos:  #如果使用Fancybox（文章头部展示图片），如此设置\n- URL1\n- URL2\n---` \n\n> 参考：[Hexo 使用指导](https://www.jianshu.com/p/3a8dba06856a)\n\n### 切换主题风格\n\n在主题文件_config.yml中查找`schemes`\n\n`# Schemes\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini` \n\n4种风格大同小异，你们可以选择自己喜欢的风格。\n\n*   Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n*   Mist - Muse 的紧凑版本，整洁有序的单栏外观\n*   Pisces - 双栏 Scheme，小家碧玉似的清新\n*   Gemini - 类似Pisces\n\n### 配置浏览进度\n\n在主题文件_config.yml中查找`scrollpercent`，将`false`改为`true`。\n\n### 本地搜索\n\n安装插件\n\n`npm install hexo-generator-search --save` \n\n修改 站点配置 文件:\n\n`search:\n  path: search.xml\n  field: post\n  content: true` \n\n*   path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.\n*   field - the search scope you want to search, you can chose:\n    *   post (Default) - will only covers all the posts of your blog.\n    *   page - will only covers all the pages of your blog.\n    *   all - will covers all the posts and pages of your blog.\n*   content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.\n\n> 参考：[hexo-generator-search](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwzpan%2Fhexo-generator-search)\n\n注：之前只能搜索标题，不能搜索内容，可能是与local admin冲突，去掉admin后，可以正常使用了。后面发现好像是之前post的一个文件格式有问题，加了URL 1和URL 2导致没法搜索。并不是，烦。但是已经不报错了。\n最后不清楚到底为啥，并不能搜索全文，无论修改成post还是all，都不行。最后在github上找到了一个解决方案，完美解决，感谢。\n经验证，仅仅采用第二种方案还是不行，必须要同时安装两个插件才可以。\n使用`hexo-generator-search-zip`\n\n`npm install hexo-generator-search-zip --save` \n\n配置说明：修改站点文件\n\n`search:\n  path: search.json\n  zipPath: search.zip\n  versionPath: searchVersion.txt\n  field: post` \n\n其中field有以下可选，\n* **post** (Default) - will only covers all the posts of your blog.\n* **page** - will only covers all the pages of your blog.\n* **all** - will covers all the posts and pages of your blog.\n\n> 参考：[hexo-generator-search-zip](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FSuperKieran%2Fhexo-generator-search-zip)\n\n### SiteMap插件\n\nhexo-generator-sitemap：生成易于搜索引擎搜素的网站地图\n\n`npm install hexo-generator-sitemap --save` \n\n添加配置信息：\n\n`#feed\natom:\n  type: atom\n  path: atom.xml\n  limit: 20` \n\n可以在主题配置文件中添加相关配置，可以在页面上显示。\n比如，添加链接信息\n\n`links:\n  Feed: /atom.xml\n  SiteMap: /sitemap.xml` \n\n> 参考：[手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置](https://www.jianshu.com/p/dd9ef08b12df)\n\n注：有点问题，给关了。\n\n### 设置菜单及对应页面\n\n在主题配置文件中查找menu：\n\n`menu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat` \n\n去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。\n\n ![](//upload-images.jianshu.io/upload_images/763395-a1f395b8f18e5e2b.png?imageMogr2/auto-orient/strip|imageView2/2/w/560/format/webp)\n\n Encycolorpedia\n\n新添加的菜单需要翻译对应的中文\n打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：\n\n`menu:\n  resources: 资源` \n\nhexo new page \"categories\"\n此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下\n\n`---\ntitle: 分类\ndate: 2017-12-14 13:05:38\ntype: \"categories\"\ncomments: false\n---` \n\n注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 网站图标设置\n\n图标可以从图标素材网站：iconfont、easyicon上进行下载。\n下载16x16以及32x32大小的PNG格式图标，置于/themes/next/source/images/下\n打开`themes/next/下的_config.yml`，查找favicon\n\n`favicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n  #android_manifest: /images/manifest.json\n  #ms_browserconfig: /images/browserconfig.xml` \n\n修改small和medium的路径为下载的图标路径\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 设定站点建立时间\n\n打开`themes/next/下的_config.yml`，查找since\n\n`footer:\n  # Specify the date when the site was setup.\n  # If not defined, current year will be used.\n  #since: 2019` \n\n如果不设置，默认显示当前年份。\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 修改侧栏颜色\n\n打开`\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces中的_menu.styl`文件，查找background：\n\n`.menu-item-active a {\n  background: #f9f9f9;\n  border-bottom-color: white;\n  $badges = hexo-config('menu_settings.badges');` \n\n将f9f9f9修改成自己想要的颜色，可从[encycolorpedia](https://links.jianshu.com/go?to=https%3A%2F%2Fencycolorpedia.cn%2F)上查看颜色。\n\n### 创建同名文件夹\n\n新建文章时，在相同目录下创建同名文件夹（便于图片管理）：\n打开站点配置文件_config.yml，搜索`post_asset_folder`字段，设置其值为true\n安装hexo-asset-image：\n\n`npm install hexo-asset-image --save` \n\n此时`hexo new \"fileName\"`会在`/source/_posts`目录下创建同名的文件夹\n只需在 md 文件里使用 `[图片上传失败...(image-a6bdde-1570251308276)]` ，无需路径名就可以插入图片。\n\n### 设置博客透明度\n\n在`\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_layout.styl`文件中，查找`.content`，修改background：\n\n`.content-wrap {\n  background: rgba(255, 255, 255, 0.8);` \n\nrgba中最后一个参数表示透明度。\n\n### 图片点击放大\n\n图片可点击放大查看，放大后可关闭。打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true\n进入到theme/text/文件夹下，打开`git bash。\n\n### 博客访问量统计\n\n打开主题配置文件_config.yml，查找busuanzi：\n\n`busuanzi_count:\n  enable: false\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye` \n\nfalse改为true即可。\n\n### 修改powered标识\n\n修改文末的“由 [Hexo](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2F) 强力驱动”，theme版本标志：\n\n `# If not defined, `author` from Hexo `_config.yml` will be used.\n  copyright:\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: true\n    # Version info of Hexo after Hexo link (vX.X.X).\n    version: true\ntheme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: true\n    # Version info of NexT after scheme info (vX.X.X).\n    version: true` \n\nfalse改为true即可。\n\n### 统计字数\n\n使用hexo-symbols-count-time. Symbols count and time to read of articles.Better than [`hexo-reading-time`](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fierhyna%2Fhexo-reading-time) and faster than [`hexo-worcount`](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwillin%2Fhexo-wordcount). No external dependencies.安装：\n\n`$ npm install hexo-symbols-count-time --save` \n\n在站点配置文件中添加：\n\n`symbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false` \n\n在主题配置文件中修改：\n\n`symbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: false\n  awl: 4\n  wpm: 275\n  suffix: mins.` \n\n参考：[https://github.com/theme-next/hexo-symbols-count-time](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftheme-next%2Fhexo-symbols-count-time)\n\n### 社交账号\n\nUsage: `Key: permalink || icon`\nKey is the link label showing to end users. Value before `||` delimiter is the target permalink. Value after `||` delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, globe icon will be loaded.\n\n`social:\n  GitHub: https://github.com/sunfove || github\n  E-Mail: mailto:sunfove@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype` \n### 友情链接\n\nBlog rolls：\n\n`links_settings:\n  icon: link\n  title: 友情链接\n  # Available values: block | inline\n  layout: block\nlinks:\n  我的简书: https://www.jianshu.com/u/39e329082972` \n### 评论系统\n\n评论系统采用了Valine和Leancloud结合，先在Leancloud申请账号，并创建应用\n\n ![](//upload-images.jianshu.io/upload_images/763395-aef44e197a0d3b38.png?imageMogr2/auto-orient/strip|imageView2/2/w/453/format/webp)\n\n LeanCloud中创建的应用\n\n进入应用设置，在安全中心绑定域名，然后在应用keys中读取AppID和AppKey，进入主题配置文件中，查找valine，然后按照如下形式填写ID和Key。\n\n`valine:\n  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version\n  appid:  # Your leancloud application appid\n  appkey:  # Your leancloud application appkey\n  notify: false # Mail notifier. See: https://github.com/xCss/Valine/wiki\n  verify: false # Verification code\n  placeholder: 说两句吧 # Comment box placeholder\n  avatar: monsterid # Gravatar style\n  guest_info: nick,mail,link # Custom comment header\n  pageSize: 10 # Pagination size\n  language: # Language, available values: en, zh-cn\n  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html\n  comment_count: true # If false, comment count will only be displayed in post page, not in home page\n  #post_meta_order: 0` \n\n其中Valine 的 avatar 参数用来设置评论头像，avatar 参数可选值如下:\n\n ![](//upload-images.jianshu.io/upload_images/763395-f10b60840dbdb5a2.png?imageMogr2/auto-orient/strip|imageView2/2/w/666/format/webp)\n\n 不同的avatar样式\n\n### 匿名聊天\n\n按照网上的说明配置Daovoice一直出现问题，后来使用了chatra，十天试用期，之后又尝试了tidio，以下是tidio配置说明。\n\n`tidio:\n  enable: true\n  key:  # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer` \n\nid通过在tidio官网注册账号，然后输入中developer中找到public key，输入即可。但是加载速度似乎特别慢，可能因为服务器在国外的缘故。\n\n### 打赏功能\n\n添加打赏。在主题文件中查找reward：\n\n `reward_settings:\n  # If true, reward would be displayed in every article by default.\n  # You can show or hide reward in a specific article throuth `reward: true | false` in Front-matter.\n  enable: true\n  animation: true\n  #comment: Donate comment here.\n\nreward:\n  #wechatpay: /images/wechatpay.png\n  #alipay: /images/alipay.png\n  #bitcoin: /images/bitcoin.png` \n### 百度SEO\n\n在主题配置工具中，查找baidu_push并更改为true：\n\n`# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.\nbaidu_push: true` \n### 百度统计\n\n在[百度统计](https://links.jianshu.com/go?to=https%3A%2F%2Fmtj.baidu.com%2Fweb%2Fwelcome%2Flogin)中注册账号并获取app_id，然后在主题配置文件中查找Baidu Analytics，粘贴到对应位置。\n\n`# Baidu Analytics\nbaidu_analytics:  # <app_id>` \n### 文章置顶\n\n在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。\n修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。\n需添加的代码：\n\n`posts.data = posts.data.sort(function(a, b) {\n    if(a.top && b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top && b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});` \n\n修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。\n以下是最终的generator.js内容\n\n`'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) {\n            if(a.top == b.top) return b.date - a.date;\n            else return b.top - a.top;\n        }\n        else if(a.top && !b.top) {\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date;\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};` \n\n设置置顶标志\n打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<div class=\"post-meta\">标签下，插入如下代码：\n\n `{% if post.top %}\n            <i class=\"fa fa-thumb-tack\"></i>\n            <font color=7D26CD>置顶</font>\n            <span class=\"post-meta-divider\">|</span>\n          {% endif %}` \n\n我没有修改color而是修改了font size = 2，使得和其他字体大小统一。\n\n作者：sunfove\n转载链接：https://www.jianshu.com/p/b9f96b992b68","source":"_posts/Hexo搭建个人博客.md","raw":"title: Hexo搭建个人博客\nauthor: 知识铺\ntags:\n  - hexo\n  - 个人博客\ncategories:\n  - hexo\ndate: 2019-11-03 12:56:00\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n## Hexo\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\nhexo官网： [http://hexo.io](https://links.jianshu.com/go?to=http%3A%2F%2Fhexo.io)\ngithub: [https://github.com/hexojs/hexo](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo)\n\n### hexo优势\n\n由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。\nhexo具有以下特点：\n\n> *   超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染\n> *   支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件\n> *   一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n> *   丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript\n\n### 安装hexo\n\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n*   [Node.js](https://links.jianshu.com/go?to=http%3A%2F%2Fnodejs.org%2F) (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)\n*   [Git](https://links.jianshu.com/go?to=http%3A%2F%2Fgit-scm.com%2F)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`npm install hexo-cli -g\nhexo init \nnpm install\nhexo s` \n\n如果您的电脑中尚未安装所需要的程序，请根据hexo官网安装指示完成安装:[https://hexo.io/zh-cn/docs/](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2F)。\n\n### hexo指令\n\n配置好之后，hexo就可以使用了，常用的hexo命令可访问[hexo指令](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2Fcommands.html)。\n\n`hexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本` \n\n缩写形式：\n\n`hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy` \n\n组合命令\n\n`hexo s -g #生成并本地预览\nhexo d -g #生成并上传` \n## Github\n\nGitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。\n\n### Github简介\n\n作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。\n\n如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份[复制](https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25A4%258D%25E5%2588%25B6)出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。\n\n### 清空Github仓库内容\n\n如果想要清空github仓库中的内容，可以先创建分支，然后清空本地master中的文件，保留.git和readme.md，清空后git到远程仓库中，可参考[Github清空远程仓库](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fsinat_34937826%2Farticle%2Fdetails%2F90512474)\n。\n\n### 配置SSH key\n\n为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。\n\n`$ cd ~/. ssh #检查本机已存在的ssh密钥` \n\n如果提示：No such file or directory 说明你是第一次使用git。\n\n`ssh-keygen -t rsa -C \"邮件地址\"` \n\n然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 `.ssh\\id_rsa.pub` 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -> SSH and GPG keys -> New SSH key：\n\n ![](//upload-images.jianshu.io/upload_images/763395-3393bb77d5fa0b4a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1035/format/webp)\n\n 配置SSH key\n\n测试是否成功`ssh -T git@github.com # 注意邮箱地址不用改` \n\n看到如下提示，说明配置成功。\n\n> You've successfully authenticated, but GitHub does not provide shell access.\n\n此时你还需要配置：\n\n`$ git config --global user.name \"liuxianan\"// 你的github用户名，非昵称\n$ git config --global user.email  \"xxx@qq.com\"// 填写你的github注册邮箱` \n\n> 参考：[使用hexo+github搭建免费个人博客详细教程](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fliuxianan%2Fp%2Fbuild-blog-website-by-hexo-github.html)\n\n### Deploy到github中\n\n修改站点配置文件(_config.yml)，修改 depoly ：\n\n`deploy:\n  type: git \n  repo: git@github.com:username/username.github.io.git //替换成自己的邮箱\n  branch: master` \n\n如果不行，安装插件：\n\n`npm install hexo-deployer-git --save` \n### 修改主题\n\nhexo的主题非常之多，可以从官网的[主题](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fthemes%2F)中自由选择。这里以next主题为例。\n主题的下载可以通过git到hexo/theme或者直接download zip然后解压到hexo/theme文件夹。\n在站点配置文件(_config.yml)中查找theme，\n\n ![](//upload-images.jianshu.io/upload_images/763395-b94f5483f3aa35cf.png?imageMogr2/auto-orient/strip|imageView2/2/w/342/format/webp)\n\n 修改主题\n\n然后将landscape修改为next或者hexo-theme-next，具体以theme中文件夹名称为主。\n`hexo d -g`后`hexo s`并刷新网页，可以看到主题已经更换成了next。\n## Next主题修改\n\n### 语言修改\n\n在站点文件_config.yml中查找language并将en修改为简体中文（zh-CN）：\n\n`title: 明明如月\nsubtitle:\ndescription:\nkeywords:\nauthor: sunfove\nlanguage: zh-CN //语言名称要写对\ntimezone:` \n\n注意更改的语言名称要写对，具体查看主题文件夹下的language文件夹中的名称。\n\n### 新建带日期格式的博文\n\n使用hexo new post “博文名称”生成的博文以博文名称生成文件，当文件太多时不便于管理查看，生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博文。\n在站点文件_config.yml中设置博客生成名称:\n\n`# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts` \n\n重新执行hexo new post “博文名称”命令，就可以生成yyyy-MM-dd-博文名称.md类型的名称了。\n\n### 侧栏头像\n\n在主题文件_config.yml中搜索：\n\n`avatar:\n  # In theme directory (source/images): /images/avatar.gif\n  # In site directory (source/uploads): /uploads/avatar.gif\n  # You can also use other linking images.\n  url: #/images/avatar.gif\n  # If true, the avatar would be dispalyed in circle.\n  rounded: false\n  # If true, the avatar would be rotated with the cursor.\n  rotated: false` \n\n在`url`处添加头像路径，本地图片放到主题文件夹下的`source/image`中，`rounded`为是否用圆形头像， `rotated`为是否旋转头像。\n\n### 添加标签和分类\n\n添加一个 分类 页面，并在菜单中显示页面链接。\n新建一个页面，命名为 categories 。命令如下：\n\n `hexo new page categories` \n\n编辑刚新建的页面，将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类。\n\n `title: 分类\n date: 2014-12-22 12:39:04\n type: \"categories\"\n ---` \n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 `comments`并将值设置为 `false`，如：\n\n `title: 分类\n date: 2014-12-22 12:39:04\n type: \"categories\"\n comments: false\n ---` \n\n在菜单中添加链接。编辑主题的_config.yml ，将 menu 中的 `categories: /categories`注释去掉，如下:\n\n `menu:\n   home: /\n   categories: /categories\n   archives: /archives\n   tags: /tags` \n\n添加标签和这个操作类似，将categories换成tags即可。\n\n> 参考：[创建分类界面](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fiissnan%2Fhexo-theme-next%2Fwiki%2F%25E5%2588%259B%25E5%25BB%25BA%25E5%2588%2586%25E7%25B1%25BB%25E9%25A1%25B5%25E9%259D%25A2)\n\n### 对文章进行加密\n\n打开`hemes\\hexo-theme-next\\layout\\_partials\\head\\head.swig`，在文件的开头位置找到如下代码\n\n`<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"{{ theme.android_chrome_color }}\">` \n\n在上边代码的末尾添加如下代码：\n\n`<script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入文章密码') !== '{{ page.password }}'){\n                alert('密码错误！');\n        if (history.length === 1) {\n            window.opener = null;\n            window.open('', '_self');\n            window.close();\n                } else {\n                    history.back();\n                }\n            }\n        }\n    })();\n</script>` \n\n添加完脚本代码，接下来在想要加密的文章的文件头加上`password` 属性就行了，如下：\n\n`---\ntitle: XXX\ndate: XXX\ntags:\n  - XXX\ncategories:\n  - XXX\npassword: 123\n---` \n\n这样在打开这篇文章时只有输入了123这个密码才可以打开成功。\n\n> 参考：[NexT主题个性化 - 对文章进行加密](https://links.jianshu.com/go?to=https%3A%2F%2Flewky.cn%2Fposts%2F15308.html)\n\n### Hexo admin编辑博客\n\n如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。\n这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。\n需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。\n安装过程：\n\n`npm install --save hexo-admin` \n\n在 hexo-admin 你可以\n\n*   Pages - 新加 page；\n*   Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；\n*   Settings - 一些配置；\n*   Deploy - 可以直接部署到 github。\n\n     ![](//upload-images.jianshu.io/upload_images/763395-73f5a0651ed10df0.png?imageMogr2/auto-orient/strip|imageView2/2/w/684/format/webp)\n\n     hexo admin\n\n> 参考：[hexo-admin安装使用](https://links.jianshu.com/go?to=https%3A%2F%2Falbenw.github.io%2Fposts%2F4ffa5bc6%2F)\n\n注：按照这个方案配置hexo-admin后，会出现如下警告，但不太影响使用。\n\n`hexo s -g\n(node:12084) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.` \n\n配置完成后，可以进行认证，详见：[【hexo】安装并配置admin插件](https://links.jianshu.com/go?to=http%3A%2F%2Fwww.pianshen.com%2Farticle%2F1382194525%2F)。\n这样登录admin就需要账号密码验证。\n\n hexo admin认证\n\n### 阅读全文\n\n推荐使用`< !--more-->` 进行手动截断，网上有很多教程自动截断，但文中包含中文和一些特殊符号的时候，判断可能会失效。自动截断教程可参考：[Hexo-设置阅读全文](https://www.jianshu.com/p/78c218f9d1e7)。\n\n### 修改标签样式\n\n修改模板 `\\themes\\hexo-theme-next\\layout\\_macro/post.swig`，搜索 `{%- set tag_indicate = '#' %}`，将 `#`换成`<i class=\"fa fa-tag\"></i>`\n\n### 修改布局模板\n\nlayout 布局模板放在 `scaffolds/`目录下，文件名称就是layout 名称。每次新建时，Hexo 会尝试在 scaffolds 文件夹中寻找同名文件，并根据其内容建立文章。所以可以在这里添加自己的 layout，作为常用的新建模板使用。同时你也可以编辑现有的 layout，比如 post 的 layout 默认是 `scaffolds\\post.md`。\n\n这里有一份文章配置信息，可以根据情况修改后作为模板复用，或直接在保存文章的路径新建.md文件中使用：\n\n`---\ntitle:   #文章名\ndate:   #发表日期\nupdated:   #更新日期\ncategories:   #文章分类\ntags:   #文章标签，多标签时使用英文逗号隔开\nphotos:  #如果使用Fancybox（文章头部展示图片），如此设置\n- URL1\n- URL2\n---` \n\n> 参考：[Hexo 使用指导](https://www.jianshu.com/p/3a8dba06856a)\n\n### 切换主题风格\n\n在主题文件_config.yml中查找`schemes`\n\n`# Schemes\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini` \n\n4种风格大同小异，你们可以选择自己喜欢的风格。\n\n*   Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n*   Mist - Muse 的紧凑版本，整洁有序的单栏外观\n*   Pisces - 双栏 Scheme，小家碧玉似的清新\n*   Gemini - 类似Pisces\n\n### 配置浏览进度\n\n在主题文件_config.yml中查找`scrollpercent`，将`false`改为`true`。\n\n### 本地搜索\n\n安装插件\n\n`npm install hexo-generator-search --save` \n\n修改 站点配置 文件:\n\n`search:\n  path: search.xml\n  field: post\n  content: true` \n\n*   path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.\n*   field - the search scope you want to search, you can chose:\n    *   post (Default) - will only covers all the posts of your blog.\n    *   page - will only covers all the pages of your blog.\n    *   all - will covers all the posts and pages of your blog.\n*   content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.\n\n> 参考：[hexo-generator-search](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwzpan%2Fhexo-generator-search)\n\n注：之前只能搜索标题，不能搜索内容，可能是与local admin冲突，去掉admin后，可以正常使用了。后面发现好像是之前post的一个文件格式有问题，加了URL 1和URL 2导致没法搜索。并不是，烦。但是已经不报错了。\n最后不清楚到底为啥，并不能搜索全文，无论修改成post还是all，都不行。最后在github上找到了一个解决方案，完美解决，感谢。\n经验证，仅仅采用第二种方案还是不行，必须要同时安装两个插件才可以。\n使用`hexo-generator-search-zip`\n\n`npm install hexo-generator-search-zip --save` \n\n配置说明：修改站点文件\n\n`search:\n  path: search.json\n  zipPath: search.zip\n  versionPath: searchVersion.txt\n  field: post` \n\n其中field有以下可选，\n* **post** (Default) - will only covers all the posts of your blog.\n* **page** - will only covers all the pages of your blog.\n* **all** - will covers all the posts and pages of your blog.\n\n> 参考：[hexo-generator-search-zip](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FSuperKieran%2Fhexo-generator-search-zip)\n\n### SiteMap插件\n\nhexo-generator-sitemap：生成易于搜索引擎搜素的网站地图\n\n`npm install hexo-generator-sitemap --save` \n\n添加配置信息：\n\n`#feed\natom:\n  type: atom\n  path: atom.xml\n  limit: 20` \n\n可以在主题配置文件中添加相关配置，可以在页面上显示。\n比如，添加链接信息\n\n`links:\n  Feed: /atom.xml\n  SiteMap: /sitemap.xml` \n\n> 参考：[手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置](https://www.jianshu.com/p/dd9ef08b12df)\n\n注：有点问题，给关了。\n\n### 设置菜单及对应页面\n\n在主题配置文件中查找menu：\n\n`menu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat` \n\n去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。\n\n ![](//upload-images.jianshu.io/upload_images/763395-a1f395b8f18e5e2b.png?imageMogr2/auto-orient/strip|imageView2/2/w/560/format/webp)\n\n Encycolorpedia\n\n新添加的菜单需要翻译对应的中文\n打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：\n\n`menu:\n  resources: 资源` \n\nhexo new page \"categories\"\n此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下\n\n`---\ntitle: 分类\ndate: 2017-12-14 13:05:38\ntype: \"categories\"\ncomments: false\n---` \n\n注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 网站图标设置\n\n图标可以从图标素材网站：iconfont、easyicon上进行下载。\n下载16x16以及32x32大小的PNG格式图标，置于/themes/next/source/images/下\n打开`themes/next/下的_config.yml`，查找favicon\n\n`favicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n  #android_manifest: /images/manifest.json\n  #ms_browserconfig: /images/browserconfig.xml` \n\n修改small和medium的路径为下载的图标路径\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 设定站点建立时间\n\n打开`themes/next/下的_config.yml`，查找since\n\n`footer:\n  # Specify the date when the site was setup.\n  # If not defined, current year will be used.\n  #since: 2019` \n\n如果不设置，默认显示当前年份。\n\n> 参考：[Hexo框架下用NexT(v7.0+)主题美化博客](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373)\n\n### 修改侧栏颜色\n\n打开`\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces中的_menu.styl`文件，查找background：\n\n`.menu-item-active a {\n  background: #f9f9f9;\n  border-bottom-color: white;\n  $badges = hexo-config('menu_settings.badges');` \n\n将f9f9f9修改成自己想要的颜色，可从[encycolorpedia](https://links.jianshu.com/go?to=https%3A%2F%2Fencycolorpedia.cn%2F)上查看颜色。\n\n### 创建同名文件夹\n\n新建文章时，在相同目录下创建同名文件夹（便于图片管理）：\n打开站点配置文件_config.yml，搜索`post_asset_folder`字段，设置其值为true\n安装hexo-asset-image：\n\n`npm install hexo-asset-image --save` \n\n此时`hexo new \"fileName\"`会在`/source/_posts`目录下创建同名的文件夹\n只需在 md 文件里使用 `[图片上传失败...(image-a6bdde-1570251308276)]` ，无需路径名就可以插入图片。\n\n### 设置博客透明度\n\n在`\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_layout.styl`文件中，查找`.content`，修改background：\n\n`.content-wrap {\n  background: rgba(255, 255, 255, 0.8);` \n\nrgba中最后一个参数表示透明度。\n\n### 图片点击放大\n\n图片可点击放大查看，放大后可关闭。打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true\n进入到theme/text/文件夹下，打开`git bash。\n\n### 博客访问量统计\n\n打开主题配置文件_config.yml，查找busuanzi：\n\n`busuanzi_count:\n  enable: false\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye` \n\nfalse改为true即可。\n\n### 修改powered标识\n\n修改文末的“由 [Hexo](https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2F) 强力驱动”，theme版本标志：\n\n `# If not defined, `author` from Hexo `_config.yml` will be used.\n  copyright:\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: true\n    # Version info of Hexo after Hexo link (vX.X.X).\n    version: true\ntheme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: true\n    # Version info of NexT after scheme info (vX.X.X).\n    version: true` \n\nfalse改为true即可。\n\n### 统计字数\n\n使用hexo-symbols-count-time. Symbols count and time to read of articles.Better than [`hexo-reading-time`](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fierhyna%2Fhexo-reading-time) and faster than [`hexo-worcount`](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwillin%2Fhexo-wordcount). No external dependencies.安装：\n\n`$ npm install hexo-symbols-count-time --save` \n\n在站点配置文件中添加：\n\n`symbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false` \n\n在主题配置文件中修改：\n\n`symbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: false\n  awl: 4\n  wpm: 275\n  suffix: mins.` \n\n参考：[https://github.com/theme-next/hexo-symbols-count-time](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftheme-next%2Fhexo-symbols-count-time)\n\n### 社交账号\n\nUsage: `Key: permalink || icon`\nKey is the link label showing to end users. Value before `||` delimiter is the target permalink. Value after `||` delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, globe icon will be loaded.\n\n`social:\n  GitHub: https://github.com/sunfove || github\n  E-Mail: mailto:sunfove@gmail.com || envelope\n  #Weibo: https://weibo.com/yourname || weibo\n  #Google: https://plus.google.com/yourname || google\n  #Twitter: https://twitter.com/yourname || twitter\n  #FB Page: https://www.facebook.com/yourname || facebook\n  #VK Group: https://vk.com/yourname || vk\n  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow\n  #YouTube: https://youtube.com/yourname || youtube\n  #Instagram: https://instagram.com/yourname || instagram\n  #Skype: skype:yourname?call|chat || skype` \n### 友情链接\n\nBlog rolls：\n\n`links_settings:\n  icon: link\n  title: 友情链接\n  # Available values: block | inline\n  layout: block\nlinks:\n  我的简书: https://www.jianshu.com/u/39e329082972` \n### 评论系统\n\n评论系统采用了Valine和Leancloud结合，先在Leancloud申请账号，并创建应用\n\n ![](//upload-images.jianshu.io/upload_images/763395-aef44e197a0d3b38.png?imageMogr2/auto-orient/strip|imageView2/2/w/453/format/webp)\n\n LeanCloud中创建的应用\n\n进入应用设置，在安全中心绑定域名，然后在应用keys中读取AppID和AppKey，进入主题配置文件中，查找valine，然后按照如下形式填写ID和Key。\n\n`valine:\n  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version\n  appid:  # Your leancloud application appid\n  appkey:  # Your leancloud application appkey\n  notify: false # Mail notifier. See: https://github.com/xCss/Valine/wiki\n  verify: false # Verification code\n  placeholder: 说两句吧 # Comment box placeholder\n  avatar: monsterid # Gravatar style\n  guest_info: nick,mail,link # Custom comment header\n  pageSize: 10 # Pagination size\n  language: # Language, available values: en, zh-cn\n  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html\n  comment_count: true # If false, comment count will only be displayed in post page, not in home page\n  #post_meta_order: 0` \n\n其中Valine 的 avatar 参数用来设置评论头像，avatar 参数可选值如下:\n\n ![](//upload-images.jianshu.io/upload_images/763395-f10b60840dbdb5a2.png?imageMogr2/auto-orient/strip|imageView2/2/w/666/format/webp)\n\n 不同的avatar样式\n\n### 匿名聊天\n\n按照网上的说明配置Daovoice一直出现问题，后来使用了chatra，十天试用期，之后又尝试了tidio，以下是tidio配置说明。\n\n`tidio:\n  enable: true\n  key:  # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer` \n\nid通过在tidio官网注册账号，然后输入中developer中找到public key，输入即可。但是加载速度似乎特别慢，可能因为服务器在国外的缘故。\n\n### 打赏功能\n\n添加打赏。在主题文件中查找reward：\n\n `reward_settings:\n  # If true, reward would be displayed in every article by default.\n  # You can show or hide reward in a specific article throuth `reward: true | false` in Front-matter.\n  enable: true\n  animation: true\n  #comment: Donate comment here.\n\nreward:\n  #wechatpay: /images/wechatpay.png\n  #alipay: /images/alipay.png\n  #bitcoin: /images/bitcoin.png` \n### 百度SEO\n\n在主题配置工具中，查找baidu_push并更改为true：\n\n`# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.\nbaidu_push: true` \n### 百度统计\n\n在[百度统计](https://links.jianshu.com/go?to=https%3A%2F%2Fmtj.baidu.com%2Fweb%2Fwelcome%2Flogin)中注册账号并获取app_id，然后在主题配置文件中查找Baidu Analytics，粘贴到对应位置。\n\n`# Baidu Analytics\nbaidu_analytics:  # <app_id>` \n### 文章置顶\n\n在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。\n修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。\n需添加的代码：\n\n`posts.data = posts.data.sort(function(a, b) {\n    if(a.top && b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top && b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});` \n\n修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。\n以下是最终的generator.js内容\n\n`'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) {\n            if(a.top == b.top) return b.date - a.date;\n            else return b.top - a.top;\n        }\n        else if(a.top && !b.top) {\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date;\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};` \n\n设置置顶标志\n打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<div class=\"post-meta\">标签下，插入如下代码：\n\n `{% if post.top %}\n            <i class=\"fa fa-thumb-tack\"></i>\n            <font color=7D26CD>置顶</font>\n            <span class=\"post-meta-divider\">|</span>\n          {% endif %}` \n\n我没有修改color而是修改了font size = 2，使得和其他字体大小统一。\n\n作者：sunfove\n转载链接：https://www.jianshu.com/p/b9f96b992b68","slug":"Hexo搭建个人博客","published":1,"updated":"2019-11-03T08:59:53.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgh60005okdmtgytk69m","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>hexo官网： <a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fhexo.io\" target=\"_blank\" rel=\"noopener\">http://hexo.io</a><br>github: <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo</a></p>\n<h3 id=\"hexo优势\"><a href=\"#hexo优势\" class=\"headerlink\" title=\"hexo优势\"></a>hexo优势</h3><p>由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。<br>hexo具有以下特点：</p>\n<blockquote>\n<ul>\n<li>超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染</li>\n<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件</li>\n<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>\n<li>丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript</li>\n</ul>\n</blockquote>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fnodejs.org%2F\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li>\n<li><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fgit-scm.com%2F\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>npm install hexo-cli -g\nhexo init \nnpm install\nhexo s</code> </p>\n<p>如果您的电脑中尚未安装所需要的程序，请根据hexo官网安装指示完成安装:<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2F\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a>。</p>\n<h3 id=\"hexo指令\"><a href=\"#hexo指令\" class=\"headerlink\" title=\"hexo指令\"></a>hexo指令</h3><p>配置好之后，hexo就可以使用了，常用的hexo命令可访问<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2Fcommands.html\" target=\"_blank\" rel=\"noopener\">hexo指令</a>。</p>\n<p><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本</code> </p>\n<p>缩写形式：</p>\n<p><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy</code> </p>\n<p>组合命令</p>\n<p><code>hexo s -g #生成并本地预览\nhexo d -g #生成并上传</code> </p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p>\n<h3 id=\"Github简介\"><a href=\"#Github简介\" class=\"headerlink\" title=\"Github简介\"></a>Github简介</h3><p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。</p>\n<p>如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25A4%258D%25E5%2588%25B6\" target=\"_blank\" rel=\"noopener\">复制</a>出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。</p>\n<h3 id=\"清空Github仓库内容\"><a href=\"#清空Github仓库内容\" class=\"headerlink\" title=\"清空Github仓库内容\"></a>清空Github仓库内容</h3><p>如果想要清空github仓库中的内容，可以先创建分支，然后清空本地master中的文件，保留.git和readme.md，清空后git到远程仓库中，可参考<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fsinat_34937826%2Farticle%2Fdetails%2F90512474\" target=\"_blank\" rel=\"noopener\">Github清空远程仓库</a><br>。</p>\n<h3 id=\"配置SSH-key\"><a href=\"#配置SSH-key\" class=\"headerlink\" title=\"配置SSH key\"></a>配置SSH key</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>\n<p><code>$ cd ~/. ssh #检查本机已存在的ssh密钥</code> </p>\n<p>如果提示：No such file or directory 说明你是第一次使用git。</p>\n<p><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code> </p>\n<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 <code>.ssh\\id_rsa.pub</code> 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-3393bb77d5fa0b4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1035/format/webp\" alt></p>\n<p> 配置SSH key</p>\n<p>测试是否成功<code>ssh -T git@github.com # 注意邮箱地址不用改</code> </p>\n<p>看到如下提示，说明配置成功。</p>\n<blockquote>\n<p>You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>此时你还需要配置：</p>\n<p><code>$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称\n$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</code> </p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fliuxianan%2Fp%2Fbuild-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n</blockquote>\n<h3 id=\"Deploy到github中\"><a href=\"#Deploy到github中\" class=\"headerlink\" title=\"Deploy到github中\"></a>Deploy到github中</h3><p>修改站点配置文件(_config.yml)，修改 depoly ：</p>\n<p><code>deploy:\n  type: git \n  repo: git@github.com:username/username.github.io.git //替换成自己的邮箱\n  branch: master</code> </p>\n<p>如果不行，安装插件：</p>\n<p><code>npm install hexo-deployer-git --save</code> </p>\n<h3 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h3><p>hexo的主题非常之多，可以从官网的<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fthemes%2F\" target=\"_blank\" rel=\"noopener\">主题</a>中自由选择。这里以next主题为例。<br>主题的下载可以通过git到hexo/theme或者直接download zip然后解压到hexo/theme文件夹。<br>在站点配置文件(_config.yml)中查找theme，</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-b94f5483f3aa35cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/342/format/webp\" alt></p>\n<p> 修改主题</p>\n<p>然后将landscape修改为next或者hexo-theme-next，具体以theme中文件夹名称为主。<br><code>hexo d -g</code>后<code>hexo s</code>并刷新网页，可以看到主题已经更换成了next。</p>\n<h2 id=\"Next主题修改\"><a href=\"#Next主题修改\" class=\"headerlink\" title=\"Next主题修改\"></a>Next主题修改</h2><h3 id=\"语言修改\"><a href=\"#语言修改\" class=\"headerlink\" title=\"语言修改\"></a>语言修改</h3><p>在站点文件_config.yml中查找language并将en修改为简体中文（zh-CN）：</p>\n<p><code>title: 明明如月\nsubtitle:\ndescription:\nkeywords:\nauthor: sunfove\nlanguage: zh-CN //语言名称要写对\ntimezone:</code> </p>\n<p>注意更改的语言名称要写对，具体查看主题文件夹下的language文件夹中的名称。</p>\n<h3 id=\"新建带日期格式的博文\"><a href=\"#新建带日期格式的博文\" class=\"headerlink\" title=\"新建带日期格式的博文\"></a>新建带日期格式的博文</h3><p>使用hexo new post “博文名称”生成的博文以博文名称生成文件，当文件太多时不便于管理查看，生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博文。<br>在站点文件_config.yml中设置博客生成名称:</p>\n<p><code># Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts</code> </p>\n<p>重新执行hexo new post “博文名称”命令，就可以生成yyyy-MM-dd-博文名称.md类型的名称了。</p>\n<h3 id=\"侧栏头像\"><a href=\"#侧栏头像\" class=\"headerlink\" title=\"侧栏头像\"></a>侧栏头像</h3><p>在主题文件_config.yml中搜索：</p>\n<p>`avatar:</p>\n<h1 id=\"In-theme-directory-source-images-images-avatar-gif\"><a href=\"#In-theme-directory-source-images-images-avatar-gif\" class=\"headerlink\" title=\"In theme directory (source/images): /images/avatar.gif\"></a>In theme directory (source/images): /images/avatar.gif</h1><h1 id=\"In-site-directory-source-uploads-uploads-avatar-gif\"><a href=\"#In-site-directory-source-uploads-uploads-avatar-gif\" class=\"headerlink\" title=\"In site directory (source/uploads): /uploads/avatar.gif\"></a>In site directory (source/uploads): /uploads/avatar.gif</h1><h1 id=\"You-can-also-use-other-linking-images\"><a href=\"#You-can-also-use-other-linking-images\" class=\"headerlink\" title=\"You can also use other linking images.\"></a>You can also use other linking images.</h1><p>  url: #/images/avatar.gif</p>\n<h1 id=\"If-true-the-avatar-would-be-dispalyed-in-circle\"><a href=\"#If-true-the-avatar-would-be-dispalyed-in-circle\" class=\"headerlink\" title=\"If true, the avatar would be dispalyed in circle.\"></a>If true, the avatar would be dispalyed in circle.</h1><p>  rounded: false</p>\n<h1 id=\"If-true-the-avatar-would-be-rotated-with-the-cursor\"><a href=\"#If-true-the-avatar-would-be-rotated-with-the-cursor\" class=\"headerlink\" title=\"If true, the avatar would be rotated with the cursor.\"></a>If true, the avatar would be rotated with the cursor.</h1><p>  rotated: false` </p>\n<p>在<code>url</code>处添加头像路径，本地图片放到主题文件夹下的<code>source/image</code>中，<code>rounded</code>为是否用圆形头像， <code>rotated</code>为是否旋转头像。</p>\n<h3 id=\"添加标签和分类\"><a href=\"#添加标签和分类\" class=\"headerlink\" title=\"添加标签和分类\"></a>添加标签和分类</h3><p>添加一个 分类 页面，并在菜单中显示页面链接。<br>新建一个页面，命名为 categories 。命令如下：</p>\n<p> <code>hexo new page categories</code> </p>\n<p>编辑刚新建的页面，将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类。</p>\n<p> <code>title: 分类\n date: 2014-12-22 12:39:04\n type: &quot;categories&quot;\n ---</code> </p>\n<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 <code>comments</code>并将值设置为 <code>false</code>，如：</p>\n<p> <code>title: 分类\n date: 2014-12-22 12:39:04\n type: &quot;categories&quot;\n comments: false\n ---</code> </p>\n<p>在菜单中添加链接。编辑主题的_config.yml ，将 menu 中的 <code>categories: /categories</code>注释去掉，如下:</p>\n<p> <code>menu:\n   home: /\n   categories: /categories\n   archives: /archives\n   tags: /tags</code> </p>\n<p>添加标签和这个操作类似，将categories换成tags即可。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fiissnan%2Fhexo-theme-next%2Fwiki%2F%25E5%2588%259B%25E5%25BB%25BA%25E5%2588%2586%25E7%25B1%25BB%25E9%25A1%25B5%25E9%259D%25A2\" target=\"_blank\" rel=\"noopener\">创建分类界面</a></p>\n</blockquote>\n<h3 id=\"对文章进行加密\"><a href=\"#对文章进行加密\" class=\"headerlink\" title=\"对文章进行加密\"></a>对文章进行加密</h3><p>打开<code>hemes\\hexo-theme-next\\layout\\_partials\\head\\head.swig</code>，在文件的开头位置找到如下代码</p>\n<p>`<meta charset=\"UTF-8\"></p>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content>` \n\n<p>在上边代码的末尾添加如下代码：</p>\n<p><code>&lt;script&gt;\n    (function(){\n        if(&#39;&#39;){\n            if (prompt(&#39;请输入文章密码&#39;) !== &#39;&#39;){\n                alert(&#39;密码错误！&#39;);\n        if (history.length === 1) {\n            window.opener = null;\n            window.open(&#39;&#39;, &#39;_self&#39;);\n            window.close();\n                } else {\n                    history.back();\n                }\n            }\n        }\n    })();\n&lt;/script&gt;</code> </p>\n<p>添加完脚本代码，接下来在想要加密的文章的文件头加上<code>password</code> 属性就行了，如下：</p>\n<p>`—<br>title: XXX<br>date: XXX<br>tags:</p>\n<ul>\n<li>XXX<br>categories:</li>\n<li>XXX<br>password: 123<br>—` </li>\n</ul>\n<p>这样在打开这篇文章时只有输入了123这个密码才可以打开成功。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flewky.cn%2Fposts%2F15308.html\" target=\"_blank\" rel=\"noopener\">NexT主题个性化 - 对文章进行加密</a></p>\n</blockquote>\n<h3 id=\"Hexo-admin编辑博客\"><a href=\"#Hexo-admin编辑博客\" class=\"headerlink\" title=\"Hexo admin编辑博客\"></a>Hexo admin编辑博客</h3><p>如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。<br>这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。<br>需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。<br>安装过程：</p>\n<p><code>npm install --save hexo-admin</code> </p>\n<p>在 hexo-admin 你可以</p>\n<ul>\n<li><p>Pages - 新加 page；</p>\n</li>\n<li><p>Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；</p>\n</li>\n<li><p>Settings - 一些配置；</p>\n</li>\n<li><p>Deploy - 可以直接部署到 github。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-73f5a0651ed10df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684/format/webp\" alt></p>\n<p> hexo admin</p>\n</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Falbenw.github.io%2Fposts%2F4ffa5bc6%2F\" target=\"_blank\" rel=\"noopener\">hexo-admin安装使用</a></p>\n</blockquote>\n<p>注：按照这个方案配置hexo-admin后，会出现如下警告，但不太影响使用。</p>\n<p><code>hexo s -g\n(node:12084) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code> </p>\n<p>配置完成后，可以进行认证，详见：<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fwww.pianshen.com%2Farticle%2F1382194525%2F\" target=\"_blank\" rel=\"noopener\">【hexo】安装并配置admin插件</a>。<br>这样登录admin就需要账号密码验证。</p>\n<p> hexo admin认证</p>\n<h3 id=\"阅读全文\"><a href=\"#阅读全文\" class=\"headerlink\" title=\"阅读全文\"></a>阅读全文</h3><p>推荐使用<code>&lt; !--more--&gt;</code> 进行手动截断，网上有很多教程自动截断，但文中包含中文和一些特殊符号的时候，判断可能会失效。自动截断教程可参考：<a href=\"https://www.jianshu.com/p/78c218f9d1e7\" target=\"_blank\" rel=\"noopener\">Hexo-设置阅读全文</a>。</p>\n<h3 id=\"修改标签样式\"><a href=\"#修改标签样式\" class=\"headerlink\" title=\"修改标签样式\"></a>修改标签样式</h3><p>修改模板 <code>\\themes\\hexo-theme-next\\layout\\_macro/post.swig</code>，搜索 <code></code>，将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h3 id=\"修改布局模板\"><a href=\"#修改布局模板\" class=\"headerlink\" title=\"修改布局模板\"></a>修改布局模板</h3><p>layout 布局模板放在 <code>scaffolds/</code>目录下，文件名称就是layout 名称。每次新建时，Hexo 会尝试在 scaffolds 文件夹中寻找同名文件，并根据其内容建立文章。所以可以在这里添加自己的 layout，作为常用的新建模板使用。同时你也可以编辑现有的 layout，比如 post 的 layout 默认是 <code>scaffolds\\post.md</code>。</p>\n<p>这里有一份文章配置信息，可以根据情况修改后作为模板复用，或直接在保存文章的路径新建.md文件中使用：</p>\n<p>`—<br>title:   #文章名<br>date:   #发表日期<br>updated:   #更新日期<br>categories:   #文章分类<br>tags:   #文章标签，多标签时使用英文逗号隔开<br>photos:  #如果使用Fancybox（文章头部展示图片），如此设置</p>\n<ul>\n<li>URL1</li>\n<li>URL2</li>\n<li>–` </li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/3a8dba06856a\" target=\"_blank\" rel=\"noopener\">Hexo 使用指导</a></p>\n</blockquote>\n<h3 id=\"切换主题风格\"><a href=\"#切换主题风格\" class=\"headerlink\" title=\"切换主题风格\"></a>切换主题风格</h3><p>在主题文件_config.yml中查找<code>schemes</code></p>\n<p>`# Schemes<br>scheme: Muse</p>\n<p>#scheme: Mist</p>\n<p>#scheme: Pisces</p>\n<p>#scheme: Gemini` </p>\n<p>4种风格大同小异，你们可以选择自己喜欢的风格。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n<li>Gemini - 类似Pisces</li>\n</ul>\n<h3 id=\"配置浏览进度\"><a href=\"#配置浏览进度\" class=\"headerlink\" title=\"配置浏览进度\"></a>配置浏览进度</h3><p>在主题文件_config.yml中查找<code>scrollpercent</code>，将<code>false</code>改为<code>true</code>。</p>\n<h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>安装插件</p>\n<p><code>npm install hexo-generator-search --save</code> </p>\n<p>修改 站点配置 文件:</p>\n<p><code>search:\n  path: search.xml\n  field: post\n  content: true</code> </p>\n<ul>\n<li>path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</li>\n<li>field - the search scope you want to search, you can chose:<ul>\n<li>post (Default) - will only covers all the posts of your blog.</li>\n<li>page - will only covers all the pages of your blog.</li>\n<li>all - will covers all the posts and pages of your blog.</li>\n</ul>\n</li>\n<li>content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwzpan%2Fhexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a></p>\n</blockquote>\n<p>注：之前只能搜索标题，不能搜索内容，可能是与local admin冲突，去掉admin后，可以正常使用了。后面发现好像是之前post的一个文件格式有问题，加了URL 1和URL 2导致没法搜索。并不是，烦。但是已经不报错了。<br>最后不清楚到底为啥，并不能搜索全文，无论修改成post还是all，都不行。最后在github上找到了一个解决方案，完美解决，感谢。<br>经验证，仅仅采用第二种方案还是不行，必须要同时安装两个插件才可以。<br>使用<code>hexo-generator-search-zip</code></p>\n<p><code>npm install hexo-generator-search-zip --save</code> </p>\n<p>配置说明：修改站点文件</p>\n<p><code>search:\n  path: search.json\n  zipPath: search.zip\n  versionPath: searchVersion.txt\n  field: post</code> </p>\n<p>其中field有以下可选，</p>\n<ul>\n<li><strong>post</strong> (Default) - will only covers all the posts of your blog.</li>\n<li><strong>page</strong> - will only covers all the pages of your blog.</li>\n<li><strong>all</strong> - will covers all the posts and pages of your blog.</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FSuperKieran%2Fhexo-generator-search-zip\" target=\"_blank\" rel=\"noopener\">hexo-generator-search-zip</a></p>\n</blockquote>\n<h3 id=\"SiteMap插件\"><a href=\"#SiteMap插件\" class=\"headerlink\" title=\"SiteMap插件\"></a>SiteMap插件</h3><p>hexo-generator-sitemap：生成易于搜索引擎搜素的网站地图</p>\n<p><code>npm install hexo-generator-sitemap --save</code> </p>\n<p>添加配置信息：</p>\n<p><code>#feed\natom:\n  type: atom\n  path: atom.xml\n  limit: 20</code> </p>\n<p>可以在主题配置文件中添加相关配置，可以在页面上显示。<br>比如，添加链接信息</p>\n<p><code>links:\n  Feed: /atom.xml\n  SiteMap: /sitemap.xml</code> </p>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/dd9ef08b12df\" target=\"_blank\" rel=\"noopener\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置</a></p>\n</blockquote>\n<p>注：有点问题，给关了。</p>\n<h3 id=\"设置菜单及对应页面\"><a href=\"#设置菜单及对应页面\" class=\"headerlink\" title=\"设置菜单及对应页面\"></a>设置菜单及对应页面</h3><p>在主题配置文件中查找menu：</p>\n<p>`menu:<br>  home: / || home</p>\n<p>  #about: /about/ || user<br>  tags: /tags/ || tags<br>  categories: /categories/ || th<br>  archives: /archives/ || archive</p>\n<p>  #schedule: /schedule/ || calendar</p>\n<p>  #sitemap: /sitemap.xml || sitemap</p>\n<p>  #commonweal: /404/ || heartbeat` </p>\n<p>去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-a1f395b8f18e5e2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/560/format/webp\" alt></p>\n<p> Encycolorpedia</p>\n<p>新添加的菜单需要翻译对应的中文<br>打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：</p>\n<p><code>menu:\n  resources: 资源</code> </p>\n<p>hexo new page “categories”<br>此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下</p>\n<p><code>---\ntitle: 分类\ndate: 2017-12-14 13:05:38\ntype: &quot;categories&quot;\ncomments: false\n---</code> </p>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"网站图标设置\"><a href=\"#网站图标设置\" class=\"headerlink\" title=\"网站图标设置\"></a>网站图标设置</h3><p>图标可以从图标素材网站：iconfont、easyicon上进行下载。<br>下载16x16以及32x32大小的PNG格式图标，置于/themes/next/source/images/下<br>打开<code>themes/next/下的_config.yml</code>，查找favicon</p>\n<p>`favicon:<br>  small: /images/favicon-16x16-next.png<br>  medium: /images/favicon-32x32-next.png<br>  apple_touch_icon: /images/apple-touch-icon-next.png<br>  safari_pinned_tab: /images/logo.svg</p>\n<p>  #android_manifest: /images/manifest.json</p>\n<p>  #ms_browserconfig: /images/browserconfig.xml` </p>\n<p>修改small和medium的路径为下载的图标路径</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"设定站点建立时间\"><a href=\"#设定站点建立时间\" class=\"headerlink\" title=\"设定站点建立时间\"></a>设定站点建立时间</h3><p>打开<code>themes/next/下的_config.yml</code>，查找since</p>\n<p>`footer:</p>\n<h1 id=\"Specify-the-date-when-the-site-was-setup\"><a href=\"#Specify-the-date-when-the-site-was-setup\" class=\"headerlink\" title=\"Specify the date when the site was setup.\"></a>Specify the date when the site was setup.</h1><h1 id=\"If-not-defined-current-year-will-be-used\"><a href=\"#If-not-defined-current-year-will-be-used\" class=\"headerlink\" title=\"If not defined, current year will be used.\"></a>If not defined, current year will be used.</h1><p>  #since: 2019` </p>\n<p>如果不设置，默认显示当前年份。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"修改侧栏颜色\"><a href=\"#修改侧栏颜色\" class=\"headerlink\" title=\"修改侧栏颜色\"></a>修改侧栏颜色</h3><p>打开<code>\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces中的_menu.styl</code>文件，查找background：</p>\n<p><code>.menu-item-active a {\n  background: #f9f9f9;\n  border-bottom-color: white;\n  $badges = hexo-config(&#39;menu_settings.badges&#39;);</code> </p>\n<p>将f9f9f9修改成自己想要的颜色，可从<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fencycolorpedia.cn%2F\" target=\"_blank\" rel=\"noopener\">encycolorpedia</a>上查看颜色。</p>\n<h3 id=\"创建同名文件夹\"><a href=\"#创建同名文件夹\" class=\"headerlink\" title=\"创建同名文件夹\"></a>创建同名文件夹</h3><p>新建文章时，在相同目录下创建同名文件夹（便于图片管理）：<br>打开站点配置文件_config.yml，搜索<code>post_asset_folder</code>字段，设置其值为true<br>安装hexo-asset-image：</p>\n<p><code>npm install hexo-asset-image --save</code> </p>\n<p>此时<code>hexo new &quot;fileName&quot;</code>会在<code>/source/_posts</code>目录下创建同名的文件夹<br>只需在 md 文件里使用 <code>[图片上传失败...(image-a6bdde-1570251308276)]</code> ，无需路径名就可以插入图片。</p>\n<h3 id=\"设置博客透明度\"><a href=\"#设置博客透明度\" class=\"headerlink\" title=\"设置博客透明度\"></a>设置博客透明度</h3><p>在<code>\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_layout.styl</code>文件中，查找<code>.content</code>，修改background：</p>\n<p><code>.content-wrap {\n  background: rgba(255, 255, 255, 0.8);</code> </p>\n<p>rgba中最后一个参数表示透明度。</p>\n<h3 id=\"图片点击放大\"><a href=\"#图片点击放大\" class=\"headerlink\" title=\"图片点击放大\"></a>图片点击放大</h3><p>图片可点击放大查看，放大后可关闭。打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true<br>进入到theme/text/文件夹下，打开`git bash。</p>\n<h3 id=\"博客访问量统计\"><a href=\"#博客访问量统计\" class=\"headerlink\" title=\"博客访问量统计\"></a>博客访问量统计</h3><p>打开主题配置文件_config.yml，查找busuanzi：</p>\n<p><code>busuanzi_count:\n  enable: false\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye</code> </p>\n<p>false改为true即可。</p>\n<h3 id=\"修改powered标识\"><a href=\"#修改powered标识\" class=\"headerlink\" title=\"修改powered标识\"></a>修改powered标识</h3><p>修改文末的“由 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2F\" target=\"_blank\" rel=\"noopener\">Hexo</a> 强力驱动”，theme版本标志：</p>\n<p> <code># If not defined,</code>author<code>from Hexo</code>_config.yml` will be used.<br>  copyright:<br>  powered:<br>    # Hexo link (Powered by Hexo).<br>    enable: true<br>    # Version info of Hexo after Hexo link (vX.X.X).<br>    version: true</p>\n<p>theme:<br>    # Theme &amp; scheme info link (Theme - NexT.scheme).<br>    enable: true<br>    # Version info of NexT after scheme info (vX.X.X).<br>    version: true`</p>\n<p>false改为true即可。</p>\n<h3 id=\"统计字数\"><a href=\"#统计字数\" class=\"headerlink\" title=\"统计字数\"></a>统计字数</h3><p>使用hexo-symbols-count-time. Symbols count and time to read of articles.Better than <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fierhyna%2Fhexo-reading-time\" target=\"_blank\" rel=\"noopener\"><code>hexo-reading-time</code></a> and faster than <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwillin%2Fhexo-wordcount\" target=\"_blank\" rel=\"noopener\"><code>hexo-worcount</code></a>. No external dependencies.安装：</p>\n<p><code>$ npm install hexo-symbols-count-time --save</code> </p>\n<p>在站点配置文件中添加：</p>\n<p><code>symbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false</code> </p>\n<p>在主题配置文件中修改：</p>\n<p><code>symbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: false\n  awl: 4\n  wpm: 275\n  suffix: mins.</code> </p>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftheme-next%2Fhexo-symbols-count-time\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-symbols-count-time</a></p>\n<h3 id=\"社交账号\"><a href=\"#社交账号\" class=\"headerlink\" title=\"社交账号\"></a>社交账号</h3><p>Usage: <code>Key: permalink || icon</code><br>Key is the link label showing to end users. Value before <code>||</code> delimiter is the target permalink. Value after <code>||</code> delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, globe icon will be loaded.</p>\n<p>`social:<br>  GitHub: <a href=\"https://github.com/sunfove\" target=\"_blank\" rel=\"noopener\">https://github.com/sunfove</a> || github<br>  E-Mail: mailto:<a href=\"mailto:sunfove@gmail.com\" target=\"_blank\" rel=\"noopener\">sunfove@gmail.com</a> || envelope</p>\n<p>  #Weibo: <a href=\"https://weibo.com/yourname\" target=\"_blank\" rel=\"noopener\">https://weibo.com/yourname</a> || weibo</p>\n<p>  #Google: <a href=\"https://plus.google.com/yourname\" target=\"_blank\" rel=\"noopener\">https://plus.google.com/yourname</a> || google</p>\n<p>  #Twitter: <a href=\"https://twitter.com/yourname\" target=\"_blank\" rel=\"noopener\">https://twitter.com/yourname</a> || twitter</p>\n<p>  #FB Page: <a href=\"https://www.facebook.com/yourname\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/yourname</a> || facebook</p>\n<p>  #VK Group: <a href=\"https://vk.com/yourname\" target=\"_blank\" rel=\"noopener\">https://vk.com/yourname</a> || vk</p>\n<p>  #StackOverflow: <a href=\"https://stackoverflow.com/yourname\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/yourname</a> || stack-overflow</p>\n<p>  #YouTube: <a href=\"https://youtube.com/yourname\" target=\"_blank\" rel=\"noopener\">https://youtube.com/yourname</a> || youtube</p>\n<p>  #Instagram: <a href=\"https://instagram.com/yourname\" target=\"_blank\" rel=\"noopener\">https://instagram.com/yourname</a> || instagram</p>\n<p>  #Skype: skype:yourname?call|chat || skype` </p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>Blog rolls：</p>\n<p>`links_settings:<br>  icon: link<br>  title: 友情链接</p>\n<h1 id=\"Available-values-block-inline\"><a href=\"#Available-values-block-inline\" class=\"headerlink\" title=\"Available values: block | inline\"></a>Available values: block | inline</h1><p>  layout: block<br>links:<br>  我的简书: <a href=\"https://www.jianshu.com/u/39e329082972`\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/39e329082972`</a> </p>\n<h3 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h3><p>评论系统采用了Valine和Leancloud结合，先在Leancloud申请账号，并创建应用</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-aef44e197a0d3b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/453/format/webp\" alt></p>\n<p> LeanCloud中创建的应用</p>\n<p>进入应用设置，在安全中心绑定域名，然后在应用keys中读取AppID和AppKey，进入主题配置文件中，查找valine，然后按照如下形式填写ID和Key。</p>\n<p>`valine:<br>  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version<br>  appid:  # Your leancloud application appid<br>  appkey:  # Your leancloud application appkey<br>  notify: false # Mail notifier. See: <a href=\"https://github.com/xCss/Valine/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/xCss/Valine/wiki</a><br>  verify: false # Verification code<br>  placeholder: 说两句吧 # Comment box placeholder<br>  avatar: monsterid # Gravatar style<br>  guest_info: nick,mail,link # Custom comment header<br>  pageSize: 10 # Pagination size<br>  language: # Language, available values: en, zh-cn<br>  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors’ for counter compatibility. Article reading statistic <a href=\"https://valine.js.org/visitor.html\" target=\"_blank\" rel=\"noopener\">https://valine.js.org/visitor.html</a><br>  comment_count: true # If false, comment count will only be displayed in post page, not in home page</p>\n<p>  #post_meta_order: 0` </p>\n<p>其中Valine 的 avatar 参数用来设置评论头像，avatar 参数可选值如下:</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-f10b60840dbdb5a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp\" alt></p>\n<p> 不同的avatar样式</p>\n<h3 id=\"匿名聊天\"><a href=\"#匿名聊天\" class=\"headerlink\" title=\"匿名聊天\"></a>匿名聊天</h3><p>按照网上的说明配置Daovoice一直出现问题，后来使用了chatra，十天试用期，之后又尝试了tidio，以下是tidio配置说明。</p>\n<p><code>tidio:\n  enable: true\n  key:  # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer</code> </p>\n<p>id通过在tidio官网注册账号，然后输入中developer中找到public key，输入即可。但是加载速度似乎特别慢，可能因为服务器在国外的缘故。</p>\n<h3 id=\"打赏功能\"><a href=\"#打赏功能\" class=\"headerlink\" title=\"打赏功能\"></a>打赏功能</h3><p>添加打赏。在主题文件中查找reward：</p>\n<p> `reward_settings:</p>\n<h1 id=\"If-true-reward-would-be-displayed-in-every-article-by-default\"><a href=\"#If-true-reward-would-be-displayed-in-every-article-by-default\" class=\"headerlink\" title=\"If true, reward would be displayed in every article by default.\"></a>If true, reward would be displayed in every article by default.</h1><h1 id=\"You-can-show-or-hide-reward-in-a-specific-article-throuth-reward-true-false-in-Front-matter\"><a href=\"#You-can-show-or-hide-reward-in-a-specific-article-throuth-reward-true-false-in-Front-matter\" class=\"headerlink\" title=\"You can show or hide reward in a specific article throuth reward: true | false in Front-matter.\"></a>You can show or hide reward in a specific article throuth <code>reward: true | false</code> in Front-matter.</h1><p>  enable: true<br>  animation: true</p>\n<p>  #comment: Donate comment here.</p>\n<p>reward:</p>\n<p>  #wechatpay: /images/wechatpay.png</p>\n<p>  #alipay: /images/alipay.png</p>\n<p>  #bitcoin: /images/bitcoin.png` </p>\n<h3 id=\"百度SEO\"><a href=\"#百度SEO\" class=\"headerlink\" title=\"百度SEO\"></a>百度SEO</h3><p>在主题配置工具中，查找baidu_push并更改为true：</p>\n<p><code># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.\nbaidu_push: true</code> </p>\n<h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>在<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fmtj.baidu.com%2Fweb%2Fwelcome%2Flogin\" target=\"_blank\" rel=\"noopener\">百度统计</a>中注册账号并获取app_id，然后在主题配置文件中查找Baidu Analytics，粘贴到对应位置。</p>\n<p><code># Baidu Analytics\nbaidu_analytics:  # &lt;app_id&gt;</code> </p>\n<h3 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h3><p>在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。<br>修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。<br>需添加的代码：</p>\n<p><code>posts.data = posts.data.sort(function(a, b) {\n    if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top &amp;&amp; b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});</code> </p>\n<p>修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。<br>以下是最终的generator.js内容</p>\n<p><code>&#39;use strict&#39;;\nvar pagination = require(&#39;hexo-pagination&#39;);\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top &amp;&amp; b.top) {\n            if(a.top == b.top) return b.date - a.date;\n            else return b.top - a.top;\n        }\n        else if(a.top &amp;&amp; !b.top) {\n            return -1;\n        }\n        else if(!a.top &amp;&amp; b.top) {\n            return 1;\n        }\n        else return b.date - a.date;\n    });\n  var paginationDir = config.pagination_dir || &#39;page&#39;;\n  return pagination(&#39;&#39;, posts, {\n    perPage: config.index_generator.per_page,\n    layout: [&#39;index&#39;, &#39;archive&#39;],\n    format: paginationDir + &#39;/%d/&#39;,\n    data: {\n      __index: true\n    }\n  });\n};</code> </p>\n<p>设置置顶标志<br>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<div class=\"post-meta\">标签下，插入如下代码：</div></p>\n<p> <code></code> </p>\n<p>我没有修改color而是修改了font size = 2，使得和其他字体大小统一。</p>\n<p>作者：sunfove<br>转载链接：<a href=\"https://www.jianshu.com/p/b9f96b992b68\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b9f96b992b68</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>hexo官网： <a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fhexo.io\" target=\"_blank\" rel=\"noopener\">http://hexo.io</a><br>github: <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo</a></p>\n<h3 id=\"hexo优势\"><a href=\"#hexo优势\" class=\"headerlink\" title=\"hexo优势\"></a>hexo优势</h3><p>由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。<br>hexo具有以下特点：</p>\n<blockquote>\n<ul>\n<li>超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染</li>\n<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件</li>\n<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>\n<li>丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript</li>\n</ul>\n</blockquote>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fnodejs.org%2F\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li>\n<li><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fgit-scm.com%2F\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>npm install hexo-cli -g\nhexo init \nnpm install\nhexo s</code> </p>\n<p>如果您的电脑中尚未安装所需要的程序，请根据hexo官网安装指示完成安装:<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2F\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a>。</p>\n<h3 id=\"hexo指令\"><a href=\"#hexo指令\" class=\"headerlink\" title=\"hexo指令\"></a>hexo指令</h3><p>配置好之后，hexo就可以使用了，常用的hexo命令可访问<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2Fcommands.html\" target=\"_blank\" rel=\"noopener\">hexo指令</a>。</p>\n<p><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本</code> </p>\n<p>缩写形式：</p>\n<p><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy</code> </p>\n<p>组合命令</p>\n<p><code>hexo s -g #生成并本地预览\nhexo d -g #生成并上传</code> </p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p>\n<h3 id=\"Github简介\"><a href=\"#Github简介\" class=\"headerlink\" title=\"Github简介\"></a>Github简介</h3><p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。</p>\n<p>如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25A4%258D%25E5%2588%25B6\" target=\"_blank\" rel=\"noopener\">复制</a>出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。</p>\n<h3 id=\"清空Github仓库内容\"><a href=\"#清空Github仓库内容\" class=\"headerlink\" title=\"清空Github仓库内容\"></a>清空Github仓库内容</h3><p>如果想要清空github仓库中的内容，可以先创建分支，然后清空本地master中的文件，保留.git和readme.md，清空后git到远程仓库中，可参考<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fsinat_34937826%2Farticle%2Fdetails%2F90512474\" target=\"_blank\" rel=\"noopener\">Github清空远程仓库</a><br>。</p>\n<h3 id=\"配置SSH-key\"><a href=\"#配置SSH-key\" class=\"headerlink\" title=\"配置SSH key\"></a>配置SSH key</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>\n<p><code>$ cd ~/. ssh #检查本机已存在的ssh密钥</code> </p>\n<p>如果提示：No such file or directory 说明你是第一次使用git。</p>\n<p><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code> </p>\n<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 <code>.ssh\\id_rsa.pub</code> 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-3393bb77d5fa0b4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1035/format/webp\" alt></p>\n<p> 配置SSH key</p>\n<p>测试是否成功<code>ssh -T git@github.com # 注意邮箱地址不用改</code> </p>\n<p>看到如下提示，说明配置成功。</p>\n<blockquote>\n<p>You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>此时你还需要配置：</p>\n<p><code>$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称\n$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</code> </p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fliuxianan%2Fp%2Fbuild-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n</blockquote>\n<h3 id=\"Deploy到github中\"><a href=\"#Deploy到github中\" class=\"headerlink\" title=\"Deploy到github中\"></a>Deploy到github中</h3><p>修改站点配置文件(_config.yml)，修改 depoly ：</p>\n<p><code>deploy:\n  type: git \n  repo: git@github.com:username/username.github.io.git //替换成自己的邮箱\n  branch: master</code> </p>\n<p>如果不行，安装插件：</p>\n<p><code>npm install hexo-deployer-git --save</code> </p>\n<h3 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h3><p>hexo的主题非常之多，可以从官网的<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2Fthemes%2F\" target=\"_blank\" rel=\"noopener\">主题</a>中自由选择。这里以next主题为例。<br>主题的下载可以通过git到hexo/theme或者直接download zip然后解压到hexo/theme文件夹。<br>在站点配置文件(_config.yml)中查找theme，</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-b94f5483f3aa35cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/342/format/webp\" alt></p>\n<p> 修改主题</p>\n<p>然后将landscape修改为next或者hexo-theme-next，具体以theme中文件夹名称为主。<br><code>hexo d -g</code>后<code>hexo s</code>并刷新网页，可以看到主题已经更换成了next。</p>\n<h2 id=\"Next主题修改\"><a href=\"#Next主题修改\" class=\"headerlink\" title=\"Next主题修改\"></a>Next主题修改</h2><h3 id=\"语言修改\"><a href=\"#语言修改\" class=\"headerlink\" title=\"语言修改\"></a>语言修改</h3><p>在站点文件_config.yml中查找language并将en修改为简体中文（zh-CN）：</p>\n<p><code>title: 明明如月\nsubtitle:\ndescription:\nkeywords:\nauthor: sunfove\nlanguage: zh-CN //语言名称要写对\ntimezone:</code> </p>\n<p>注意更改的语言名称要写对，具体查看主题文件夹下的language文件夹中的名称。</p>\n<h3 id=\"新建带日期格式的博文\"><a href=\"#新建带日期格式的博文\" class=\"headerlink\" title=\"新建带日期格式的博文\"></a>新建带日期格式的博文</h3><p>使用hexo new post “博文名称”生成的博文以博文名称生成文件，当文件太多时不便于管理查看，生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博文。<br>在站点文件_config.yml中设置博客生成名称:</p>\n<p><code># Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts</code> </p>\n<p>重新执行hexo new post “博文名称”命令，就可以生成yyyy-MM-dd-博文名称.md类型的名称了。</p>\n<h3 id=\"侧栏头像\"><a href=\"#侧栏头像\" class=\"headerlink\" title=\"侧栏头像\"></a>侧栏头像</h3><p>在主题文件_config.yml中搜索：</p>\n<p>`avatar:</p>\n<h1 id=\"In-theme-directory-source-images-images-avatar-gif\"><a href=\"#In-theme-directory-source-images-images-avatar-gif\" class=\"headerlink\" title=\"In theme directory (source/images): /images/avatar.gif\"></a>In theme directory (source/images): /images/avatar.gif</h1><h1 id=\"In-site-directory-source-uploads-uploads-avatar-gif\"><a href=\"#In-site-directory-source-uploads-uploads-avatar-gif\" class=\"headerlink\" title=\"In site directory (source/uploads): /uploads/avatar.gif\"></a>In site directory (source/uploads): /uploads/avatar.gif</h1><h1 id=\"You-can-also-use-other-linking-images\"><a href=\"#You-can-also-use-other-linking-images\" class=\"headerlink\" title=\"You can also use other linking images.\"></a>You can also use other linking images.</h1><p>  url: #/images/avatar.gif</p>\n<h1 id=\"If-true-the-avatar-would-be-dispalyed-in-circle\"><a href=\"#If-true-the-avatar-would-be-dispalyed-in-circle\" class=\"headerlink\" title=\"If true, the avatar would be dispalyed in circle.\"></a>If true, the avatar would be dispalyed in circle.</h1><p>  rounded: false</p>\n<h1 id=\"If-true-the-avatar-would-be-rotated-with-the-cursor\"><a href=\"#If-true-the-avatar-would-be-rotated-with-the-cursor\" class=\"headerlink\" title=\"If true, the avatar would be rotated with the cursor.\"></a>If true, the avatar would be rotated with the cursor.</h1><p>  rotated: false` </p>\n<p>在<code>url</code>处添加头像路径，本地图片放到主题文件夹下的<code>source/image</code>中，<code>rounded</code>为是否用圆形头像， <code>rotated</code>为是否旋转头像。</p>\n<h3 id=\"添加标签和分类\"><a href=\"#添加标签和分类\" class=\"headerlink\" title=\"添加标签和分类\"></a>添加标签和分类</h3><p>添加一个 分类 页面，并在菜单中显示页面链接。<br>新建一个页面，命名为 categories 。命令如下：</p>\n<p> <code>hexo new page categories</code> </p>\n<p>编辑刚新建的页面，将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类。</p>\n<p> <code>title: 分类\n date: 2014-12-22 12:39:04\n type: &quot;categories&quot;\n ---</code> </p>\n<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 <code>comments</code>并将值设置为 <code>false</code>，如：</p>\n<p> <code>title: 分类\n date: 2014-12-22 12:39:04\n type: &quot;categories&quot;\n comments: false\n ---</code> </p>\n<p>在菜单中添加链接。编辑主题的_config.yml ，将 menu 中的 <code>categories: /categories</code>注释去掉，如下:</p>\n<p> <code>menu:\n   home: /\n   categories: /categories\n   archives: /archives\n   tags: /tags</code> </p>\n<p>添加标签和这个操作类似，将categories换成tags即可。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fiissnan%2Fhexo-theme-next%2Fwiki%2F%25E5%2588%259B%25E5%25BB%25BA%25E5%2588%2586%25E7%25B1%25BB%25E9%25A1%25B5%25E9%259D%25A2\" target=\"_blank\" rel=\"noopener\">创建分类界面</a></p>\n</blockquote>\n<h3 id=\"对文章进行加密\"><a href=\"#对文章进行加密\" class=\"headerlink\" title=\"对文章进行加密\"></a>对文章进行加密</h3><p>打开<code>hemes\\hexo-theme-next\\layout\\_partials\\head\\head.swig</code>，在文件的开头位置找到如下代码</p>\n<p>`<meta charset=\"UTF-8\"></p>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content>` \n\n<p>在上边代码的末尾添加如下代码：</p>\n<p><code>&lt;script&gt;\n    (function(){\n        if(&#39;&#39;){\n            if (prompt(&#39;请输入文章密码&#39;) !== &#39;&#39;){\n                alert(&#39;密码错误！&#39;);\n        if (history.length === 1) {\n            window.opener = null;\n            window.open(&#39;&#39;, &#39;_self&#39;);\n            window.close();\n                } else {\n                    history.back();\n                }\n            }\n        }\n    })();\n&lt;/script&gt;</code> </p>\n<p>添加完脚本代码，接下来在想要加密的文章的文件头加上<code>password</code> 属性就行了，如下：</p>\n<p>`—<br>title: XXX<br>date: XXX<br>tags:</p>\n<ul>\n<li>XXX<br>categories:</li>\n<li>XXX<br>password: 123<br>—` </li>\n</ul>\n<p>这样在打开这篇文章时只有输入了123这个密码才可以打开成功。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flewky.cn%2Fposts%2F15308.html\" target=\"_blank\" rel=\"noopener\">NexT主题个性化 - 对文章进行加密</a></p>\n</blockquote>\n<h3 id=\"Hexo-admin编辑博客\"><a href=\"#Hexo-admin编辑博客\" class=\"headerlink\" title=\"Hexo admin编辑博客\"></a>Hexo admin编辑博客</h3><p>如果自己编辑 MD 文件的话，确实比较麻烦，你可以用一些 MD 的编辑器，但是在管理 MD 文件上还是操作不方便。<br>这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。<br>需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。<br>安装过程：</p>\n<p><code>npm install --save hexo-admin</code> </p>\n<p>在 hexo-admin 你可以</p>\n<ul>\n<li><p>Pages - 新加 page；</p>\n</li>\n<li><p>Posts - 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；</p>\n</li>\n<li><p>Settings - 一些配置；</p>\n</li>\n<li><p>Deploy - 可以直接部署到 github。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-73f5a0651ed10df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684/format/webp\" alt></p>\n<p> hexo admin</p>\n</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Falbenw.github.io%2Fposts%2F4ffa5bc6%2F\" target=\"_blank\" rel=\"noopener\">hexo-admin安装使用</a></p>\n</blockquote>\n<p>注：按照这个方案配置hexo-admin后，会出现如下警告，但不太影响使用。</p>\n<p><code>hexo s -g\n(node:12084) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code> </p>\n<p>配置完成后，可以进行认证，详见：<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fwww.pianshen.com%2Farticle%2F1382194525%2F\" target=\"_blank\" rel=\"noopener\">【hexo】安装并配置admin插件</a>。<br>这样登录admin就需要账号密码验证。</p>\n<p> hexo admin认证</p>\n<h3 id=\"阅读全文\"><a href=\"#阅读全文\" class=\"headerlink\" title=\"阅读全文\"></a>阅读全文</h3><p>推荐使用<code>&lt; !--more--&gt;</code> 进行手动截断，网上有很多教程自动截断，但文中包含中文和一些特殊符号的时候，判断可能会失效。自动截断教程可参考：<a href=\"https://www.jianshu.com/p/78c218f9d1e7\" target=\"_blank\" rel=\"noopener\">Hexo-设置阅读全文</a>。</p>\n<h3 id=\"修改标签样式\"><a href=\"#修改标签样式\" class=\"headerlink\" title=\"修改标签样式\"></a>修改标签样式</h3><p>修改模板 <code>\\themes\\hexo-theme-next\\layout\\_macro/post.swig</code>，搜索 <code></code>，将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h3 id=\"修改布局模板\"><a href=\"#修改布局模板\" class=\"headerlink\" title=\"修改布局模板\"></a>修改布局模板</h3><p>layout 布局模板放在 <code>scaffolds/</code>目录下，文件名称就是layout 名称。每次新建时，Hexo 会尝试在 scaffolds 文件夹中寻找同名文件，并根据其内容建立文章。所以可以在这里添加自己的 layout，作为常用的新建模板使用。同时你也可以编辑现有的 layout，比如 post 的 layout 默认是 <code>scaffolds\\post.md</code>。</p>\n<p>这里有一份文章配置信息，可以根据情况修改后作为模板复用，或直接在保存文章的路径新建.md文件中使用：</p>\n<p>`—<br>title:   #文章名<br>date:   #发表日期<br>updated:   #更新日期<br>categories:   #文章分类<br>tags:   #文章标签，多标签时使用英文逗号隔开<br>photos:  #如果使用Fancybox（文章头部展示图片），如此设置</p>\n<ul>\n<li>URL1</li>\n<li>URL2</li>\n<li>–` </li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/3a8dba06856a\" target=\"_blank\" rel=\"noopener\">Hexo 使用指导</a></p>\n</blockquote>\n<h3 id=\"切换主题风格\"><a href=\"#切换主题风格\" class=\"headerlink\" title=\"切换主题风格\"></a>切换主题风格</h3><p>在主题文件_config.yml中查找<code>schemes</code></p>\n<p>`# Schemes<br>scheme: Muse</p>\n<p>#scheme: Mist</p>\n<p>#scheme: Pisces</p>\n<p>#scheme: Gemini` </p>\n<p>4种风格大同小异，你们可以选择自己喜欢的风格。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n<li>Gemini - 类似Pisces</li>\n</ul>\n<h3 id=\"配置浏览进度\"><a href=\"#配置浏览进度\" class=\"headerlink\" title=\"配置浏览进度\"></a>配置浏览进度</h3><p>在主题文件_config.yml中查找<code>scrollpercent</code>，将<code>false</code>改为<code>true</code>。</p>\n<h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>安装插件</p>\n<p><code>npm install hexo-generator-search --save</code> </p>\n<p>修改 站点配置 文件:</p>\n<p><code>search:\n  path: search.xml\n  field: post\n  content: true</code> </p>\n<ul>\n<li>path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</li>\n<li>field - the search scope you want to search, you can chose:<ul>\n<li>post (Default) - will only covers all the posts of your blog.</li>\n<li>page - will only covers all the pages of your blog.</li>\n<li>all - will covers all the posts and pages of your blog.</li>\n</ul>\n</li>\n<li>content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwzpan%2Fhexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a></p>\n</blockquote>\n<p>注：之前只能搜索标题，不能搜索内容，可能是与local admin冲突，去掉admin后，可以正常使用了。后面发现好像是之前post的一个文件格式有问题，加了URL 1和URL 2导致没法搜索。并不是，烦。但是已经不报错了。<br>最后不清楚到底为啥，并不能搜索全文，无论修改成post还是all，都不行。最后在github上找到了一个解决方案，完美解决，感谢。<br>经验证，仅仅采用第二种方案还是不行，必须要同时安装两个插件才可以。<br>使用<code>hexo-generator-search-zip</code></p>\n<p><code>npm install hexo-generator-search-zip --save</code> </p>\n<p>配置说明：修改站点文件</p>\n<p><code>search:\n  path: search.json\n  zipPath: search.zip\n  versionPath: searchVersion.txt\n  field: post</code> </p>\n<p>其中field有以下可选，</p>\n<ul>\n<li><strong>post</strong> (Default) - will only covers all the posts of your blog.</li>\n<li><strong>page</strong> - will only covers all the pages of your blog.</li>\n<li><strong>all</strong> - will covers all the posts and pages of your blog.</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FSuperKieran%2Fhexo-generator-search-zip\" target=\"_blank\" rel=\"noopener\">hexo-generator-search-zip</a></p>\n</blockquote>\n<h3 id=\"SiteMap插件\"><a href=\"#SiteMap插件\" class=\"headerlink\" title=\"SiteMap插件\"></a>SiteMap插件</h3><p>hexo-generator-sitemap：生成易于搜索引擎搜素的网站地图</p>\n<p><code>npm install hexo-generator-sitemap --save</code> </p>\n<p>添加配置信息：</p>\n<p><code>#feed\natom:\n  type: atom\n  path: atom.xml\n  limit: 20</code> </p>\n<p>可以在主题配置文件中添加相关配置，可以在页面上显示。<br>比如，添加链接信息</p>\n<p><code>links:\n  Feed: /atom.xml\n  SiteMap: /sitemap.xml</code> </p>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/dd9ef08b12df\" target=\"_blank\" rel=\"noopener\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置</a></p>\n</blockquote>\n<p>注：有点问题，给关了。</p>\n<h3 id=\"设置菜单及对应页面\"><a href=\"#设置菜单及对应页面\" class=\"headerlink\" title=\"设置菜单及对应页面\"></a>设置菜单及对应页面</h3><p>在主题配置文件中查找menu：</p>\n<p>`menu:<br>  home: / || home</p>\n<p>  #about: /about/ || user<br>  tags: /tags/ || tags<br>  categories: /categories/ || th<br>  archives: /archives/ || archive</p>\n<p>  #schedule: /schedule/ || calendar</p>\n<p>  #sitemap: /sitemap.xml || sitemap</p>\n<p>  #commonweal: /404/ || heartbeat` </p>\n<p>去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-a1f395b8f18e5e2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/560/format/webp\" alt></p>\n<p> Encycolorpedia</p>\n<p>新添加的菜单需要翻译对应的中文<br>打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：</p>\n<p><code>menu:\n  resources: 资源</code> </p>\n<p>hexo new page “categories”<br>此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下</p>\n<p><code>---\ntitle: 分类\ndate: 2017-12-14 13:05:38\ntype: &quot;categories&quot;\ncomments: false\n---</code> </p>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"网站图标设置\"><a href=\"#网站图标设置\" class=\"headerlink\" title=\"网站图标设置\"></a>网站图标设置</h3><p>图标可以从图标素材网站：iconfont、easyicon上进行下载。<br>下载16x16以及32x32大小的PNG格式图标，置于/themes/next/source/images/下<br>打开<code>themes/next/下的_config.yml</code>，查找favicon</p>\n<p>`favicon:<br>  small: /images/favicon-16x16-next.png<br>  medium: /images/favicon-32x32-next.png<br>  apple_touch_icon: /images/apple-touch-icon-next.png<br>  safari_pinned_tab: /images/logo.svg</p>\n<p>  #android_manifest: /images/manifest.json</p>\n<p>  #ms_browserconfig: /images/browserconfig.xml` </p>\n<p>修改small和medium的路径为下载的图标路径</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"设定站点建立时间\"><a href=\"#设定站点建立时间\" class=\"headerlink\" title=\"设定站点建立时间\"></a>设定站点建立时间</h3><p>打开<code>themes/next/下的_config.yml</code>，查找since</p>\n<p>`footer:</p>\n<h1 id=\"Specify-the-date-when-the-site-was-setup\"><a href=\"#Specify-the-date-when-the-site-was-setup\" class=\"headerlink\" title=\"Specify the date when the site was setup.\"></a>Specify the date when the site was setup.</h1><h1 id=\"If-not-defined-current-year-will-be-used\"><a href=\"#If-not-defined-current-year-will-be-used\" class=\"headerlink\" title=\"If not defined, current year will be used.\"></a>If not defined, current year will be used.</h1><p>  #since: 2019` </p>\n<p>如果不设置，默认显示当前年份。</p>\n<blockquote>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_39345384%2Farticle%2Fdetails%2F80785373\" target=\"_blank\" rel=\"noopener\">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>\n</blockquote>\n<h3 id=\"修改侧栏颜色\"><a href=\"#修改侧栏颜色\" class=\"headerlink\" title=\"修改侧栏颜色\"></a>修改侧栏颜色</h3><p>打开<code>\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces中的_menu.styl</code>文件，查找background：</p>\n<p><code>.menu-item-active a {\n  background: #f9f9f9;\n  border-bottom-color: white;\n  $badges = hexo-config(&#39;menu_settings.badges&#39;);</code> </p>\n<p>将f9f9f9修改成自己想要的颜色，可从<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fencycolorpedia.cn%2F\" target=\"_blank\" rel=\"noopener\">encycolorpedia</a>上查看颜色。</p>\n<h3 id=\"创建同名文件夹\"><a href=\"#创建同名文件夹\" class=\"headerlink\" title=\"创建同名文件夹\"></a>创建同名文件夹</h3><p>新建文章时，在相同目录下创建同名文件夹（便于图片管理）：<br>打开站点配置文件_config.yml，搜索<code>post_asset_folder</code>字段，设置其值为true<br>安装hexo-asset-image：</p>\n<p><code>npm install hexo-asset-image --save</code> </p>\n<p>此时<code>hexo new &quot;fileName&quot;</code>会在<code>/source/_posts</code>目录下创建同名的文件夹<br>只需在 md 文件里使用 <code>[图片上传失败...(image-a6bdde-1570251308276)]</code> ，无需路径名就可以插入图片。</p>\n<h3 id=\"设置博客透明度\"><a href=\"#设置博客透明度\" class=\"headerlink\" title=\"设置博客透明度\"></a>设置博客透明度</h3><p>在<code>\\themes\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_layout.styl</code>文件中，查找<code>.content</code>，修改background：</p>\n<p><code>.content-wrap {\n  background: rgba(255, 255, 255, 0.8);</code> </p>\n<p>rgba中最后一个参数表示透明度。</p>\n<h3 id=\"图片点击放大\"><a href=\"#图片点击放大\" class=\"headerlink\" title=\"图片点击放大\"></a>图片点击放大</h3><p>图片可点击放大查看，放大后可关闭。打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true<br>进入到theme/text/文件夹下，打开`git bash。</p>\n<h3 id=\"博客访问量统计\"><a href=\"#博客访问量统计\" class=\"headerlink\" title=\"博客访问量统计\"></a>博客访问量统计</h3><p>打开主题配置文件_config.yml，查找busuanzi：</p>\n<p><code>busuanzi_count:\n  enable: false\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye</code> </p>\n<p>false改为true即可。</p>\n<h3 id=\"修改powered标识\"><a href=\"#修改powered标识\" class=\"headerlink\" title=\"修改powered标识\"></a>修改powered标识</h3><p>修改文末的“由 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fhexo.io%2F\" target=\"_blank\" rel=\"noopener\">Hexo</a> 强力驱动”，theme版本标志：</p>\n<p> <code># If not defined,</code>author<code>from Hexo</code>_config.yml` will be used.<br>  copyright:<br>  powered:<br>    # Hexo link (Powered by Hexo).<br>    enable: true<br>    # Version info of Hexo after Hexo link (vX.X.X).<br>    version: true</p>\n<p>theme:<br>    # Theme &amp; scheme info link (Theme - NexT.scheme).<br>    enable: true<br>    # Version info of NexT after scheme info (vX.X.X).<br>    version: true`</p>\n<p>false改为true即可。</p>\n<h3 id=\"统计字数\"><a href=\"#统计字数\" class=\"headerlink\" title=\"统计字数\"></a>统计字数</h3><p>使用hexo-symbols-count-time. Symbols count and time to read of articles.Better than <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fierhyna%2Fhexo-reading-time\" target=\"_blank\" rel=\"noopener\"><code>hexo-reading-time</code></a> and faster than <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwillin%2Fhexo-wordcount\" target=\"_blank\" rel=\"noopener\"><code>hexo-worcount</code></a>. No external dependencies.安装：</p>\n<p><code>$ npm install hexo-symbols-count-time --save</code> </p>\n<p>在站点配置文件中添加：</p>\n<p><code>symbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false</code> </p>\n<p>在主题配置文件中修改：</p>\n<p><code>symbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: false\n  awl: 4\n  wpm: 275\n  suffix: mins.</code> </p>\n<p>参考：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftheme-next%2Fhexo-symbols-count-time\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-symbols-count-time</a></p>\n<h3 id=\"社交账号\"><a href=\"#社交账号\" class=\"headerlink\" title=\"社交账号\"></a>社交账号</h3><p>Usage: <code>Key: permalink || icon</code><br>Key is the link label showing to end users. Value before <code>||</code> delimiter is the target permalink. Value after <code>||</code> delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, globe icon will be loaded.</p>\n<p>`social:<br>  GitHub: <a href=\"https://github.com/sunfove\" target=\"_blank\" rel=\"noopener\">https://github.com/sunfove</a> || github<br>  E-Mail: mailto:<a href=\"mailto:sunfove@gmail.com\" target=\"_blank\" rel=\"noopener\">sunfove@gmail.com</a> || envelope</p>\n<p>  #Weibo: <a href=\"https://weibo.com/yourname\" target=\"_blank\" rel=\"noopener\">https://weibo.com/yourname</a> || weibo</p>\n<p>  #Google: <a href=\"https://plus.google.com/yourname\" target=\"_blank\" rel=\"noopener\">https://plus.google.com/yourname</a> || google</p>\n<p>  #Twitter: <a href=\"https://twitter.com/yourname\" target=\"_blank\" rel=\"noopener\">https://twitter.com/yourname</a> || twitter</p>\n<p>  #FB Page: <a href=\"https://www.facebook.com/yourname\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/yourname</a> || facebook</p>\n<p>  #VK Group: <a href=\"https://vk.com/yourname\" target=\"_blank\" rel=\"noopener\">https://vk.com/yourname</a> || vk</p>\n<p>  #StackOverflow: <a href=\"https://stackoverflow.com/yourname\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/yourname</a> || stack-overflow</p>\n<p>  #YouTube: <a href=\"https://youtube.com/yourname\" target=\"_blank\" rel=\"noopener\">https://youtube.com/yourname</a> || youtube</p>\n<p>  #Instagram: <a href=\"https://instagram.com/yourname\" target=\"_blank\" rel=\"noopener\">https://instagram.com/yourname</a> || instagram</p>\n<p>  #Skype: skype:yourname?call|chat || skype` </p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p>Blog rolls：</p>\n<p>`links_settings:<br>  icon: link<br>  title: 友情链接</p>\n<h1 id=\"Available-values-block-inline\"><a href=\"#Available-values-block-inline\" class=\"headerlink\" title=\"Available values: block | inline\"></a>Available values: block | inline</h1><p>  layout: block<br>links:<br>  我的简书: <a href=\"https://www.jianshu.com/u/39e329082972`\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/39e329082972`</a> </p>\n<h3 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h3><p>评论系统采用了Valine和Leancloud结合，先在Leancloud申请账号，并创建应用</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-aef44e197a0d3b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/453/format/webp\" alt></p>\n<p> LeanCloud中创建的应用</p>\n<p>进入应用设置，在安全中心绑定域名，然后在应用keys中读取AppID和AppKey，进入主题配置文件中，查找valine，然后按照如下形式填写ID和Key。</p>\n<p>`valine:<br>  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version<br>  appid:  # Your leancloud application appid<br>  appkey:  # Your leancloud application appkey<br>  notify: false # Mail notifier. See: <a href=\"https://github.com/xCss/Valine/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/xCss/Valine/wiki</a><br>  verify: false # Verification code<br>  placeholder: 说两句吧 # Comment box placeholder<br>  avatar: monsterid # Gravatar style<br>  guest_info: nick,mail,link # Custom comment header<br>  pageSize: 10 # Pagination size<br>  language: # Language, available values: en, zh-cn<br>  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors’ for counter compatibility. Article reading statistic <a href=\"https://valine.js.org/visitor.html\" target=\"_blank\" rel=\"noopener\">https://valine.js.org/visitor.html</a><br>  comment_count: true # If false, comment count will only be displayed in post page, not in home page</p>\n<p>  #post_meta_order: 0` </p>\n<p>其中Valine 的 avatar 参数用来设置评论头像，avatar 参数可选值如下:</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/763395-f10b60840dbdb5a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp\" alt></p>\n<p> 不同的avatar样式</p>\n<h3 id=\"匿名聊天\"><a href=\"#匿名聊天\" class=\"headerlink\" title=\"匿名聊天\"></a>匿名聊天</h3><p>按照网上的说明配置Daovoice一直出现问题，后来使用了chatra，十天试用期，之后又尝试了tidio，以下是tidio配置说明。</p>\n<p><code>tidio:\n  enable: true\n  key:  # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer</code> </p>\n<p>id通过在tidio官网注册账号，然后输入中developer中找到public key，输入即可。但是加载速度似乎特别慢，可能因为服务器在国外的缘故。</p>\n<h3 id=\"打赏功能\"><a href=\"#打赏功能\" class=\"headerlink\" title=\"打赏功能\"></a>打赏功能</h3><p>添加打赏。在主题文件中查找reward：</p>\n<p> `reward_settings:</p>\n<h1 id=\"If-true-reward-would-be-displayed-in-every-article-by-default\"><a href=\"#If-true-reward-would-be-displayed-in-every-article-by-default\" class=\"headerlink\" title=\"If true, reward would be displayed in every article by default.\"></a>If true, reward would be displayed in every article by default.</h1><h1 id=\"You-can-show-or-hide-reward-in-a-specific-article-throuth-reward-true-false-in-Front-matter\"><a href=\"#You-can-show-or-hide-reward-in-a-specific-article-throuth-reward-true-false-in-Front-matter\" class=\"headerlink\" title=\"You can show or hide reward in a specific article throuth reward: true | false in Front-matter.\"></a>You can show or hide reward in a specific article throuth <code>reward: true | false</code> in Front-matter.</h1><p>  enable: true<br>  animation: true</p>\n<p>  #comment: Donate comment here.</p>\n<p>reward:</p>\n<p>  #wechatpay: /images/wechatpay.png</p>\n<p>  #alipay: /images/alipay.png</p>\n<p>  #bitcoin: /images/bitcoin.png` </p>\n<h3 id=\"百度SEO\"><a href=\"#百度SEO\" class=\"headerlink\" title=\"百度SEO\"></a>百度SEO</h3><p>在主题配置工具中，查找baidu_push并更改为true：</p>\n<p><code># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.\nbaidu_push: true</code> </p>\n<h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>在<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fmtj.baidu.com%2Fweb%2Fwelcome%2Flogin\" target=\"_blank\" rel=\"noopener\">百度统计</a>中注册账号并获取app_id，然后在主题配置文件中查找Baidu Analytics，粘贴到对应位置。</p>\n<p><code># Baidu Analytics\nbaidu_analytics:  # &lt;app_id&gt;</code> </p>\n<h3 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h3><p>在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。<br>修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。<br>需添加的代码：</p>\n<p><code>posts.data = posts.data.sort(function(a, b) {\n    if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top &amp;&amp; b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});</code> </p>\n<p>修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。<br>以下是最终的generator.js内容</p>\n<p><code>&#39;use strict&#39;;\nvar pagination = require(&#39;hexo-pagination&#39;);\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top &amp;&amp; b.top) {\n            if(a.top == b.top) return b.date - a.date;\n            else return b.top - a.top;\n        }\n        else if(a.top &amp;&amp; !b.top) {\n            return -1;\n        }\n        else if(!a.top &amp;&amp; b.top) {\n            return 1;\n        }\n        else return b.date - a.date;\n    });\n  var paginationDir = config.pagination_dir || &#39;page&#39;;\n  return pagination(&#39;&#39;, posts, {\n    perPage: config.index_generator.per_page,\n    layout: [&#39;index&#39;, &#39;archive&#39;],\n    format: paginationDir + &#39;/%d/&#39;,\n    data: {\n      __index: true\n    }\n  });\n};</code> </p>\n<p>设置置顶标志<br>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<div class=\"post-meta\">标签下，插入如下代码：</div></p>\n<p> <code></code> </p>\n<p>我没有修改color而是修改了font size = 2，使得和其他字体大小统一。</p>\n<p>作者：sunfove<br>转载链接：<a href=\"https://www.jianshu.com/p/b9f96b992b68\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b9f96b992b68</a></p>\n"},{"title":"Hexo + GitHub Pages 搭建博客的教程","author":"知识铺","date":"2019-11-03T04:22:27.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \n**转载[http://www.cnblogs.com/bxm0927/p/6927340.html](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html)** \n\n**大概流程：**\n\n1\\. 搭建 Node.js 环境\n\n2\\. 搭建 Git 环境\n\n3\\. GitHub 注册和配置\n\n4\\. 安装配置 Hexo\n\n5\\. 关联 Hexo 与 GitHub Pages\n\n6\\. GitHub Pages 地址解析到个人域名\n\n7\\. Hexo 的常用操作\n\n8\\. 结束语\n\n[搭建 Node.js 环境](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#nodejs)\n\n为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的\n\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。\n\n在 Node.js 官网：[https://nodejs.org/en/](https://link.jianshu.com?t=https://nodejs.org/en/)下载安装包v6.10.3 LTS\n\n保持默认设置即可，一路Next，安装很快就结束了。\n\n然后打开命令提示符，输入node -v、npm -v，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！\n\n ![](//upload-images.jianshu.io/upload_images/7643792-098cdf07aa42ce18.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/697/format/webp)\n\n[搭建 Git 环境](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#git)\n\n为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。\n\nGit 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n在 Git 官网：[https://git-scm.com/](https://link.jianshu.com?t=https://git-scm.com/)下载安装包Git-2.13.0-64-bit.exe\n\n ![](//upload-images.jianshu.io/upload_images/7643792-5f030dd5d67cc035.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/500/format/webp)\n\n桌面右键，打开Git Bush Here，输入git --version，出现版本号则说明 Git 环境配置成功，第二步完成！！！\n\n ![](//upload-images.jianshu.io/upload_images/7643792-69a40a8f03ebb23c.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/921/format/webp)\n\n[GitHub 注册和配置](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github)\n\nGitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。\n\nGithub注册：[https://github.com/](https://link.jianshu.com?t=https://github.com/)\n\n创建仓库：Repository name 使用自己的用户名，仓库名规则：\n\n**注意**：yourname必须是你的用户名。\n\nyourname/yourname.github.io\n\n ![](//upload-images.jianshu.io/upload_images/7643792-a4aa0f3b6806998f.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/900/format/webp)\n\n访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。\n\n到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作\n\n[安装配置 Hexo](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo)\n\nHexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n强烈建议你花20分钟区读一读 Hexo 的官方文档：[https://hexo.io/zh-cn/](https://link.jianshu.com?t=https://hexo.io/zh-cn/)\n\n ![](//upload-images.jianshu.io/upload_images/7643792-ca813efea8ee1a1b.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/908/format/webp)\n\n**使用 npm 安装 Hexo**：在命令行中输入\n\nnpm install hexo-cli -g\n\n然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-cd2b921e0eec4e7e.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/446/format/webp)\n\n查看Hexo的版本\n\nhexo version\n\n ![](//upload-images.jianshu.io/upload_images/7643792-54d7284db33fe788.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/595/format/webp)\n\n安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。\n\nhexo init bxm0927.github.io\n\ncd bxm0927.github.io\n\nnpm install\n\n新建完成后，指定文件夹的目录如下：\n\n.\n\n├── .deploy        #需要部署的文件\n\n├── node_modules    #Hexo插件\n\n├── public          #生成的静态网页文件\n\n├── scaffolds      #模板\n\n├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里\n\n| ├── _drafts      #草稿\n\n| └── _posts        #文章\n\n├── themes          #主题\n\n├── _config.yml    #全局配置文件\n\n└── package.json    #npm 依赖等\n\n**运行本地 Hexo 服务**\n\nhexo server\n\n或者\n\nhexo s\n\n您的网站会在[http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000/)下启动。如果[http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000/)能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-aa36ff1083e957b9.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/597/format/webp)\n\n**注意1**：执行hexo server提示找不到该指令\n\n解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n\nsudo npm install hexo-server\n\n或者\n\nnpm install hexo -server --save\n\n[关联 Hexo 与 GitHub Pages](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo-github-pages)\n\n我们如何让本地git项目与远程的github建立联系呢？用 SSH keys\n\n**生成SSH keys**\n\n输入你自己的邮箱地址\n\nssh-keygen -t rsa -C \"80583600@qq.com\"\n\n在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。\n\n**添加 SSH Key 到 GitHub**\n\n打开C:\\Users\\bxm09\\.ssh\\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到[https://github.com/settings/ssh](https://link.jianshu.com?t=https://github.com/settings/ssh)的new SSH key中\n\n**测试**\n\n可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：\n\nssh -T git@github.com\n\n如果是下面的反馈：\n\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\n\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n\nAre you sure you want to continue connecting (yes/no)?\n\n不要紧张，输入yes就好，然后会看到：\n\nHi aierui! You've successfully authenticated, but GitHub does not provide shell access.\n\n**配置Git个人信息**\n\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\n\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。\n\ngit config --global user.name \"bxm0927\"\n\ngit config --global user.email \"80583600@qq.com\"\n\n**配置 Deployment**\n\n在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：\n\n需要注意的是：冒号后面记得空一格！\n\n# Deployment\n\n## Docs: https://hexo.io/docs/deployment.html\n\ndeploy:\n\ntype: git\n\nrepo: git@github.com:bxm0927/bxm0927.github.io.git\n\nbranch: master\n\n**本地文件提交到 GitHub Pages**\n\n// 删除旧的 public 文件\n\nhexo clean\n\n// 生成新的 public 文件\n\nhexo generate\n\n或者\n\nhexo g\n\n// 开始部署\n\nhexo deploye\n\n或者\n\nhexo d\n\n在浏览器中输入[https://bxm0927.github.io](https://link.jianshu.com?t=https://bxm0927.github.io/)（用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~\n\n**注意1**：若上面操作失败，则需要提前安装一个扩展：\n\nnpm install hexo-deployer-git --save\n\n**注意2**：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。\n\nPermission denied (publickey).\n\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\n\nand the repository exists.\n\n**注意3**：怎么避免 .md 文件被解析？\n\nHexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？\n\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n\n[GitHub Pages 地址解析到个人域名](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github-pages)\n\nGithub Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。\n\n看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。\n\n进行该绑定过程，其实就是一个重定向的过程。\n\n在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://\n\nwww.lovebxm.com\n\n注意：CNAME 一定是在你 Github 项目的 master 根目录下\n\n进入[阿里云域名解析地](https://link.jianshu.com?t=https://dc.aliyun.com/tcparse/dns.htm)址，添加解析：\n\n记录类型选择CNAME\n\n主机记录填www\n\n解析线路选择默认\n\n记录值填yourname.github.io\n\nTTL值为10分钟\n\n再添加一个解析，记录类型A\n\n主机记录填www\n\n解析线路选择默认\n\n记录值填你GitHub 的ip地址（在cmd中ping：）\n\nping bxm0927.github.com\n\n ![](//upload-images.jianshu.io/upload_images/7643792-6e1f8982bf8b3182.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/767/format/webp)\n\n点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。\n\n域名绑定成功，域名解析成功，因此你在浏览中输入[www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com/)，或 lovebxm.com 就可以访问到博客了，输入 bxm0927.github.io 会重定向到[www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com/)。过程：www 的方式，会先解析成[http://xxxx.github.io](https://link.jianshu.com?t=http://xxxx.github.io/)，然后根据 CNAME 再变成 www\n\n**注意**：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐\n\n方法一：每次hexo d之后，就去 GitHub 仓库根目录新建 CNAME文件\n\n方法二：在hexo g之后，hexo d之前，把CNAME文件复制到 “\\public\" 目录下面，里面写入你要绑定的域名。\n\n方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。\n\n方法四：通过安装插件实现永久保留\n\n$ npm install hexo-generator-cname --save\n\n之后在_config.yml中添加一条\n\nplugins:\n\n- hexo-generator-cname\n\n需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。\n\n**注意1**：每次生成的 CNAME 都是 yoursite.com 怎么解决？\n\n修改 _config.yml\n\nurl: http://www.lovebxm.com\n\nroot: /\n\npermalink: :year/:month/:day/:title/\n\npermalink_defaults:\n\n[Hexo 的常用操作](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo_1)\n\n[发表一篇文章](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_1)\n\nhexo new \"文章标题\"\n\nD:\\GitHub\\Hexo\\test>hexo new \"文章标题\"\n\nINFO  Created: D:\\GitHub\\Hexo\\test\\source\\_posts\\文章标题.md\n\n在本地博客文件夹source\\_posts文件夹下看到我们新建的 markdown 文件。\n\n当然，我们也可以手动添加Markdown文件在source->_deploy文件夹下，其效果同样可以媲美hexo new\n\n文章编辑好之后，运行生成、部署命令：\n\nhexo clean\n\nhexo g\n\nhexo d\n\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n\nhexo clean\n\nhexo d -g\n\n[新建一个自定义页面](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_2)\n\nhexo new page folder\n\n[文章如何添加多个标签](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_3)\n\n有两种多标签格式\n\ntags: [a, b, c]\n\n或\n\ntags:\n\n- a\n\n- b\n\n- c\n\n[显示部分文章内容](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_4)\n\n如果在博客文章列表中，不想全文显示，可以增加, 后面的内容就不会显示在列表。\n\n[更改主题](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_5)\n\n官方主题库：[https://hexo.io/themes/](https://link.jianshu.com?t=https://hexo.io/themes/)\n\nHexo主题非常，推荐使用Next为主题，请阅读 Next 的官方文档（[http://theme-next.iissnan.com/](https://link.jianshu.com?t=http://theme-next.iissnan.com/)），5 分钟快速安装。\n\n再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。\n\n[添加插件](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_6)\n\n添加 sitemap 和 feed 插件\n\n切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令\n\nnpm install hexo-generator-feed -save\n\nnpm install hexo-generator-sitemap -save\n\n修改_config.yml，增加以下内容\n\n# Extensions\n\nPlugins:\n\n- hexo-generator-feed\n\n- hexo-generator-sitemap\n\n#Feed Atom\n\nfeed:\n\ntype: atom\n\npath: atom.xml\n\nlimit: 20\n\n#sitemap\n\nsitemap:\n\npath: sitemap.xml\n\n再执行以下命令，部署服务端\n\nhexo d -g\n\n配完之后，就可以访问[https://bxm0927.github.io/atom.xml](https://link.jianshu.com?t=https://bxm0927.github.io/atom.xml)和[https://bxm0927.github.io/sitemap.xml](https://link.jianshu.com?t=https://bxm0927.github.io/sitemap.xml)，发现这两个文件已经成功生成了。\n\n[添加 404 页面](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#404)\n\nGitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-3f00253127be7f92.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/667/format/webp)\n\n其实，404页面可以做更多有意义的事，来做个404公益项目吧。\n\n推荐使用腾讯公益404[http://www.qq.com/404/](https://link.jianshu.com?t=http://www.qq.com/404/)：\n\nsrc=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"\n\ncharset=\"utf-8\"\n\nhomePageUrl=\"http://www.lovebxm.com/\"\n\nhomePageName=\"回到我的主页\">\n\n复制上面代码，贴粘到目录下新建的404.html即可！\n\n[多PC同步管理博客](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#pc)\n\n很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。\n\nA电脑备份博客内容到github\n\n配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public\n\n初始化仓库。\n\n在博客根目录下，在git bash下依次执行git init和git remote add origin 为远程仓库地址。\n\n同步到远程仓库。\n\ngitbash下依次执行以下命令\n\ngit add . #添加目录下所有文件\n\ngit commit -m \"更新说明\" #提交并添加更新说明\n\ngit push -u origin master #推送更新到远程仓库\n\nB电脑拉下远程仓库文件\n\n在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：\n\ngit init\n\ngit remote add origin\n\ngit fetch --all\n\ngit reset --hard origin/master\n\n发布博客后同步\n\n在B电脑发布完博客之后，记得将博客备份同步到远程仓库\n\n执行以下命令：\n\ngit add .\n\n#可以用git master 查看更改内容\n\ngit commit -m \"更新信息\"\n\ngit push -u origin master  #以后每次提交可以直接git push\n\n平时同步管理\n\n每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。\n\n[中文乱码](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_7)\n\n在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为UTF-8编码的文件即可解决问题。\n\n[结束语](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_8)\n\n建站的系统有很多，如：\n\n-[Hexo + GitHub Pages](https://link.jianshu.com?t=https://hexo.io/zh-cn/)\n\n-[Jekyll + GitHub Pages](https://link.jianshu.com?t=http://jekyll.com.cn/)\n\n-[WordPress + 服务器 + 域名](https://link.jianshu.com?t=https://cn.wordpress.org/)\n\n-[DeDeCMS + 服务器 + 域名](https://link.jianshu.com?t=http://www.dedecms.com/)\n\n- …\n\n使用 Hexo + GitHub Pages 建站，有优点也有缺点：\n\n- GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。\n\n- 但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。\n\n- 个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的[网易云跟帖](https://link.jianshu.com?t=https://gentie.163.com/info.html)就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。\n\n- 通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！\n\n推荐几个很好用的在线 Markdown 编辑器：\n\n- 作业部落：[https://www.zybuluo.com/mdeditor](https://link.jianshu.com?t=https://www.zybuluo.com/mdeditor)\n\n- 马克飞象：[https://maxiang.io](https://link.jianshu.com?t=https://maxiang.io/)\n\n推荐图床：\n\n-[极简图床 + chrome 插件 + 七牛空间](https://link.jianshu.com?t=https://jiantuku.com/#/)，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。","source":"_posts/hexo主题之hexo-theme-yilia-plus.md","raw":"title: Hexo + GitHub Pages 搭建博客的教程\nauthor: 知识铺\ndate: 2019-11-03 12:22:27\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。   \n**转载[http://www.cnblogs.com/bxm0927/p/6927340.html](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html)** \n\n**大概流程：**\n\n1\\. 搭建 Node.js 环境\n\n2\\. 搭建 Git 环境\n\n3\\. GitHub 注册和配置\n\n4\\. 安装配置 Hexo\n\n5\\. 关联 Hexo 与 GitHub Pages\n\n6\\. GitHub Pages 地址解析到个人域名\n\n7\\. Hexo 的常用操作\n\n8\\. 结束语\n\n[搭建 Node.js 环境](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#nodejs)\n\n为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的\n\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。\n\n在 Node.js 官网：[https://nodejs.org/en/](https://link.jianshu.com?t=https://nodejs.org/en/)下载安装包v6.10.3 LTS\n\n保持默认设置即可，一路Next，安装很快就结束了。\n\n然后打开命令提示符，输入node -v、npm -v，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！\n\n ![](//upload-images.jianshu.io/upload_images/7643792-098cdf07aa42ce18.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/697/format/webp)\n\n[搭建 Git 环境](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#git)\n\n为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。\n\nGit 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n在 Git 官网：[https://git-scm.com/](https://link.jianshu.com?t=https://git-scm.com/)下载安装包Git-2.13.0-64-bit.exe\n\n ![](//upload-images.jianshu.io/upload_images/7643792-5f030dd5d67cc035.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/500/format/webp)\n\n桌面右键，打开Git Bush Here，输入git --version，出现版本号则说明 Git 环境配置成功，第二步完成！！！\n\n ![](//upload-images.jianshu.io/upload_images/7643792-69a40a8f03ebb23c.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/921/format/webp)\n\n[GitHub 注册和配置](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github)\n\nGitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。\n\nGithub注册：[https://github.com/](https://link.jianshu.com?t=https://github.com/)\n\n创建仓库：Repository name 使用自己的用户名，仓库名规则：\n\n**注意**：yourname必须是你的用户名。\n\nyourname/yourname.github.io\n\n ![](//upload-images.jianshu.io/upload_images/7643792-a4aa0f3b6806998f.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/900/format/webp)\n\n访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。\n\n到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作\n\n[安装配置 Hexo](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo)\n\nHexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n强烈建议你花20分钟区读一读 Hexo 的官方文档：[https://hexo.io/zh-cn/](https://link.jianshu.com?t=https://hexo.io/zh-cn/)\n\n ![](//upload-images.jianshu.io/upload_images/7643792-ca813efea8ee1a1b.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/908/format/webp)\n\n**使用 npm 安装 Hexo**：在命令行中输入\n\nnpm install hexo-cli -g\n\n然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-cd2b921e0eec4e7e.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/446/format/webp)\n\n查看Hexo的版本\n\nhexo version\n\n ![](//upload-images.jianshu.io/upload_images/7643792-54d7284db33fe788.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/595/format/webp)\n\n安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。\n\nhexo init bxm0927.github.io\n\ncd bxm0927.github.io\n\nnpm install\n\n新建完成后，指定文件夹的目录如下：\n\n.\n\n├── .deploy        #需要部署的文件\n\n├── node_modules    #Hexo插件\n\n├── public          #生成的静态网页文件\n\n├── scaffolds      #模板\n\n├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里\n\n| ├── _drafts      #草稿\n\n| └── _posts        #文章\n\n├── themes          #主题\n\n├── _config.yml    #全局配置文件\n\n└── package.json    #npm 依赖等\n\n**运行本地 Hexo 服务**\n\nhexo server\n\n或者\n\nhexo s\n\n您的网站会在[http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000/)下启动。如果[http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000/)能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-aa36ff1083e957b9.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/597/format/webp)\n\n**注意1**：执行hexo server提示找不到该指令\n\n解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n\nsudo npm install hexo-server\n\n或者\n\nnpm install hexo -server --save\n\n[关联 Hexo 与 GitHub Pages](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo-github-pages)\n\n我们如何让本地git项目与远程的github建立联系呢？用 SSH keys\n\n**生成SSH keys**\n\n输入你自己的邮箱地址\n\nssh-keygen -t rsa -C \"80583600@qq.com\"\n\n在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。\n\n**添加 SSH Key 到 GitHub**\n\n打开C:\\Users\\bxm09\\.ssh\\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到[https://github.com/settings/ssh](https://link.jianshu.com?t=https://github.com/settings/ssh)的new SSH key中\n\n**测试**\n\n可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：\n\nssh -T git@github.com\n\n如果是下面的反馈：\n\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\n\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n\nAre you sure you want to continue connecting (yes/no)?\n\n不要紧张，输入yes就好，然后会看到：\n\nHi aierui! You've successfully authenticated, but GitHub does not provide shell access.\n\n**配置Git个人信息**\n\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\n\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。\n\ngit config --global user.name \"bxm0927\"\n\ngit config --global user.email \"80583600@qq.com\"\n\n**配置 Deployment**\n\n在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：\n\n需要注意的是：冒号后面记得空一格！\n\n# Deployment\n\n## Docs: https://hexo.io/docs/deployment.html\n\ndeploy:\n\ntype: git\n\nrepo: git@github.com:bxm0927/bxm0927.github.io.git\n\nbranch: master\n\n**本地文件提交到 GitHub Pages**\n\n// 删除旧的 public 文件\n\nhexo clean\n\n// 生成新的 public 文件\n\nhexo generate\n\n或者\n\nhexo g\n\n// 开始部署\n\nhexo deploye\n\n或者\n\nhexo d\n\n在浏览器中输入[https://bxm0927.github.io](https://link.jianshu.com?t=https://bxm0927.github.io/)（用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~\n\n**注意1**：若上面操作失败，则需要提前安装一个扩展：\n\nnpm install hexo-deployer-git --save\n\n**注意2**：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。\n\nPermission denied (publickey).\n\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\n\nand the repository exists.\n\n**注意3**：怎么避免 .md 文件被解析？\n\nHexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？\n\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n\n[GitHub Pages 地址解析到个人域名](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github-pages)\n\nGithub Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。\n\n看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。\n\n进行该绑定过程，其实就是一个重定向的过程。\n\n在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://\n\nwww.lovebxm.com\n\n注意：CNAME 一定是在你 Github 项目的 master 根目录下\n\n进入[阿里云域名解析地](https://link.jianshu.com?t=https://dc.aliyun.com/tcparse/dns.htm)址，添加解析：\n\n记录类型选择CNAME\n\n主机记录填www\n\n解析线路选择默认\n\n记录值填yourname.github.io\n\nTTL值为10分钟\n\n再添加一个解析，记录类型A\n\n主机记录填www\n\n解析线路选择默认\n\n记录值填你GitHub 的ip地址（在cmd中ping：）\n\nping bxm0927.github.com\n\n ![](//upload-images.jianshu.io/upload_images/7643792-6e1f8982bf8b3182.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/767/format/webp)\n\n点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。\n\n域名绑定成功，域名解析成功，因此你在浏览中输入[www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com/)，或 lovebxm.com 就可以访问到博客了，输入 bxm0927.github.io 会重定向到[www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com/)。过程：www 的方式，会先解析成[http://xxxx.github.io](https://link.jianshu.com?t=http://xxxx.github.io/)，然后根据 CNAME 再变成 www\n\n**注意**：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐\n\n方法一：每次hexo d之后，就去 GitHub 仓库根目录新建 CNAME文件\n\n方法二：在hexo g之后，hexo d之前，把CNAME文件复制到 “\\public\" 目录下面，里面写入你要绑定的域名。\n\n方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。\n\n方法四：通过安装插件实现永久保留\n\n$ npm install hexo-generator-cname --save\n\n之后在_config.yml中添加一条\n\nplugins:\n\n- hexo-generator-cname\n\n需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。\n\n**注意1**：每次生成的 CNAME 都是 yoursite.com 怎么解决？\n\n修改 _config.yml\n\nurl: http://www.lovebxm.com\n\nroot: /\n\npermalink: :year/:month/:day/:title/\n\npermalink_defaults:\n\n[Hexo 的常用操作](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo_1)\n\n[发表一篇文章](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_1)\n\nhexo new \"文章标题\"\n\nD:\\GitHub\\Hexo\\test>hexo new \"文章标题\"\n\nINFO  Created: D:\\GitHub\\Hexo\\test\\source\\_posts\\文章标题.md\n\n在本地博客文件夹source\\_posts文件夹下看到我们新建的 markdown 文件。\n\n当然，我们也可以手动添加Markdown文件在source->_deploy文件夹下，其效果同样可以媲美hexo new\n\n文章编辑好之后，运行生成、部署命令：\n\nhexo clean\n\nhexo g\n\nhexo d\n\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n\nhexo clean\n\nhexo d -g\n\n[新建一个自定义页面](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_2)\n\nhexo new page folder\n\n[文章如何添加多个标签](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_3)\n\n有两种多标签格式\n\ntags: [a, b, c]\n\n或\n\ntags:\n\n- a\n\n- b\n\n- c\n\n[显示部分文章内容](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_4)\n\n如果在博客文章列表中，不想全文显示，可以增加, 后面的内容就不会显示在列表。\n\n[更改主题](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_5)\n\n官方主题库：[https://hexo.io/themes/](https://link.jianshu.com?t=https://hexo.io/themes/)\n\nHexo主题非常，推荐使用Next为主题，请阅读 Next 的官方文档（[http://theme-next.iissnan.com/](https://link.jianshu.com?t=http://theme-next.iissnan.com/)），5 分钟快速安装。\n\n再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。\n\n[添加插件](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_6)\n\n添加 sitemap 和 feed 插件\n\n切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令\n\nnpm install hexo-generator-feed -save\n\nnpm install hexo-generator-sitemap -save\n\n修改_config.yml，增加以下内容\n\n# Extensions\n\nPlugins:\n\n- hexo-generator-feed\n\n- hexo-generator-sitemap\n\n#Feed Atom\n\nfeed:\n\ntype: atom\n\npath: atom.xml\n\nlimit: 20\n\n#sitemap\n\nsitemap:\n\npath: sitemap.xml\n\n再执行以下命令，部署服务端\n\nhexo d -g\n\n配完之后，就可以访问[https://bxm0927.github.io/atom.xml](https://link.jianshu.com?t=https://bxm0927.github.io/atom.xml)和[https://bxm0927.github.io/sitemap.xml](https://link.jianshu.com?t=https://bxm0927.github.io/sitemap.xml)，发现这两个文件已经成功生成了。\n\n[添加 404 页面](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#404)\n\nGitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。\n\n ![](//upload-images.jianshu.io/upload_images/7643792-3f00253127be7f92.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/667/format/webp)\n\n其实，404页面可以做更多有意义的事，来做个404公益项目吧。\n\n推荐使用腾讯公益404[http://www.qq.com/404/](https://link.jianshu.com?t=http://www.qq.com/404/)：\n\nsrc=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"\n\ncharset=\"utf-8\"\n\nhomePageUrl=\"http://www.lovebxm.com/\"\n\nhomePageName=\"回到我的主页\">\n\n复制上面代码，贴粘到目录下新建的404.html即可！\n\n[多PC同步管理博客](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#pc)\n\n很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。\n\nA电脑备份博客内容到github\n\n配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public\n\n初始化仓库。\n\n在博客根目录下，在git bash下依次执行git init和git remote add origin 为远程仓库地址。\n\n同步到远程仓库。\n\ngitbash下依次执行以下命令\n\ngit add . #添加目录下所有文件\n\ngit commit -m \"更新说明\" #提交并添加更新说明\n\ngit push -u origin master #推送更新到远程仓库\n\nB电脑拉下远程仓库文件\n\n在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：\n\ngit init\n\ngit remote add origin\n\ngit fetch --all\n\ngit reset --hard origin/master\n\n发布博客后同步\n\n在B电脑发布完博客之后，记得将博客备份同步到远程仓库\n\n执行以下命令：\n\ngit add .\n\n#可以用git master 查看更改内容\n\ngit commit -m \"更新信息\"\n\ngit push -u origin master  #以后每次提交可以直接git push\n\n平时同步管理\n\n每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。\n\n[中文乱码](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_7)\n\n在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为UTF-8编码的文件即可解决问题。\n\n[结束语](https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_8)\n\n建站的系统有很多，如：\n\n-[Hexo + GitHub Pages](https://link.jianshu.com?t=https://hexo.io/zh-cn/)\n\n-[Jekyll + GitHub Pages](https://link.jianshu.com?t=http://jekyll.com.cn/)\n\n-[WordPress + 服务器 + 域名](https://link.jianshu.com?t=https://cn.wordpress.org/)\n\n-[DeDeCMS + 服务器 + 域名](https://link.jianshu.com?t=http://www.dedecms.com/)\n\n- …\n\n使用 Hexo + GitHub Pages 建站，有优点也有缺点：\n\n- GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。\n\n- 但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。\n\n- 个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的[网易云跟帖](https://link.jianshu.com?t=https://gentie.163.com/info.html)就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。\n\n- 通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！\n\n推荐几个很好用的在线 Markdown 编辑器：\n\n- 作业部落：[https://www.zybuluo.com/mdeditor](https://link.jianshu.com?t=https://www.zybuluo.com/mdeditor)\n\n- 马克飞象：[https://maxiang.io](https://link.jianshu.com?t=https://maxiang.io/)\n\n推荐图床：\n\n-[极简图床 + chrome 插件 + 七牛空间](https://link.jianshu.com?t=https://jiantuku.com/#/)，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。","slug":"hexo主题之hexo-theme-yilia-plus","published":1,"updated":"2019-11-03T08:59:53.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwghe0006okdmzw1m58zm","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br><strong>转载<a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bxm0927/p/6927340.html</a></strong> </p>\n<p><strong>大概流程：</strong></p>\n<p>1. 搭建 Node.js 环境</p>\n<p>2. 搭建 Git 环境</p>\n<p>3. GitHub 注册和配置</p>\n<p>4. 安装配置 Hexo</p>\n<p>5. 关联 Hexo 与 GitHub Pages</p>\n<p>6. GitHub Pages 地址解析到个人域名</p>\n<p>7. Hexo 的常用操作</p>\n<p>8. 结束语</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#nodejs\" target=\"_blank\" rel=\"noopener\">搭建 Node.js 环境</a></p>\n<p>为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的</p>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>\n<p>在 Node.js 官网：<a href=\"https://link.jianshu.com?t=https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a>下载安装包v6.10.3 LTS</p>\n<p>保持默认设置即可，一路Next，安装很快就结束了。</p>\n<p>然后打开命令提示符，输入node -v、npm -v，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-098cdf07aa42ce18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/697/format/webp\" alt></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#git\" target=\"_blank\" rel=\"noopener\">搭建 Git 环境</a></p>\n<p>为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。</p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>在 Git 官网：<a href=\"https://link.jianshu.com?t=https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a>下载安装包Git-2.13.0-64-bit.exe</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-5f030dd5d67cc035.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp\" alt></p>\n<p>桌面右键，打开Git Bush Here，输入git –version，出现版本号则说明 Git 环境配置成功，第二步完成！！！</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-69a40a8f03ebb23c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/921/format/webp\" alt></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github\" target=\"_blank\" rel=\"noopener\">GitHub 注册和配置</a></p>\n<p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p>Github注册：<a href=\"https://link.jianshu.com?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p>创建仓库：Repository name 使用自己的用户名，仓库名规则：</p>\n<p><strong>注意</strong>：yourname必须是你的用户名。</p>\n<p>yourname/yourname.github.io</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-a4aa0f3b6806998f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp\" alt></p>\n<p>访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。</p>\n<p>到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo\" target=\"_blank\" rel=\"noopener\">安装配置 Hexo</a></p>\n<p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href=\"https://link.jianshu.com?t=https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-ca813efea8ee1a1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/908/format/webp\" alt></p>\n<p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>\n<p>npm install hexo-cli -g</p>\n<p>然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-cd2b921e0eec4e7e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/446/format/webp\" alt></p>\n<p>查看Hexo的版本</p>\n<p>hexo version</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-54d7284db33fe788.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/595/format/webp\" alt></p>\n<p>安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<p>hexo init bxm0927.github.io</p>\n<p>cd bxm0927.github.io</p>\n<p>npm install</p>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<p>.</p>\n<p>├── .deploy        #需要部署的文件</p>\n<p>├── node_modules    #Hexo插件</p>\n<p>├── public          #生成的静态网页文件</p>\n<p>├── scaffolds      #模板</p>\n<p>├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</p>\n<p>| ├── _drafts      #草稿</p>\n<p>| └── _posts        #文章</p>\n<p>├── themes          #主题</p>\n<p>├── _config.yml    #全局配置文件</p>\n<p>└── package.json    #npm 依赖等</p>\n<p><strong>运行本地 Hexo 服务</strong></p>\n<p>hexo server</p>\n<p>或者</p>\n<p>hexo s</p>\n<p>您的网站会在<a href=\"https://link.jianshu.com?t=http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>下启动。如果<a href=\"https://link.jianshu.com?t=http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-aa36ff1083e957b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/597/format/webp\" alt></p>\n<p><strong>注意1</strong>：执行hexo server提示找不到该指令</p>\n<p>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p>\n<p>sudo npm install hexo-server</p>\n<p>或者</p>\n<p>npm install hexo -server –save</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo-github-pages\" target=\"_blank\" rel=\"noopener\">关联 Hexo 与 GitHub Pages</a></p>\n<p>我们如何让本地git项目与远程的github建立联系呢？用 SSH keys</p>\n<p><strong>生成SSH keys</strong></p>\n<p>输入你自己的邮箱地址</p>\n<p>ssh-keygen -t rsa -C “<a href=\"mailto:80583600@qq.com\" target=\"_blank\" rel=\"noopener\">80583600@qq.com</a>“</p>\n<p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p>\n<p><strong>添加 SSH Key 到 GitHub</strong></p>\n<p>打开C:\\Users\\bxm09.ssh\\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href=\"https://link.jianshu.com?t=https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a>的new SSH key中</p>\n<p><strong>测试</strong></p>\n<p>可以输入下面的命令，看看设置是否成功，<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>的部分不要修改：</p>\n<p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<p>如果是下面的反馈：</p>\n<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</p>\n<p>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</p>\n<p>Are you sure you want to continue connecting (yes/no)?</p>\n<p>不要紧张，输入yes就好，然后会看到：</p>\n<p>Hi aierui! You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n<p><strong>配置Git个人信息</strong></p>\n<p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p>\n<p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>\n<p>git config –global user.name “bxm0927”</p>\n<p>git config –global user.email “<a href=\"mailto:80583600@qq.com\" target=\"_blank\" rel=\"noopener\">80583600@qq.com</a>“</p>\n<p><strong>配置 Deployment</strong></p>\n<p>在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：</p>\n<p>需要注意的是：冒号后面记得空一格！</p>\n<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"Docs-https-hexo-io-docs-deployment-html\"><a href=\"#Docs-https-hexo-io-docs-deployment-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/deployment.html\"></a>Docs: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></h2><p>deploy:</p>\n<p>type: git</p>\n<p>repo: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:bxm0927/bxm0927.github.io.git</p>\n<p>branch: master</p>\n<p><strong>本地文件提交到 GitHub Pages</strong></p>\n<p>// 删除旧的 public 文件</p>\n<p>hexo clean</p>\n<p>// 生成新的 public 文件</p>\n<p>hexo generate</p>\n<p>或者</p>\n<p>hexo g</p>\n<p>// 开始部署</p>\n<p>hexo deploye</p>\n<p>或者</p>\n<p>hexo d</p>\n<p>在浏览器中输入<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io</a>（用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~</p>\n<p><strong>注意1</strong>：若上面操作失败，则需要提前安装一个扩展：</p>\n<p>npm install hexo-deployer-git –save</p>\n<p><strong>注意2</strong>：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。</p>\n<p>Permission denied (publickey).</p>\n<p>fatal: Could not read from remote repository.</p>\n<p>Please make sure you have the correct access rights</p>\n<p>and the repository exists.</p>\n<p><strong>注意3</strong>：怎么避免 .md 文件被解析？</p>\n<p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？</p>\n<p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github-pages\" target=\"_blank\" rel=\"noopener\">GitHub Pages 地址解析到个人域名</a></p>\n<p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。</p>\n<p>看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。</p>\n<p>进行该绑定过程，其实就是一个重定向的过程。</p>\n<p>在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://</p>\n<p><a href=\"http://www.lovebxm.com\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a></p>\n<p>注意：CNAME 一定是在你 Github 项目的 master 根目录下</p>\n<p>进入<a href=\"https://link.jianshu.com?t=https://dc.aliyun.com/tcparse/dns.htm\" target=\"_blank\" rel=\"noopener\">阿里云域名解析地</a>址，添加解析：</p>\n<p>记录类型选择CNAME</p>\n<p>主机记录填www</p>\n<p>解析线路选择默认</p>\n<p>记录值填yourname.github.io</p>\n<p>TTL值为10分钟</p>\n<p>再添加一个解析，记录类型A</p>\n<p>主机记录填www</p>\n<p>解析线路选择默认</p>\n<p>记录值填你GitHub 的ip地址（在cmd中ping：）</p>\n<p>ping bxm0927.github.com</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-6e1f8982bf8b3182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp\" alt></p>\n<p>点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。</p>\n<p>域名绑定成功，域名解析成功，因此你在浏览中输入<a href=\"https://link.jianshu.com?t=http://www.lovebxm.com/\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a>，或 lovebxm.com 就可以访问到博客了，输入 bxm0927.github.io 会重定向到<a href=\"https://link.jianshu.com?t=http://www.lovebxm.com/\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a>。过程：www 的方式，会先解析成<a href=\"https://link.jianshu.com?t=http://xxxx.github.io/\" target=\"_blank\" rel=\"noopener\">http://xxxx.github.io</a>，然后根据 CNAME 再变成 www</p>\n<p><strong>注意</strong>：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐</p>\n<p>方法一：每次hexo d之后，就去 GitHub 仓库根目录新建 CNAME文件</p>\n<p>方法二：在hexo g之后，hexo d之前，把CNAME文件复制到 “\\public” 目录下面，里面写入你要绑定的域名。</p>\n<p>方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。</p>\n<p>方法四：通过安装插件实现永久保留</p>\n<p>$ npm install hexo-generator-cname –save</p>\n<p>之后在_config.yml中添加一条</p>\n<p>plugins:</p>\n<ul>\n<li>hexo-generator-cname</li>\n</ul>\n<p>需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。</p>\n<p><strong>注意1</strong>：每次生成的 CNAME 都是 yoursite.com 怎么解决？</p>\n<p>修改 _config.yml</p>\n<p>url: <a href=\"http://www.lovebxm.com\" target=\"_blank\" rel=\"noopener\">http://www.lovebxm.com</a></p>\n<p>root: /</p>\n<p>permalink: :year/:month/:day/:title/</p>\n<p>permalink_defaults:</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo_1\" target=\"_blank\" rel=\"noopener\">Hexo 的常用操作</a></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_1\" target=\"_blank\" rel=\"noopener\">发表一篇文章</a></p>\n<p>hexo new “文章标题”</p>\n<p>D:\\GitHub\\Hexo\\test&gt;hexo new “文章标题”</p>\n<p>INFO  Created: D:\\GitHub\\Hexo\\test\\source_posts\\文章标题.md</p>\n<p>在本地博客文件夹source_posts文件夹下看到我们新建的 markdown 文件。</p>\n<p>当然，我们也可以手动添加Markdown文件在source-&gt;_deploy文件夹下，其效果同样可以媲美hexo new</p>\n<p>文章编辑好之后，运行生成、部署命令：</p>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n<p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p>\n<p>hexo clean</p>\n<p>hexo d -g</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_2\" target=\"_blank\" rel=\"noopener\">新建一个自定义页面</a></p>\n<p>hexo new page folder</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_3\" target=\"_blank\" rel=\"noopener\">文章如何添加多个标签</a></p>\n<p>有两种多标签格式</p>\n<p>tags: [a, b, c]</p>\n<p>或</p>\n<p>tags:</p>\n<ul>\n<li><p>a</p>\n</li>\n<li><p>b</p>\n</li>\n<li><p>c</p>\n</li>\n</ul>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_4\" target=\"_blank\" rel=\"noopener\">显示部分文章内容</a></p>\n<p>如果在博客文章列表中，不想全文显示，可以增加, 后面的内容就不会显示在列表。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_5\" target=\"_blank\" rel=\"noopener\">更改主题</a></p>\n<p>官方主题库：<a href=\"https://link.jianshu.com?t=https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<p>Hexo主题非常，推荐使用Next为主题，请阅读 Next 的官方文档（<a href=\"https://link.jianshu.com?t=http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a>），5 分钟快速安装。</p>\n<p>再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_6\" target=\"_blank\" rel=\"noopener\">添加插件</a></p>\n<p>添加 sitemap 和 feed 插件</p>\n<p>切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令</p>\n<p>npm install hexo-generator-feed -save</p>\n<p>npm install hexo-generator-sitemap -save</p>\n<p>修改_config.yml，增加以下内容</p>\n<h1 id=\"Extensions\"><a href=\"#Extensions\" class=\"headerlink\" title=\"Extensions\"></a>Extensions</h1><p>Plugins:</p>\n<ul>\n<li><p>hexo-generator-feed</p>\n</li>\n<li><p>hexo-generator-sitemap</p>\n</li>\n</ul>\n<p>#Feed Atom</p>\n<p>feed:</p>\n<p>type: atom</p>\n<p>path: atom.xml</p>\n<p>limit: 20</p>\n<p>#sitemap</p>\n<p>sitemap:</p>\n<p>path: sitemap.xml</p>\n<p>再执行以下命令，部署服务端</p>\n<p>hexo d -g</p>\n<p>配完之后，就可以访问<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io/atom.xml</a>和<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/sitemap.xml\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io/sitemap.xml</a>，发现这两个文件已经成功生成了。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#404\" target=\"_blank\" rel=\"noopener\">添加 404 页面</a></p>\n<p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-3f00253127be7f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/667/format/webp\" alt></p>\n<p>其实，404页面可以做更多有意义的事，来做个404公益项目吧。</p>\n<p>推荐使用腾讯公益404<a href=\"https://link.jianshu.com?t=http://www.qq.com/404/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/404/</a>：</p>\n<p>src=”//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js”</p>\n<p>charset=”utf-8”</p>\n<p>homePageUrl=”<a href=\"http://www.lovebxm.com/&quot;\" target=\"_blank\" rel=\"noopener\">http://www.lovebxm.com/&quot;</a></p>\n<p>homePageName=”回到我的主页”&gt;</p>\n<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#pc\" target=\"_blank\" rel=\"noopener\">多PC同步管理博客</a></p>\n<p>很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。</p>\n<p>A电脑备份博客内容到github</p>\n<p>配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public</p>\n<p>初始化仓库。</p>\n<p>在博客根目录下，在git bash下依次执行git init和git remote add origin 为远程仓库地址。</p>\n<p>同步到远程仓库。</p>\n<p>gitbash下依次执行以下命令</p>\n<p>git add . #添加目录下所有文件</p>\n<p>git commit -m “更新说明” #提交并添加更新说明</p>\n<p>git push -u origin master #推送更新到远程仓库</p>\n<p>B电脑拉下远程仓库文件</p>\n<p>在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：</p>\n<p>git init</p>\n<p>git remote add origin</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>发布博客后同步</p>\n<p>在B电脑发布完博客之后，记得将博客备份同步到远程仓库</p>\n<p>执行以下命令：</p>\n<p>git add .</p>\n<p>#可以用git master 查看更改内容</p>\n<p>git commit -m “更新信息”</p>\n<p>git push -u origin master  #以后每次提交可以直接git push</p>\n<p>平时同步管理</p>\n<p>每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_7\" target=\"_blank\" rel=\"noopener\">中文乱码</a></p>\n<p>在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为UTF-8编码的文件即可解决问题。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_8\" target=\"_blank\" rel=\"noopener\">结束语</a></p>\n<p>建站的系统有很多，如：</p>\n<p>-<a href=\"https://link.jianshu.com?t=https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo + GitHub Pages</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=http://jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll + GitHub Pages</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=https://cn.wordpress.org/\" target=\"_blank\" rel=\"noopener\">WordPress + 服务器 + 域名</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=http://www.dedecms.com/\" target=\"_blank\" rel=\"noopener\">DeDeCMS + 服务器 + 域名</a></p>\n<ul>\n<li>…</li>\n</ul>\n<p>使用 Hexo + GitHub Pages 建站，有优点也有缺点：</p>\n<ul>\n<li><p>GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。</p>\n</li>\n<li><p>但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。</p>\n</li>\n<li><p>个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的<a href=\"https://link.jianshu.com?t=https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a>就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。</p>\n</li>\n<li><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！</p>\n</li>\n</ul>\n<p>推荐几个很好用的在线 Markdown 编辑器：</p>\n<ul>\n<li><p>作业部落：<a href=\"https://link.jianshu.com?t=https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/mdeditor</a></p>\n</li>\n<li><p>马克飞象：<a href=\"https://link.jianshu.com?t=https://maxiang.io/\" target=\"_blank\" rel=\"noopener\">https://maxiang.io</a></p>\n</li>\n</ul>\n<p>推荐图床：</p>\n<p>-<a href=\"https://link.jianshu.com?t=https://jiantuku.com/#/\" target=\"_blank\" rel=\"noopener\">极简图床 + chrome 插件 + 七牛空间</a>，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。<br><strong>转载<a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bxm0927/p/6927340.html</a></strong> </p>\n<p><strong>大概流程：</strong></p>\n<p>1. 搭建 Node.js 环境</p>\n<p>2. 搭建 Git 环境</p>\n<p>3. GitHub 注册和配置</p>\n<p>4. 安装配置 Hexo</p>\n<p>5. 关联 Hexo 与 GitHub Pages</p>\n<p>6. GitHub Pages 地址解析到个人域名</p>\n<p>7. Hexo 的常用操作</p>\n<p>8. 结束语</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#nodejs\" target=\"_blank\" rel=\"noopener\">搭建 Node.js 环境</a></p>\n<p>为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的</p>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>\n<p>在 Node.js 官网：<a href=\"https://link.jianshu.com?t=https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a>下载安装包v6.10.3 LTS</p>\n<p>保持默认设置即可，一路Next，安装很快就结束了。</p>\n<p>然后打开命令提示符，输入node -v、npm -v，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-098cdf07aa42ce18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/697/format/webp\" alt></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#git\" target=\"_blank\" rel=\"noopener\">搭建 Git 环境</a></p>\n<p>为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。</p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>在 Git 官网：<a href=\"https://link.jianshu.com?t=https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a>下载安装包Git-2.13.0-64-bit.exe</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-5f030dd5d67cc035.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp\" alt></p>\n<p>桌面右键，打开Git Bush Here，输入git –version，出现版本号则说明 Git 环境配置成功，第二步完成！！！</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-69a40a8f03ebb23c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/921/format/webp\" alt></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github\" target=\"_blank\" rel=\"noopener\">GitHub 注册和配置</a></p>\n<p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p>Github注册：<a href=\"https://link.jianshu.com?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p>创建仓库：Repository name 使用自己的用户名，仓库名规则：</p>\n<p><strong>注意</strong>：yourname必须是你的用户名。</p>\n<p>yourname/yourname.github.io</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-a4aa0f3b6806998f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp\" alt></p>\n<p>访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。</p>\n<p>到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo\" target=\"_blank\" rel=\"noopener\">安装配置 Hexo</a></p>\n<p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href=\"https://link.jianshu.com?t=https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-ca813efea8ee1a1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/908/format/webp\" alt></p>\n<p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>\n<p>npm install hexo-cli -g</p>\n<p>然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-cd2b921e0eec4e7e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/446/format/webp\" alt></p>\n<p>查看Hexo的版本</p>\n<p>hexo version</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-54d7284db33fe788.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/595/format/webp\" alt></p>\n<p>安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<p>hexo init bxm0927.github.io</p>\n<p>cd bxm0927.github.io</p>\n<p>npm install</p>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<p>.</p>\n<p>├── .deploy        #需要部署的文件</p>\n<p>├── node_modules    #Hexo插件</p>\n<p>├── public          #生成的静态网页文件</p>\n<p>├── scaffolds      #模板</p>\n<p>├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</p>\n<p>| ├── _drafts      #草稿</p>\n<p>| └── _posts        #文章</p>\n<p>├── themes          #主题</p>\n<p>├── _config.yml    #全局配置文件</p>\n<p>└── package.json    #npm 依赖等</p>\n<p><strong>运行本地 Hexo 服务</strong></p>\n<p>hexo server</p>\n<p>或者</p>\n<p>hexo s</p>\n<p>您的网站会在<a href=\"https://link.jianshu.com?t=http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>下启动。如果<a href=\"https://link.jianshu.com?t=http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-aa36ff1083e957b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/597/format/webp\" alt></p>\n<p><strong>注意1</strong>：执行hexo server提示找不到该指令</p>\n<p>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p>\n<p>sudo npm install hexo-server</p>\n<p>或者</p>\n<p>npm install hexo -server –save</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo-github-pages\" target=\"_blank\" rel=\"noopener\">关联 Hexo 与 GitHub Pages</a></p>\n<p>我们如何让本地git项目与远程的github建立联系呢？用 SSH keys</p>\n<p><strong>生成SSH keys</strong></p>\n<p>输入你自己的邮箱地址</p>\n<p>ssh-keygen -t rsa -C “<a href=\"mailto:80583600@qq.com\" target=\"_blank\" rel=\"noopener\">80583600@qq.com</a>“</p>\n<p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p>\n<p><strong>添加 SSH Key 到 GitHub</strong></p>\n<p>打开C:\\Users\\bxm09.ssh\\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href=\"https://link.jianshu.com?t=https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a>的new SSH key中</p>\n<p><strong>测试</strong></p>\n<p>可以输入下面的命令，看看设置是否成功，<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>的部分不要修改：</p>\n<p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<p>如果是下面的反馈：</p>\n<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</p>\n<p>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</p>\n<p>Are you sure you want to continue connecting (yes/no)?</p>\n<p>不要紧张，输入yes就好，然后会看到：</p>\n<p>Hi aierui! You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n<p><strong>配置Git个人信息</strong></p>\n<p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p>\n<p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>\n<p>git config –global user.name “bxm0927”</p>\n<p>git config –global user.email “<a href=\"mailto:80583600@qq.com\" target=\"_blank\" rel=\"noopener\">80583600@qq.com</a>“</p>\n<p><strong>配置 Deployment</strong></p>\n<p>在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：</p>\n<p>需要注意的是：冒号后面记得空一格！</p>\n<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"Docs-https-hexo-io-docs-deployment-html\"><a href=\"#Docs-https-hexo-io-docs-deployment-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/deployment.html\"></a>Docs: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></h2><p>deploy:</p>\n<p>type: git</p>\n<p>repo: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:bxm0927/bxm0927.github.io.git</p>\n<p>branch: master</p>\n<p><strong>本地文件提交到 GitHub Pages</strong></p>\n<p>// 删除旧的 public 文件</p>\n<p>hexo clean</p>\n<p>// 生成新的 public 文件</p>\n<p>hexo generate</p>\n<p>或者</p>\n<p>hexo g</p>\n<p>// 开始部署</p>\n<p>hexo deploye</p>\n<p>或者</p>\n<p>hexo d</p>\n<p>在浏览器中输入<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io</a>（用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~</p>\n<p><strong>注意1</strong>：若上面操作失败，则需要提前安装一个扩展：</p>\n<p>npm install hexo-deployer-git –save</p>\n<p><strong>注意2</strong>：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。</p>\n<p>Permission denied (publickey).</p>\n<p>fatal: Could not read from remote repository.</p>\n<p>Please make sure you have the correct access rights</p>\n<p>and the repository exists.</p>\n<p><strong>注意3</strong>：怎么避免 .md 文件被解析？</p>\n<p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？</p>\n<p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#github-pages\" target=\"_blank\" rel=\"noopener\">GitHub Pages 地址解析到个人域名</a></p>\n<p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。</p>\n<p>看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。</p>\n<p>进行该绑定过程，其实就是一个重定向的过程。</p>\n<p>在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://</p>\n<p><a href=\"http://www.lovebxm.com\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a></p>\n<p>注意：CNAME 一定是在你 Github 项目的 master 根目录下</p>\n<p>进入<a href=\"https://link.jianshu.com?t=https://dc.aliyun.com/tcparse/dns.htm\" target=\"_blank\" rel=\"noopener\">阿里云域名解析地</a>址，添加解析：</p>\n<p>记录类型选择CNAME</p>\n<p>主机记录填www</p>\n<p>解析线路选择默认</p>\n<p>记录值填yourname.github.io</p>\n<p>TTL值为10分钟</p>\n<p>再添加一个解析，记录类型A</p>\n<p>主机记录填www</p>\n<p>解析线路选择默认</p>\n<p>记录值填你GitHub 的ip地址（在cmd中ping：）</p>\n<p>ping bxm0927.github.com</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-6e1f8982bf8b3182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp\" alt></p>\n<p>点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。</p>\n<p>域名绑定成功，域名解析成功，因此你在浏览中输入<a href=\"https://link.jianshu.com?t=http://www.lovebxm.com/\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a>，或 lovebxm.com 就可以访问到博客了，输入 bxm0927.github.io 会重定向到<a href=\"https://link.jianshu.com?t=http://www.lovebxm.com/\" target=\"_blank\" rel=\"noopener\">www.lovebxm.com</a>。过程：www 的方式，会先解析成<a href=\"https://link.jianshu.com?t=http://xxxx.github.io/\" target=\"_blank\" rel=\"noopener\">http://xxxx.github.io</a>，然后根据 CNAME 再变成 www</p>\n<p><strong>注意</strong>：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐</p>\n<p>方法一：每次hexo d之后，就去 GitHub 仓库根目录新建 CNAME文件</p>\n<p>方法二：在hexo g之后，hexo d之前，把CNAME文件复制到 “\\public” 目录下面，里面写入你要绑定的域名。</p>\n<p>方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。</p>\n<p>方法四：通过安装插件实现永久保留</p>\n<p>$ npm install hexo-generator-cname –save</p>\n<p>之后在_config.yml中添加一条</p>\n<p>plugins:</p>\n<ul>\n<li>hexo-generator-cname</li>\n</ul>\n<p>需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。</p>\n<p><strong>注意1</strong>：每次生成的 CNAME 都是 yoursite.com 怎么解决？</p>\n<p>修改 _config.yml</p>\n<p>url: <a href=\"http://www.lovebxm.com\" target=\"_blank\" rel=\"noopener\">http://www.lovebxm.com</a></p>\n<p>root: /</p>\n<p>permalink: :year/:month/:day/:title/</p>\n<p>permalink_defaults:</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#hexo_1\" target=\"_blank\" rel=\"noopener\">Hexo 的常用操作</a></p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_1\" target=\"_blank\" rel=\"noopener\">发表一篇文章</a></p>\n<p>hexo new “文章标题”</p>\n<p>D:\\GitHub\\Hexo\\test&gt;hexo new “文章标题”</p>\n<p>INFO  Created: D:\\GitHub\\Hexo\\test\\source_posts\\文章标题.md</p>\n<p>在本地博客文件夹source_posts文件夹下看到我们新建的 markdown 文件。</p>\n<p>当然，我们也可以手动添加Markdown文件在source-&gt;_deploy文件夹下，其效果同样可以媲美hexo new</p>\n<p>文章编辑好之后，运行生成、部署命令：</p>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n<p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p>\n<p>hexo clean</p>\n<p>hexo d -g</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_2\" target=\"_blank\" rel=\"noopener\">新建一个自定义页面</a></p>\n<p>hexo new page folder</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_3\" target=\"_blank\" rel=\"noopener\">文章如何添加多个标签</a></p>\n<p>有两种多标签格式</p>\n<p>tags: [a, b, c]</p>\n<p>或</p>\n<p>tags:</p>\n<ul>\n<li><p>a</p>\n</li>\n<li><p>b</p>\n</li>\n<li><p>c</p>\n</li>\n</ul>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_4\" target=\"_blank\" rel=\"noopener\">显示部分文章内容</a></p>\n<p>如果在博客文章列表中，不想全文显示，可以增加, 后面的内容就不会显示在列表。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_5\" target=\"_blank\" rel=\"noopener\">更改主题</a></p>\n<p>官方主题库：<a href=\"https://link.jianshu.com?t=https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<p>Hexo主题非常，推荐使用Next为主题，请阅读 Next 的官方文档（<a href=\"https://link.jianshu.com?t=http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a>），5 分钟快速安装。</p>\n<p>再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_6\" target=\"_blank\" rel=\"noopener\">添加插件</a></p>\n<p>添加 sitemap 和 feed 插件</p>\n<p>切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令</p>\n<p>npm install hexo-generator-feed -save</p>\n<p>npm install hexo-generator-sitemap -save</p>\n<p>修改_config.yml，增加以下内容</p>\n<h1 id=\"Extensions\"><a href=\"#Extensions\" class=\"headerlink\" title=\"Extensions\"></a>Extensions</h1><p>Plugins:</p>\n<ul>\n<li><p>hexo-generator-feed</p>\n</li>\n<li><p>hexo-generator-sitemap</p>\n</li>\n</ul>\n<p>#Feed Atom</p>\n<p>feed:</p>\n<p>type: atom</p>\n<p>path: atom.xml</p>\n<p>limit: 20</p>\n<p>#sitemap</p>\n<p>sitemap:</p>\n<p>path: sitemap.xml</p>\n<p>再执行以下命令，部署服务端</p>\n<p>hexo d -g</p>\n<p>配完之后，就可以访问<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io/atom.xml</a>和<a href=\"https://link.jianshu.com?t=https://bxm0927.github.io/sitemap.xml\" target=\"_blank\" rel=\"noopener\">https://bxm0927.github.io/sitemap.xml</a>，发现这两个文件已经成功生成了。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#404\" target=\"_blank\" rel=\"noopener\">添加 404 页面</a></p>\n<p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/7643792-3f00253127be7f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/667/format/webp\" alt></p>\n<p>其实，404页面可以做更多有意义的事，来做个404公益项目吧。</p>\n<p>推荐使用腾讯公益404<a href=\"https://link.jianshu.com?t=http://www.qq.com/404/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/404/</a>：</p>\n<p>src=”//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js”</p>\n<p>charset=”utf-8”</p>\n<p>homePageUrl=”<a href=\"http://www.lovebxm.com/&quot;\" target=\"_blank\" rel=\"noopener\">http://www.lovebxm.com/&quot;</a></p>\n<p>homePageName=”回到我的主页”&gt;</p>\n<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#pc\" target=\"_blank\" rel=\"noopener\">多PC同步管理博客</a></p>\n<p>很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。</p>\n<p>A电脑备份博客内容到github</p>\n<p>配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public</p>\n<p>初始化仓库。</p>\n<p>在博客根目录下，在git bash下依次执行git init和git remote add origin 为远程仓库地址。</p>\n<p>同步到远程仓库。</p>\n<p>gitbash下依次执行以下命令</p>\n<p>git add . #添加目录下所有文件</p>\n<p>git commit -m “更新说明” #提交并添加更新说明</p>\n<p>git push -u origin master #推送更新到远程仓库</p>\n<p>B电脑拉下远程仓库文件</p>\n<p>在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：</p>\n<p>git init</p>\n<p>git remote add origin</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>发布博客后同步</p>\n<p>在B电脑发布完博客之后，记得将博客备份同步到远程仓库</p>\n<p>执行以下命令：</p>\n<p>git add .</p>\n<p>#可以用git master 查看更改内容</p>\n<p>git commit -m “更新信息”</p>\n<p>git push -u origin master  #以后每次提交可以直接git push</p>\n<p>平时同步管理</p>\n<p>每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_7\" target=\"_blank\" rel=\"noopener\">中文乱码</a></p>\n<p>在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为UTF-8编码的文件即可解决问题。</p>\n<p><a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/bxm0927/p/6927340.html#_8\" target=\"_blank\" rel=\"noopener\">结束语</a></p>\n<p>建站的系统有很多，如：</p>\n<p>-<a href=\"https://link.jianshu.com?t=https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo + GitHub Pages</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=http://jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll + GitHub Pages</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=https://cn.wordpress.org/\" target=\"_blank\" rel=\"noopener\">WordPress + 服务器 + 域名</a></p>\n<p>-<a href=\"https://link.jianshu.com?t=http://www.dedecms.com/\" target=\"_blank\" rel=\"noopener\">DeDeCMS + 服务器 + 域名</a></p>\n<ul>\n<li>…</li>\n</ul>\n<p>使用 Hexo + GitHub Pages 建站，有优点也有缺点：</p>\n<ul>\n<li><p>GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。</p>\n</li>\n<li><p>但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。</p>\n</li>\n<li><p>个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的<a href=\"https://link.jianshu.com?t=https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a>就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。</p>\n</li>\n<li><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！</p>\n</li>\n</ul>\n<p>推荐几个很好用的在线 Markdown 编辑器：</p>\n<ul>\n<li><p>作业部落：<a href=\"https://link.jianshu.com?t=https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/mdeditor</a></p>\n</li>\n<li><p>马克飞象：<a href=\"https://link.jianshu.com?t=https://maxiang.io/\" target=\"_blank\" rel=\"noopener\">https://maxiang.io</a></p>\n</li>\n</ul>\n<p>推荐图床：</p>\n<p>-<a href=\"https://link.jianshu.com?t=https://jiantuku.com/#/\" target=\"_blank\" rel=\"noopener\">极简图床 + chrome 插件 + 七牛空间</a>，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。</p>\n"},{"title":"不停折腾hexo-admin，直到完全实时自动发布为止","author":"知识铺","date":"2019-11-03T13:34:19.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n### 处理图片问题\n在hexo-admin中，截图粘贴图片，一般粘贴的图片，会自动上传到 source/images 。 \n##### 问题1 如何把图片自动发布到 public/images\n改造开始：  node_modules/hexo-admin/app.js  添加三处代码即可自动发布到 public/images\n![知识铺-pasted-43.png](https:\\/\\/blog.zshipu.com/note/images/pasted-43.png)\n##### 问题2 在hexo-admin 如何也能预览图片\n结果解决，每次截图复制到 hexo-admin的时候，是相对路径，在预览区是一个裂图。   \n改造开始：第一步  _admin-config.yml 添加属性 options.imgRoot\n\n![知识铺-pasted-44.png](https:\\/\\/blog.zshipu.com/note/images/pasted-44.png)\n改造开始：第二步  node_modules/hexo-admin/app.js 添加代码及修改代码\n\n![知识铺-pasted-45.png](https:\\/\\/blog.zshipu.com/note/images/pasted-45.png)\n\n![知识铺-pasted-46.png](https:\\/\\/blog.zshipu.com/note/images/pasted-46.png)\n##### 问题3 如何实时发布文章\n改造开始：添加pm2 脚本 gen_run.js\n\nconst { exec } = require('child_process')   \nexec(' hexo g -w  & ',(error, stdout, stderr) => {   \n    if(error){  \n        console.log('exec error: ${error}')  \n        return   \n    }   \n    console.log('stdout: ${stdout}');  \n    console.log('stderr: ${stderr}');  \n})  \n\n使用pm2 启动   \n> pm2 start gen_run.js\n\n注意脚本中 hexo g -w 这里的 -w 监视文件变化，有变化自动发布。\n\n\n","source":"_posts/不停折腾hexo-admin，直到完全实时自动发布为止.md","raw":"title: 不停折腾hexo-admin，直到完全实时自动发布为止\nauthor: 知识铺\ndate: 2019-11-03 21:34:19\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n### 处理图片问题\n在hexo-admin中，截图粘贴图片，一般粘贴的图片，会自动上传到 source/images 。 \n##### 问题1 如何把图片自动发布到 public/images\n改造开始：  node_modules/hexo-admin/app.js  添加三处代码即可自动发布到 public/images\n![知识铺-pasted-43.png](https:\\/\\/blog.zshipu.com/note/images/pasted-43.png)\n##### 问题2 在hexo-admin 如何也能预览图片\n结果解决，每次截图复制到 hexo-admin的时候，是相对路径，在预览区是一个裂图。   \n改造开始：第一步  _admin-config.yml 添加属性 options.imgRoot\n\n![知识铺-pasted-44.png](https:\\/\\/blog.zshipu.com/note/images/pasted-44.png)\n改造开始：第二步  node_modules/hexo-admin/app.js 添加代码及修改代码\n\n![知识铺-pasted-45.png](https:\\/\\/blog.zshipu.com/note/images/pasted-45.png)\n\n![知识铺-pasted-46.png](https:\\/\\/blog.zshipu.com/note/images/pasted-46.png)\n##### 问题3 如何实时发布文章\n改造开始：添加pm2 脚本 gen_run.js\n\nconst { exec } = require('child_process')   \nexec(' hexo g -w  & ',(error, stdout, stderr) => {   \n    if(error){  \n        console.log('exec error: ${error}')  \n        return   \n    }   \n    console.log('stdout: ${stdout}');  \n    console.log('stderr: ${stderr}');  \n})  \n\n使用pm2 启动   \n> pm2 start gen_run.js\n\n注意脚本中 hexo g -w 这里的 -w 监视文件变化，有变化自动发布。\n\n\n","slug":"不停折腾hexo-admin，直到完全实时自动发布为止","published":1,"updated":"2019-11-03T14:10:01.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgi20009okdm27qt44o6","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<h3 id=\"处理图片问题\"><a href=\"#处理图片问题\" class=\"headerlink\" title=\"处理图片问题\"></a>处理图片问题</h3><p>在hexo-admin中，截图粘贴图片，一般粘贴的图片，会自动上传到 source/images 。 </p>\n<h5 id=\"问题1-如何把图片自动发布到-public-images\"><a href=\"#问题1-如何把图片自动发布到-public-images\" class=\"headerlink\" title=\"问题1 如何把图片自动发布到 public/images\"></a>问题1 如何把图片自动发布到 public/images</h5><p>改造开始：  node_modules/hexo-admin/app.js  添加三处代码即可自动发布到 public/images<br><img src=\"https://blog.zshipu.com/note/images/pasted-43.png\" alt=\"知识铺-pasted-43.png\"></p>\n<h5 id=\"问题2-在hexo-admin-如何也能预览图片\"><a href=\"#问题2-在hexo-admin-如何也能预览图片\" class=\"headerlink\" title=\"问题2 在hexo-admin 如何也能预览图片\"></a>问题2 在hexo-admin 如何也能预览图片</h5><p>结果解决，每次截图复制到 hexo-admin的时候，是相对路径，在预览区是一个裂图。<br>改造开始：第一步  _admin-config.yml 添加属性 options.imgRoot</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-44.png\" alt=\"知识铺-pasted-44.png\"><br>改造开始：第二步  node_modules/hexo-admin/app.js 添加代码及修改代码</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-45.png\" alt=\"知识铺-pasted-45.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-46.png\" alt=\"知识铺-pasted-46.png\"></p>\n<h5 id=\"问题3-如何实时发布文章\"><a href=\"#问题3-如何实时发布文章\" class=\"headerlink\" title=\"问题3 如何实时发布文章\"></a>问题3 如何实时发布文章</h5><p>改造开始：添加pm2 脚本 gen_run.js</p>\n<p>const { exec } = require(‘child_process’)<br>exec(‘ hexo g -w  &amp; ‘,(error, stdout, stderr) =&gt; {<br>    if(error){<br>        console.log(‘exec error: ${error}’)<br>        return<br>    }<br>    console.log(‘stdout: ${stdout}’);<br>    console.log(‘stderr: ${stderr}’);<br>})  </p>\n<p>使用pm2 启动   </p>\n<blockquote>\n<p>pm2 start gen_run.js</p>\n</blockquote>\n<p>注意脚本中 hexo g -w 这里的 -w 监视文件变化，有变化自动发布。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<h3 id=\"处理图片问题\"><a href=\"#处理图片问题\" class=\"headerlink\" title=\"处理图片问题\"></a>处理图片问题</h3><p>在hexo-admin中，截图粘贴图片，一般粘贴的图片，会自动上传到 source/images 。 </p>\n<h5 id=\"问题1-如何把图片自动发布到-public-images\"><a href=\"#问题1-如何把图片自动发布到-public-images\" class=\"headerlink\" title=\"问题1 如何把图片自动发布到 public/images\"></a>问题1 如何把图片自动发布到 public/images</h5><p>改造开始：  node_modules/hexo-admin/app.js  添加三处代码即可自动发布到 public/images<br><img src=\"https://blog.zshipu.com/note/images/pasted-43.png\" alt=\"知识铺-pasted-43.png\"></p>\n<h5 id=\"问题2-在hexo-admin-如何也能预览图片\"><a href=\"#问题2-在hexo-admin-如何也能预览图片\" class=\"headerlink\" title=\"问题2 在hexo-admin 如何也能预览图片\"></a>问题2 在hexo-admin 如何也能预览图片</h5><p>结果解决，每次截图复制到 hexo-admin的时候，是相对路径，在预览区是一个裂图。<br>改造开始：第一步  _admin-config.yml 添加属性 options.imgRoot</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-44.png\" alt=\"知识铺-pasted-44.png\"><br>改造开始：第二步  node_modules/hexo-admin/app.js 添加代码及修改代码</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-45.png\" alt=\"知识铺-pasted-45.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-46.png\" alt=\"知识铺-pasted-46.png\"></p>\n<h5 id=\"问题3-如何实时发布文章\"><a href=\"#问题3-如何实时发布文章\" class=\"headerlink\" title=\"问题3 如何实时发布文章\"></a>问题3 如何实时发布文章</h5><p>改造开始：添加pm2 脚本 gen_run.js</p>\n<p>const { exec } = require(‘child_process’)<br>exec(‘ hexo g -w  &amp; ‘,(error, stdout, stderr) =&gt; {<br>    if(error){<br>        console.log(‘exec error: ${error}’)<br>        return<br>    }<br>    console.log(‘stdout: ${stdout}’);<br>    console.log(‘stderr: ${stderr}’);<br>})  </p>\n<p>使用pm2 启动   </p>\n<blockquote>\n<p>pm2 start gen_run.js</p>\n</blockquote>\n<p>注意脚本中 hexo g -w 这里的 -w 监视文件变化，有变化自动发布。</p>\n"},{"title":"linux find命令详解大全","author":"知识铺","date":"2019-11-04T05:26:38.000Z","_content":"## 查询最近修改的文件列表\nfind ./ -mtime 0：返回最近24小时内修改过的文件。\n\nfind ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。\n\n那怎么返回10天内修改过的文件？find还可以支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：\n\nfind ./ -mtime 0 -o -mtime 1 -o -mtime 2 ……虽然比较土，但也算是个方法了。\n\n还有没有更好的方法，我也想知道。\n\n另外， -mmin参数-cmin / - amin也是类似的。\n\n## Find应用实例\n\n查找最近30分钟修改的当前目录下的.php文件\n\nfind . -name '*.php' -mmin -30\n\n查找最近24小时修改的当前目录下的.php文件\n\nfind . -name '*.php' -mtime 0\n\n查找最近24小时修改的当前目录下的.php文件，并列出详细信息\n\nfind . -name '*.inc' -mtime 0 -ls\n\n查找当前目录下，最近24-48小时修改过的常规文件。\n\nfind . -type f -mtime 1\n\n查找当前目录下，最近1天前修改过的常规文件。\n\nfind . -type f -mtime +1\n\n## find 命令详解参数\nfind   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \\;\n\nfind命令的参数；\n\npathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。\n-print： find命令将匹配的文件输出到标准输出。\n-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' { } \\;，注意{ }和\\；之间的空格。\n-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。\n\n #-print 将查找到的文件输出到标准输出\n#-exec   command   {} \\;      —–将查到的文件执行command操作,{} 和 \\;之间有空格\n#-ok 和-exec相同，只不过在操作前要询用户\n\n 例：find . -name .svn | xargs rm -rf\n\n====================================================\n\n-name   filename             #查找名为filename的文件\n-perm                        #按执行权限来查找\n-user    username             #按文件属主来查找\n-group groupname            #按组来查找\n-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前\n-atime    -n +n               #按文件访问时间来查GIN: 0px\">\n\n-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前\n\n -nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在\n-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存\n-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前 \n-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前 \n-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在\n-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存\n-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件\n-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件\n-size      n[c]               #查长度为n块[或n字节]的文件\n-depth                       #使查找在进入子目录前先行查找完本目录\n-fstype                     #查更改时间比f1新但比f2旧的文件\n-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件\n-size      n[c]               #查长度为n块[或n字节]的文件\n-depth                       #使查找在进入子目录前先行查找完本目录\n-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到\n-mount                       #查文件时不跨越文件系统mount点\n-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件\n-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到\n-mount                       #查文件时不跨越文件系统mount点\n-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件\n-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中\n-prune                       #忽略某个目录\n\n=====================================================   \n$find   ~   -name   \"*.txt\"   -print    #在$HOME中查.txt文件并显示\n$find   .    -name   \"*.txt\"   -print\n$find   .    -name   \"[A-Z]*\"   -print   #查以大写字母开头的文件\n$find   /etc   -name   \"host*\"   -print #查以host开头的文件\n$find   .   -name   \"[a-z][a-z][0–9][0–9].txt\"    -print   #查以两个小写字母和两个数字开头的txt文件\n$find .   -perm   755   -print\n$find   .   -perm -007   -exec ls -l {} \\;   #查所有用户都可读写执行的文件同-perm 777\n$find   . -type d   -print\n$find   .   !   -type   d   -print \n$find   .   -type l   -print\n\n$find   .   -size   +1000000c   -print        #查长度大于1Mb的文件\n$find   .   -size   100c         -print       # 查长度为100c的文件\n$find   .   -size   +10   -print              #查长度超过期作废10块的文件（1块=512字节）\n\n$cd /\n$find   etc   home   apps    -depth   -print   | cpio   -ivcdC65536   -o   /dev/rmt0\n$find   /etc -name \"passwd*\"   -exec grep   \"cnscn\"   {}   \\;   #看是否存在cnscn用户\n$find . -name \"yao*\"   | xargs file\n$find   . -name \"yao*\"   |   xargs   echo    \"\" > /tmp/core.log\n$find   . -name \"yao*\"   | xargs   chmod   o-w\n\n======================================================   \n\n**find   -name april*    在当前目录下查找以april开始的文件**    \n**find   -name   april*   fprint file  在当前目录下查找以april开始的文件，并把结果输出到file中**   \n**find   -name ap* -o -name may*   查找以ap或may开头的文件**   \n**find   /mnt   -name tom.txt   -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件**   \n**find   /mnt   -name t.txt ! -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件**   \n**find   /tmp   -name wa* -type l            在/tmp下查找名为wa开头且类型为符号链接的文件**   \n**find   /home   -mtime   -2                 在/home下查最近两天内改动过的文件**   \n**find /home    -atime -1                  查1天之内被存取过的文件**   \n**find /home -mmin    +60                  在/home下查60分钟前改动过的文件**   \n**find /home   -amin   +30                  查最近30分钟前被存取过的文件**   \n**find /home   -newer   tmp.txt             在/home下查更新时间比tmp.txt近的文件或目录**   \n**find /home   -anewer   tmp.txt            在/home下查存取时间比tmp.txt近的文件或目录**   \n**find   /home   -used   -2                  列出文件或目录被改动过之后，在2日内被存取过的文件或目录**   \n**find   /home   -user cnscn                列出/home目录内属于用户cnscn的文件或目录**   \n**find   /home   -uid   +501                  列出/home目录内用户的识别码大于501的文件或目录**   \n**find   /home   -group   cnscn              列出/home内组为cnscn的文件或目录**   \n**find   /home   -gid 501                   列出/home内组id为501的文件或目录**   \n**find   /home   -nouser                    列出/home内不属于本地用户的文件或目录**   \n**find   /home   -nogroup                   列出/home内不属于本地组的文件或目录**   \n**find   /home    -name tmp.txt    -maxdepth   4   列出/home内的tmp.txt 查时深度最多为3层**   \n**find   /home   -name tmp.txt   -mindepth   3   从第2层开始查**   \n**find   /home   -empty                     查找大小为0的文件或空目录**   \n**find   /home   -size   +512k                查大于512k的文件**   \n**find   /home   -size   -512k               查小于512k的文件**   \n**find   /home   -links   +2                查硬连接数大于2的文件或目录**   \n**find   /home   -perm   0700                查权限为700的文件或目录**   \n**find   /tmp   -name tmp.txt   -exec cat {} \\;**   \n**find   /tmp   -name   tmp.txt   -ok   rm {} \\;**   \n**find    /   -amin    -10     # 查找在系统中最后10分钟访问的文件   \nfind    /   -atime   -2        # 查找在系统中最后48小时访问的文件   \nfind    /   -empty             # 查找在系统中为空的文件或者文件夹   \nfind    /   -group   cat        # 查找在系统中属于 groupcat的文件   \nfind    /   -mmin   -5         # 查找在系统中最后5分钟里修改过的文件   \nfind    /   -mtime   -1       #查找在系统中最后24小时里修改过的文件   \nfind    /   -nouser           #查找在系统中属于作废用户的文件   \nfind    /   -user    fred     #查找在系统中属于FRED这个用户的文件**   \n\n **查当前目录下的所有普通文件**   \n\n* * *\n\n **# find . -type f -exec ls -l {} \\;    \n-rw-r–r–    1 root      root         34928 2003-02-25   ./conf/httpd.conf    \n-rw-r–r–    1 root      root         12959 2003-02-25   ./conf/magic    \n-rw-r–r–    1 root      root          180 2003-02-25   ./conf.d/README    \n查当前目录下的所有普通文件，并在- e x e c选项中使用ls -l命令将它们列出**\n\n=================================================   \n在/ l o g s目录中查找更改时间在5日以前的文件并删除它们：\n$ find logs -type f -mtime +5 -exec   -ok   rm {} \\;   \n\n=================================================   \n查询当天修改过的文件   \n[root@book class]# find   ./   -mtime   -1   -type f   -exec   ls -l   {} \\;   \n\n=================================================   \n查询文件并询问是否要显示   \n[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} \\;\n< ls … ./classDB.inc.php > ? y   \n-rw-r–r–    1 cnscn    cnscn       13709   1月 12 12:22 ./classDB.inc.php\n[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} \\;     \n< ls … ./classDB.inc.php > ? n   \n[root@book class]#   \n\n=================================================   \n查询并交给awk去处理   \n[root@book class]# who   |   awk   ’{print $1\"\\t\"$2}’\ncnscn    pts/0\n\n=================================================   \nawk—grep—sed   \n\n[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’ |   sed   s\"/\\/dev\\///g\"   \n文件系统   \nsda2   \nsda1   \n[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’   \n文件系统   \n/dev/sda2   \n/dev/sda1   \n\n **1)在/tmp中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR\"，最后打印出所有包含\"SYSCALL_VECTOR\"的文件名**   \n\nA) find   /tmp   -name   \"*.h\"   | xargs   -n50   grep SYSCALL_VECTOR   \nB) grep   SYSCALL_VECTOR   /tmp/*.h | cut    -d’:'   -f1| uniq > filename   \nC) find   /tmp   -name \"*.h\"   -exec grep \"SYSCALL_VECTOR\"   {}   \\; -print   \n\n2)find / -name filename -exec rm -rf {} \\;   \n    find / -name filename -ok rm -rf {} \\;   \n\n**3)比如要查找磁盘中大于3M的文件：** find . -size +3000k -exec ls -ld {} ;   \n\n4)将find出来的东西拷到另一个地方   \nfind *.c -exec cp ‘{}’ /tmp ‘;’   \n\n如果有特殊文件，可以用cpio，也可以用这样的语法：   \nfind dir -name filename -print | cpio -pdv newdir   \n\n6)查找**2004-11-30 16:36:37时更改过的文件**   \n**# A=`find ./ -name \"*php\"` |   ls -l –full-time $A 2>/dev/null | grep \"2004-11-30 16:36:37\"**   ","source":"_posts/linux-find命令详解大全.md","raw":"title: linux find命令详解大全\nauthor: 知识铺\ndate: 2019-11-04 13:26:38\ntags:\n---\n## 查询最近修改的文件列表\nfind ./ -mtime 0：返回最近24小时内修改过的文件。\n\nfind ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。\n\n那怎么返回10天内修改过的文件？find还可以支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：\n\nfind ./ -mtime 0 -o -mtime 1 -o -mtime 2 ……虽然比较土，但也算是个方法了。\n\n还有没有更好的方法，我也想知道。\n\n另外， -mmin参数-cmin / - amin也是类似的。\n\n## Find应用实例\n\n查找最近30分钟修改的当前目录下的.php文件\n\nfind . -name '*.php' -mmin -30\n\n查找最近24小时修改的当前目录下的.php文件\n\nfind . -name '*.php' -mtime 0\n\n查找最近24小时修改的当前目录下的.php文件，并列出详细信息\n\nfind . -name '*.inc' -mtime 0 -ls\n\n查找当前目录下，最近24-48小时修改过的常规文件。\n\nfind . -type f -mtime 1\n\n查找当前目录下，最近1天前修改过的常规文件。\n\nfind . -type f -mtime +1\n\n## find 命令详解参数\nfind   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \\;\n\nfind命令的参数；\n\npathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。\n-print： find命令将匹配的文件输出到标准输出。\n-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' { } \\;，注意{ }和\\；之间的空格。\n-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。\n\n #-print 将查找到的文件输出到标准输出\n#-exec   command   {} \\;      —–将查到的文件执行command操作,{} 和 \\;之间有空格\n#-ok 和-exec相同，只不过在操作前要询用户\n\n 例：find . -name .svn | xargs rm -rf\n\n====================================================\n\n-name   filename             #查找名为filename的文件\n-perm                        #按执行权限来查找\n-user    username             #按文件属主来查找\n-group groupname            #按组来查找\n-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前\n-atime    -n +n               #按文件访问时间来查GIN: 0px\">\n\n-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前\n\n -nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在\n-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存\n-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前 \n-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前 \n-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在\n-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存\n-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件\n-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件\n-size      n[c]               #查长度为n块[或n字节]的文件\n-depth                       #使查找在进入子目录前先行查找完本目录\n-fstype                     #查更改时间比f1新但比f2旧的文件\n-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件\n-size      n[c]               #查长度为n块[或n字节]的文件\n-depth                       #使查找在进入子目录前先行查找完本目录\n-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到\n-mount                       #查文件时不跨越文件系统mount点\n-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件\n-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到\n-mount                       #查文件时不跨越文件系统mount点\n-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件\n-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中\n-prune                       #忽略某个目录\n\n=====================================================   \n$find   ~   -name   \"*.txt\"   -print    #在$HOME中查.txt文件并显示\n$find   .    -name   \"*.txt\"   -print\n$find   .    -name   \"[A-Z]*\"   -print   #查以大写字母开头的文件\n$find   /etc   -name   \"host*\"   -print #查以host开头的文件\n$find   .   -name   \"[a-z][a-z][0–9][0–9].txt\"    -print   #查以两个小写字母和两个数字开头的txt文件\n$find .   -perm   755   -print\n$find   .   -perm -007   -exec ls -l {} \\;   #查所有用户都可读写执行的文件同-perm 777\n$find   . -type d   -print\n$find   .   !   -type   d   -print \n$find   .   -type l   -print\n\n$find   .   -size   +1000000c   -print        #查长度大于1Mb的文件\n$find   .   -size   100c         -print       # 查长度为100c的文件\n$find   .   -size   +10   -print              #查长度超过期作废10块的文件（1块=512字节）\n\n$cd /\n$find   etc   home   apps    -depth   -print   | cpio   -ivcdC65536   -o   /dev/rmt0\n$find   /etc -name \"passwd*\"   -exec grep   \"cnscn\"   {}   \\;   #看是否存在cnscn用户\n$find . -name \"yao*\"   | xargs file\n$find   . -name \"yao*\"   |   xargs   echo    \"\" > /tmp/core.log\n$find   . -name \"yao*\"   | xargs   chmod   o-w\n\n======================================================   \n\n**find   -name april*    在当前目录下查找以april开始的文件**    \n**find   -name   april*   fprint file  在当前目录下查找以april开始的文件，并把结果输出到file中**   \n**find   -name ap* -o -name may*   查找以ap或may开头的文件**   \n**find   /mnt   -name tom.txt   -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件**   \n**find   /mnt   -name t.txt ! -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件**   \n**find   /tmp   -name wa* -type l            在/tmp下查找名为wa开头且类型为符号链接的文件**   \n**find   /home   -mtime   -2                 在/home下查最近两天内改动过的文件**   \n**find /home    -atime -1                  查1天之内被存取过的文件**   \n**find /home -mmin    +60                  在/home下查60分钟前改动过的文件**   \n**find /home   -amin   +30                  查最近30分钟前被存取过的文件**   \n**find /home   -newer   tmp.txt             在/home下查更新时间比tmp.txt近的文件或目录**   \n**find /home   -anewer   tmp.txt            在/home下查存取时间比tmp.txt近的文件或目录**   \n**find   /home   -used   -2                  列出文件或目录被改动过之后，在2日内被存取过的文件或目录**   \n**find   /home   -user cnscn                列出/home目录内属于用户cnscn的文件或目录**   \n**find   /home   -uid   +501                  列出/home目录内用户的识别码大于501的文件或目录**   \n**find   /home   -group   cnscn              列出/home内组为cnscn的文件或目录**   \n**find   /home   -gid 501                   列出/home内组id为501的文件或目录**   \n**find   /home   -nouser                    列出/home内不属于本地用户的文件或目录**   \n**find   /home   -nogroup                   列出/home内不属于本地组的文件或目录**   \n**find   /home    -name tmp.txt    -maxdepth   4   列出/home内的tmp.txt 查时深度最多为3层**   \n**find   /home   -name tmp.txt   -mindepth   3   从第2层开始查**   \n**find   /home   -empty                     查找大小为0的文件或空目录**   \n**find   /home   -size   +512k                查大于512k的文件**   \n**find   /home   -size   -512k               查小于512k的文件**   \n**find   /home   -links   +2                查硬连接数大于2的文件或目录**   \n**find   /home   -perm   0700                查权限为700的文件或目录**   \n**find   /tmp   -name tmp.txt   -exec cat {} \\;**   \n**find   /tmp   -name   tmp.txt   -ok   rm {} \\;**   \n**find    /   -amin    -10     # 查找在系统中最后10分钟访问的文件   \nfind    /   -atime   -2        # 查找在系统中最后48小时访问的文件   \nfind    /   -empty             # 查找在系统中为空的文件或者文件夹   \nfind    /   -group   cat        # 查找在系统中属于 groupcat的文件   \nfind    /   -mmin   -5         # 查找在系统中最后5分钟里修改过的文件   \nfind    /   -mtime   -1       #查找在系统中最后24小时里修改过的文件   \nfind    /   -nouser           #查找在系统中属于作废用户的文件   \nfind    /   -user    fred     #查找在系统中属于FRED这个用户的文件**   \n\n **查当前目录下的所有普通文件**   \n\n* * *\n\n **# find . -type f -exec ls -l {} \\;    \n-rw-r–r–    1 root      root         34928 2003-02-25   ./conf/httpd.conf    \n-rw-r–r–    1 root      root         12959 2003-02-25   ./conf/magic    \n-rw-r–r–    1 root      root          180 2003-02-25   ./conf.d/README    \n查当前目录下的所有普通文件，并在- e x e c选项中使用ls -l命令将它们列出**\n\n=================================================   \n在/ l o g s目录中查找更改时间在5日以前的文件并删除它们：\n$ find logs -type f -mtime +5 -exec   -ok   rm {} \\;   \n\n=================================================   \n查询当天修改过的文件   \n[root@book class]# find   ./   -mtime   -1   -type f   -exec   ls -l   {} \\;   \n\n=================================================   \n查询文件并询问是否要显示   \n[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} \\;\n< ls … ./classDB.inc.php > ? y   \n-rw-r–r–    1 cnscn    cnscn       13709   1月 12 12:22 ./classDB.inc.php\n[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} \\;     \n< ls … ./classDB.inc.php > ? n   \n[root@book class]#   \n\n=================================================   \n查询并交给awk去处理   \n[root@book class]# who   |   awk   ’{print $1\"\\t\"$2}’\ncnscn    pts/0\n\n=================================================   \nawk—grep—sed   \n\n[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’ |   sed   s\"/\\/dev\\///g\"   \n文件系统   \nsda2   \nsda1   \n[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’   \n文件系统   \n/dev/sda2   \n/dev/sda1   \n\n **1)在/tmp中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR\"，最后打印出所有包含\"SYSCALL_VECTOR\"的文件名**   \n\nA) find   /tmp   -name   \"*.h\"   | xargs   -n50   grep SYSCALL_VECTOR   \nB) grep   SYSCALL_VECTOR   /tmp/*.h | cut    -d’:'   -f1| uniq > filename   \nC) find   /tmp   -name \"*.h\"   -exec grep \"SYSCALL_VECTOR\"   {}   \\; -print   \n\n2)find / -name filename -exec rm -rf {} \\;   \n    find / -name filename -ok rm -rf {} \\;   \n\n**3)比如要查找磁盘中大于3M的文件：** find . -size +3000k -exec ls -ld {} ;   \n\n4)将find出来的东西拷到另一个地方   \nfind *.c -exec cp ‘{}’ /tmp ‘;’   \n\n如果有特殊文件，可以用cpio，也可以用这样的语法：   \nfind dir -name filename -print | cpio -pdv newdir   \n\n6)查找**2004-11-30 16:36:37时更改过的文件**   \n**# A=`find ./ -name \"*php\"` |   ls -l –full-time $A 2>/dev/null | grep \"2004-11-30 16:36:37\"**   ","slug":"linux-find命令详解大全","published":1,"updated":"2019-11-04T05:31:12.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgi5000bokdmr17o0go9","content":"<h2 id=\"查询最近修改的文件列表\"><a href=\"#查询最近修改的文件列表\" class=\"headerlink\" title=\"查询最近修改的文件列表\"></a>查询最近修改的文件列表</h2><p>find ./ -mtime 0：返回最近24小时内修改过的文件。</p>\n<p>find ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。</p>\n<p>那怎么返回10天内修改过的文件？find还可以支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：</p>\n<p>find ./ -mtime 0 -o -mtime 1 -o -mtime 2 ……虽然比较土，但也算是个方法了。</p>\n<p>还有没有更好的方法，我也想知道。</p>\n<p>另外， -mmin参数-cmin / - amin也是类似的。</p>\n<h2 id=\"Find应用实例\"><a href=\"#Find应用实例\" class=\"headerlink\" title=\"Find应用实例\"></a>Find应用实例</h2><p>查找最近30分钟修改的当前目录下的.php文件</p>\n<p>find . -name ‘*.php’ -mmin -30</p>\n<p>查找最近24小时修改的当前目录下的.php文件</p>\n<p>find . -name ‘*.php’ -mtime 0</p>\n<p>查找最近24小时修改的当前目录下的.php文件，并列出详细信息</p>\n<p>find . -name ‘*.inc’ -mtime 0 -ls</p>\n<p>查找当前目录下，最近24-48小时修改过的常规文件。</p>\n<p>find . -type f -mtime 1</p>\n<p>查找当前目录下，最近1天前修改过的常规文件。</p>\n<p>find . -type f -mtime +1</p>\n<h2 id=\"find-命令详解参数\"><a href=\"#find-命令详解参数\" class=\"headerlink\" title=\"find 命令详解参数\"></a>find 命令详解参数</h2><p>find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} ;</p>\n<p>find命令的参数；</p>\n<p>pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： find命令将匹配的文件输出到标准输出。<br>-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ { } ;，注意{ }和\\；之间的空格。<br>-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</p>\n<p> #-print 将查找到的文件输出到标准输出</p>\n<p>#-exec   command   {} ;      —–将查到的文件执行command操作,{} 和 ;之间有空格</p>\n<p>#-ok 和-exec相同，只不过在操作前要询用户</p>\n<p> 例：find . -name .svn | xargs rm -rf</p>\n<p>====================================================</p>\n<p>-name   filename             #查找名为filename的文件<br>-perm                        #按执行权限来查找<br>-user    username             #按文件属主来查找<br>-group groupname            #按组来查找<br>-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前<br>-atime    -n +n               #按文件访问时间来查GIN: 0px”&gt;</p>\n<p>-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前</p>\n<p> -nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在<br>-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存<br>-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前<br>-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前<br>-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在<br>-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存<br>-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件<br>-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件<br>-size      n[c]               #查长度为n块[或n字节]的文件<br>-depth                       #使查找在进入子目录前先行查找完本目录<br>-fstype                     #查更改时间比f1新但比f2旧的文件<br>-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件<br>-size      n[c]               #查长度为n块[或n字节]的文件<br>-depth                       #使查找在进入子目录前先行查找完本目录<br>-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到<br>-mount                       #查文件时不跨越文件系统mount点<br>-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件<br>-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到<br>-mount                       #查文件时不跨越文件系统mount点<br>-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件<br>-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中<br>-prune                       #忽略某个目录</p>\n<p>=====================================================<br>$find   ~   -name   “<em>.txt”   -print    #在$HOME中查.txt文件并显示<br>$find   .    -name   “</em>.txt”   -print<br>$find   .    -name   “[A-Z]*”   -print   #查以大写字母开头的文件<br>$find   /etc   -name   “host*”   -print #查以host开头的文件<br>$find   .   -name   “[a-z][a-z][0–9][0–9].txt”    -print   #查以两个小写字母和两个数字开头的txt文件<br>$find .   -perm   755   -print<br>$find   .   -perm -007   -exec ls -l {} ;   #查所有用户都可读写执行的文件同-perm 777<br>$find   . -type d   -print<br>$find   .   !   -type   d   -print<br>$find   .   -type l   -print</p>\n<p>$find   .   -size   +1000000c   -print        #查长度大于1Mb的文件<br>$find   .   -size   100c         -print       # 查长度为100c的文件<br>$find   .   -size   +10   -print              #查长度超过期作废10块的文件（1块=512字节）</p>\n<p>$cd /<br>$find   etc   home   apps    -depth   -print   | cpio   -ivcdC65536   -o   /dev/rmt0<br>$find   /etc -name “passwd*”   -exec grep   “cnscn”   {}   ;   #看是否存在cnscn用户<br>$find . -name “yao*”   | xargs file<br>$find   . -name “yao*”   |   xargs   echo    “” &gt; /tmp/core.log<br>$find   . -name “yao*”   | xargs   chmod   o-w</p>\n<p>======================================================   </p>\n<p><strong>find   -name april*    在当前目录下查找以april开始的文件</strong><br><strong>find   -name   april*   fprint file  在当前目录下查找以april开始的文件，并把结果输出到file中</strong><br><strong>find   -name ap* -o -name may*   查找以ap或may开头的文件</strong><br><strong>find   /mnt   -name tom.txt   -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件</strong><br><strong>find   /mnt   -name t.txt ! -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件</strong><br><strong>find   /tmp   -name wa* -type l            在/tmp下查找名为wa开头且类型为符号链接的文件</strong><br><strong>find   /home   -mtime   -2                 在/home下查最近两天内改动过的文件</strong><br><strong>find /home    -atime -1                  查1天之内被存取过的文件</strong><br><strong>find /home -mmin    +60                  在/home下查60分钟前改动过的文件</strong><br><strong>find /home   -amin   +30                  查最近30分钟前被存取过的文件</strong><br><strong>find /home   -newer   tmp.txt             在/home下查更新时间比tmp.txt近的文件或目录</strong><br><strong>find /home   -anewer   tmp.txt            在/home下查存取时间比tmp.txt近的文件或目录</strong><br><strong>find   /home   -used   -2                  列出文件或目录被改动过之后，在2日内被存取过的文件或目录</strong><br><strong>find   /home   -user cnscn                列出/home目录内属于用户cnscn的文件或目录</strong><br><strong>find   /home   -uid   +501                  列出/home目录内用户的识别码大于501的文件或目录</strong><br><strong>find   /home   -group   cnscn              列出/home内组为cnscn的文件或目录</strong><br><strong>find   /home   -gid 501                   列出/home内组id为501的文件或目录</strong><br><strong>find   /home   -nouser                    列出/home内不属于本地用户的文件或目录</strong><br><strong>find   /home   -nogroup                   列出/home内不属于本地组的文件或目录</strong><br><strong>find   /home    -name tmp.txt    -maxdepth   4   列出/home内的tmp.txt 查时深度最多为3层</strong><br><strong>find   /home   -name tmp.txt   -mindepth   3   从第2层开始查</strong><br><strong>find   /home   -empty                     查找大小为0的文件或空目录</strong><br><strong>find   /home   -size   +512k                查大于512k的文件</strong><br><strong>find   /home   -size   -512k               查小于512k的文件</strong><br><strong>find   /home   -links   +2                查硬连接数大于2的文件或目录</strong><br><strong>find   /home   -perm   0700                查权限为700的文件或目录</strong><br><strong>find   /tmp   -name tmp.txt   -exec cat {} ;</strong><br><strong>find   /tmp   -name   tmp.txt   -ok   rm {} ;</strong><br><strong>find    /   -amin    -10     # 查找在系统中最后10分钟访问的文件<br>find    /   -atime   -2        # 查找在系统中最后48小时访问的文件<br>find    /   -empty             # 查找在系统中为空的文件或者文件夹<br>find    /   -group   cat        # 查找在系统中属于 groupcat的文件<br>find    /   -mmin   -5         # 查找在系统中最后5分钟里修改过的文件<br>find    /   -mtime   -1       #查找在系统中最后24小时里修改过的文件<br>find    /   -nouser           #查找在系统中属于作废用户的文件<br>find    /   -user    fred     #查找在系统中属于FRED这个用户的文件</strong>   </p>\n<p> <strong>查当前目录下的所有普通文件</strong>   </p>\n<hr>\n<p> <strong># find . -type f -exec ls -l {} ;<br>-rw-r–r–    1 root      root         34928 2003-02-25   ./conf/httpd.conf<br>-rw-r–r–    1 root      root         12959 2003-02-25   ./conf/magic<br>-rw-r–r–    1 root      root          180 2003-02-25   ./conf.d/README<br>查当前目录下的所有普通文件，并在- e x e c选项中使用ls -l命令将它们列出</strong></p>\n<p>=================================================<br>在/ l o g s目录中查找更改时间在5日以前的文件并删除它们：<br>$ find logs -type f -mtime +5 -exec   -ok   rm {} ;   </p>\n<p>=================================================<br>查询当天修改过的文件<br>[root@book class]# find   ./   -mtime   -1   -type f   -exec   ls -l   {} ;   </p>\n<p>=================================================<br>查询文件并询问是否要显示<br>[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} ;<br>&lt; ls … ./classDB.inc.php &gt; ? y<br>-rw-r–r–    1 cnscn    cnscn       13709   1月 12 12:22 ./classDB.inc.php<br>[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} ;<br>&lt; ls … ./classDB.inc.php &gt; ? n<br>[root@book class]#   </p>\n<p>=================================================<br>查询并交给awk去处理<br>[root@book class]# who   |   awk   ’{print $1”\\t”$2}’<br>cnscn    pts/0</p>\n<p>=================================================<br>awk—grep—sed   </p>\n<p>[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’ |   sed   s”//dev///g”<br>文件系统<br>sda2<br>sda1<br>[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’<br>文件系统<br>/dev/sda2<br>/dev/sda1   </p>\n<p> <strong>1)在/tmp中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR”，最后打印出所有包含”SYSCALL_VECTOR”的文件名</strong>   </p>\n<p>A) find   /tmp   -name   “<em>.h”   | xargs   -n50   grep SYSCALL_VECTOR<br>B) grep   SYSCALL_VECTOR   /tmp/</em>.h | cut    -d’:’   -f1| uniq &gt; filename<br>C) find   /tmp   -name “*.h”   -exec grep “SYSCALL_VECTOR”   {}   ; -print   </p>\n<p>2)find / -name filename -exec rm -rf {} ;<br>    find / -name filename -ok rm -rf {} ;   </p>\n<p><strong>3)比如要查找磁盘中大于3M的文件：</strong> find . -size +3000k -exec ls -ld {} ;   </p>\n<p>4)将find出来的东西拷到另一个地方<br>find *.c -exec cp ‘{}’ /tmp ‘;’   </p>\n<p>如果有特殊文件，可以用cpio，也可以用这样的语法：<br>find dir -name filename -print | cpio -pdv newdir   </p>\n<p>6)查找<strong>2004-11-30 16:36:37时更改过的文件</strong><br><strong># A=<code>find ./ -name &quot;*php&quot;</code> |   ls -l –full-time $A 2&gt;/dev/null | grep “2004-11-30 16:36:37”</strong>   </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查询最近修改的文件列表\"><a href=\"#查询最近修改的文件列表\" class=\"headerlink\" title=\"查询最近修改的文件列表\"></a>查询最近修改的文件列表</h2><p>find ./ -mtime 0：返回最近24小时内修改过的文件。</p>\n<p>find ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。</p>\n<p>那怎么返回10天内修改过的文件？find还可以支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：</p>\n<p>find ./ -mtime 0 -o -mtime 1 -o -mtime 2 ……虽然比较土，但也算是个方法了。</p>\n<p>还有没有更好的方法，我也想知道。</p>\n<p>另外， -mmin参数-cmin / - amin也是类似的。</p>\n<h2 id=\"Find应用实例\"><a href=\"#Find应用实例\" class=\"headerlink\" title=\"Find应用实例\"></a>Find应用实例</h2><p>查找最近30分钟修改的当前目录下的.php文件</p>\n<p>find . -name ‘*.php’ -mmin -30</p>\n<p>查找最近24小时修改的当前目录下的.php文件</p>\n<p>find . -name ‘*.php’ -mtime 0</p>\n<p>查找最近24小时修改的当前目录下的.php文件，并列出详细信息</p>\n<p>find . -name ‘*.inc’ -mtime 0 -ls</p>\n<p>查找当前目录下，最近24-48小时修改过的常规文件。</p>\n<p>find . -type f -mtime 1</p>\n<p>查找当前目录下，最近1天前修改过的常规文件。</p>\n<p>find . -type f -mtime +1</p>\n<h2 id=\"find-命令详解参数\"><a href=\"#find-命令详解参数\" class=\"headerlink\" title=\"find 命令详解参数\"></a>find 命令详解参数</h2><p>find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} ;</p>\n<p>find命令的参数；</p>\n<p>pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： find命令将匹配的文件输出到标准输出。<br>-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ { } ;，注意{ }和\\；之间的空格。<br>-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</p>\n<p> #-print 将查找到的文件输出到标准输出</p>\n<p>#-exec   command   {} ;      —–将查到的文件执行command操作,{} 和 ;之间有空格</p>\n<p>#-ok 和-exec相同，只不过在操作前要询用户</p>\n<p> 例：find . -name .svn | xargs rm -rf</p>\n<p>====================================================</p>\n<p>-name   filename             #查找名为filename的文件<br>-perm                        #按执行权限来查找<br>-user    username             #按文件属主来查找<br>-group groupname            #按组来查找<br>-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前<br>-atime    -n +n               #按文件访问时间来查GIN: 0px”&gt;</p>\n<p>-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前</p>\n<p> -nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在<br>-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存<br>-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前<br>-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前<br>-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在<br>-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存<br>-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件<br>-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件<br>-size      n[c]               #查长度为n块[或n字节]的文件<br>-depth                       #使查找在进入子目录前先行查找完本目录<br>-fstype                     #查更改时间比f1新但比f2旧的文件<br>-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件<br>-size      n[c]               #查长度为n块[或n字节]的文件<br>-depth                       #使查找在进入子目录前先行查找完本目录<br>-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到<br>-mount                       #查文件时不跨越文件系统mount点<br>-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件<br>-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到<br>-mount                       #查文件时不跨越文件系统mount点<br>-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件<br>-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中<br>-prune                       #忽略某个目录</p>\n<p>=====================================================<br>$find   ~   -name   “<em>.txt”   -print    #在$HOME中查.txt文件并显示<br>$find   .    -name   “</em>.txt”   -print<br>$find   .    -name   “[A-Z]*”   -print   #查以大写字母开头的文件<br>$find   /etc   -name   “host*”   -print #查以host开头的文件<br>$find   .   -name   “[a-z][a-z][0–9][0–9].txt”    -print   #查以两个小写字母和两个数字开头的txt文件<br>$find .   -perm   755   -print<br>$find   .   -perm -007   -exec ls -l {} ;   #查所有用户都可读写执行的文件同-perm 777<br>$find   . -type d   -print<br>$find   .   !   -type   d   -print<br>$find   .   -type l   -print</p>\n<p>$find   .   -size   +1000000c   -print        #查长度大于1Mb的文件<br>$find   .   -size   100c         -print       # 查长度为100c的文件<br>$find   .   -size   +10   -print              #查长度超过期作废10块的文件（1块=512字节）</p>\n<p>$cd /<br>$find   etc   home   apps    -depth   -print   | cpio   -ivcdC65536   -o   /dev/rmt0<br>$find   /etc -name “passwd*”   -exec grep   “cnscn”   {}   ;   #看是否存在cnscn用户<br>$find . -name “yao*”   | xargs file<br>$find   . -name “yao*”   |   xargs   echo    “” &gt; /tmp/core.log<br>$find   . -name “yao*”   | xargs   chmod   o-w</p>\n<p>======================================================   </p>\n<p><strong>find   -name april*    在当前目录下查找以april开始的文件</strong><br><strong>find   -name   april*   fprint file  在当前目录下查找以april开始的文件，并把结果输出到file中</strong><br><strong>find   -name ap* -o -name may*   查找以ap或may开头的文件</strong><br><strong>find   /mnt   -name tom.txt   -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件</strong><br><strong>find   /mnt   -name t.txt ! -ftype vfat   在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件</strong><br><strong>find   /tmp   -name wa* -type l            在/tmp下查找名为wa开头且类型为符号链接的文件</strong><br><strong>find   /home   -mtime   -2                 在/home下查最近两天内改动过的文件</strong><br><strong>find /home    -atime -1                  查1天之内被存取过的文件</strong><br><strong>find /home -mmin    +60                  在/home下查60分钟前改动过的文件</strong><br><strong>find /home   -amin   +30                  查最近30分钟前被存取过的文件</strong><br><strong>find /home   -newer   tmp.txt             在/home下查更新时间比tmp.txt近的文件或目录</strong><br><strong>find /home   -anewer   tmp.txt            在/home下查存取时间比tmp.txt近的文件或目录</strong><br><strong>find   /home   -used   -2                  列出文件或目录被改动过之后，在2日内被存取过的文件或目录</strong><br><strong>find   /home   -user cnscn                列出/home目录内属于用户cnscn的文件或目录</strong><br><strong>find   /home   -uid   +501                  列出/home目录内用户的识别码大于501的文件或目录</strong><br><strong>find   /home   -group   cnscn              列出/home内组为cnscn的文件或目录</strong><br><strong>find   /home   -gid 501                   列出/home内组id为501的文件或目录</strong><br><strong>find   /home   -nouser                    列出/home内不属于本地用户的文件或目录</strong><br><strong>find   /home   -nogroup                   列出/home内不属于本地组的文件或目录</strong><br><strong>find   /home    -name tmp.txt    -maxdepth   4   列出/home内的tmp.txt 查时深度最多为3层</strong><br><strong>find   /home   -name tmp.txt   -mindepth   3   从第2层开始查</strong><br><strong>find   /home   -empty                     查找大小为0的文件或空目录</strong><br><strong>find   /home   -size   +512k                查大于512k的文件</strong><br><strong>find   /home   -size   -512k               查小于512k的文件</strong><br><strong>find   /home   -links   +2                查硬连接数大于2的文件或目录</strong><br><strong>find   /home   -perm   0700                查权限为700的文件或目录</strong><br><strong>find   /tmp   -name tmp.txt   -exec cat {} ;</strong><br><strong>find   /tmp   -name   tmp.txt   -ok   rm {} ;</strong><br><strong>find    /   -amin    -10     # 查找在系统中最后10分钟访问的文件<br>find    /   -atime   -2        # 查找在系统中最后48小时访问的文件<br>find    /   -empty             # 查找在系统中为空的文件或者文件夹<br>find    /   -group   cat        # 查找在系统中属于 groupcat的文件<br>find    /   -mmin   -5         # 查找在系统中最后5分钟里修改过的文件<br>find    /   -mtime   -1       #查找在系统中最后24小时里修改过的文件<br>find    /   -nouser           #查找在系统中属于作废用户的文件<br>find    /   -user    fred     #查找在系统中属于FRED这个用户的文件</strong>   </p>\n<p> <strong>查当前目录下的所有普通文件</strong>   </p>\n<hr>\n<p> <strong># find . -type f -exec ls -l {} ;<br>-rw-r–r–    1 root      root         34928 2003-02-25   ./conf/httpd.conf<br>-rw-r–r–    1 root      root         12959 2003-02-25   ./conf/magic<br>-rw-r–r–    1 root      root          180 2003-02-25   ./conf.d/README<br>查当前目录下的所有普通文件，并在- e x e c选项中使用ls -l命令将它们列出</strong></p>\n<p>=================================================<br>在/ l o g s目录中查找更改时间在5日以前的文件并删除它们：<br>$ find logs -type f -mtime +5 -exec   -ok   rm {} ;   </p>\n<p>=================================================<br>查询当天修改过的文件<br>[root@book class]# find   ./   -mtime   -1   -type f   -exec   ls -l   {} ;   </p>\n<p>=================================================<br>查询文件并询问是否要显示<br>[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} ;<br>&lt; ls … ./classDB.inc.php &gt; ? y<br>-rw-r–r–    1 cnscn    cnscn       13709   1月 12 12:22 ./classDB.inc.php<br>[root@book class]# find   ./   -mtime   -1   -type f   -ok   ls -l   {} ;<br>&lt; ls … ./classDB.inc.php &gt; ? n<br>[root@book class]#   </p>\n<p>=================================================<br>查询并交给awk去处理<br>[root@book class]# who   |   awk   ’{print $1”\\t”$2}’<br>cnscn    pts/0</p>\n<p>=================================================<br>awk—grep—sed   </p>\n<p>[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’ |   sed   s”//dev///g”<br>文件系统<br>sda2<br>sda1<br>[root@book class]# df   -k |   awk ‘{print $1}’ |   grep   -v   ’none’<br>文件系统<br>/dev/sda2<br>/dev/sda1   </p>\n<p> <strong>1)在/tmp中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR”，最后打印出所有包含”SYSCALL_VECTOR”的文件名</strong>   </p>\n<p>A) find   /tmp   -name   “<em>.h”   | xargs   -n50   grep SYSCALL_VECTOR<br>B) grep   SYSCALL_VECTOR   /tmp/</em>.h | cut    -d’:’   -f1| uniq &gt; filename<br>C) find   /tmp   -name “*.h”   -exec grep “SYSCALL_VECTOR”   {}   ; -print   </p>\n<p>2)find / -name filename -exec rm -rf {} ;<br>    find / -name filename -ok rm -rf {} ;   </p>\n<p><strong>3)比如要查找磁盘中大于3M的文件：</strong> find . -size +3000k -exec ls -ld {} ;   </p>\n<p>4)将find出来的东西拷到另一个地方<br>find *.c -exec cp ‘{}’ /tmp ‘;’   </p>\n<p>如果有特殊文件，可以用cpio，也可以用这样的语法：<br>find dir -name filename -print | cpio -pdv newdir   </p>\n<p>6)查找<strong>2004-11-30 16:36:37时更改过的文件</strong><br><strong># A=<code>find ./ -name &quot;*php&quot;</code> |   ls -l –full-time $A 2&gt;/dev/null | grep “2004-11-30 16:36:37”</strong>   </p>\n"},{"title":"从零开始创建一个属于技术宅的产品,万站联盟接入- 知识铺","author":"知识铺","date":"2019-11-03T07:04:38.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、简单\n\n     作为技术，最最最希望接入简单\n\n     万站联盟接入到自己站点，就能获取到万站推广。\n\n    1\\. 接入从未如此简单， 只需一行代码。\n\n    2\\. 如果需要 页面pv，再添加一行。 \n\n    3.如果还需要 热门文章列表，就再添加一行。\n\n二、对接获取代码\n\n     TSUA 需要3行代码 <code> 来完成它的工作。请按照以下说明在您的网站上安装它，然后开始使用 TSUA！\n\n我的网站是\n\n![](/note/images/pasted-5.png)\n![](/note/images/pasted-6.png)\n![](/note/images/pasted-7.png)\n![](/note/images/pasted-8.png)\n![](/note/images/pasted-9.png)\n\n","source":"_posts/从零开始创建一个属于技术宅的产品-万站联盟接入-知识铺.md","raw":"title: '从零开始创建一个属于技术宅的产品,万站联盟接入- 知识铺'\nauthor: 知识铺\ndate: 2019-11-03 15:04:38\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、简单\n\n     作为技术，最最最希望接入简单\n\n     万站联盟接入到自己站点，就能获取到万站推广。\n\n    1\\. 接入从未如此简单， 只需一行代码。\n\n    2\\. 如果需要 页面pv，再添加一行。 \n\n    3.如果还需要 热门文章列表，就再添加一行。\n\n二、对接获取代码\n\n     TSUA 需要3行代码 <code> 来完成它的工作。请按照以下说明在您的网站上安装它，然后开始使用 TSUA！\n\n我的网站是\n\n![](/note/images/pasted-5.png)\n![](/note/images/pasted-6.png)\n![](/note/images/pasted-7.png)\n![](/note/images/pasted-8.png)\n![](/note/images/pasted-9.png)\n\n","slug":"从零开始创建一个属于技术宅的产品-万站联盟接入-知识铺","published":1,"updated":"2019-11-03T08:59:53.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgi8000eokdms0znid1g","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、简单</p>\n<pre><code> 作为技术，最最最希望接入简单\n\n 万站联盟接入到自己站点，就能获取到万站推广。\n\n1\\. 接入从未如此简单， 只需一行代码。\n\n2\\. 如果需要 页面pv，再添加一行。 \n\n3.如果还需要 热门文章列表，就再添加一行。</code></pre><p>二、对接获取代码</p>\n<pre><code>TSUA 需要3行代码 &lt;code&gt; 来完成它的工作。请按照以下说明在您的网站上安装它，然后开始使用 TSUA！</code></pre><p>我的网站是</p>\n<p><img src=\"/note/images/pasted-5.png\" alt><br><img src=\"/note/images/pasted-6.png\" alt><br><img src=\"/note/images/pasted-7.png\" alt><br><img src=\"/note/images/pasted-8.png\" alt><br><img src=\"/note/images/pasted-9.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、简单</p>\n<pre><code> 作为技术，最最最希望接入简单\n\n 万站联盟接入到自己站点，就能获取到万站推广。\n\n1\\. 接入从未如此简单， 只需一行代码。\n\n2\\. 如果需要 页面pv，再添加一行。 \n\n3.如果还需要 热门文章列表，就再添加一行。</code></pre><p>二、对接获取代码</p>\n<pre><code>TSUA 需要3行代码 &lt;code&gt; 来完成它的工作。请按照以下说明在您的网站上安装它，然后开始使用 TSUA！</code></pre><p>我的网站是</p>\n<p><img src=\"/note/images/pasted-5.png\" alt><br><img src=\"/note/images/pasted-6.png\" alt><br><img src=\"/note/images/pasted-7.png\" alt><br><img src=\"/note/images/pasted-8.png\" alt><br><img src=\"/note/images/pasted-9.png\" alt></p>\n"},{"title":"中小网站SEO九大步骤","author":"知识铺","date":"2019-11-10T14:35:13.000Z","_content":"首先，优先把握网站的核心流量，把网站流量划分的更垂直些。比如说卖酒的要想好重点打哪部分客户。酒分为清香型、浓香型、酱香型，它们分别针对的是不同的用户群体。\n\n第二步，做好数据分析和追测，找到哪一类型的页面对网站有优势。中小网站没有那么多人力和成本去做页面校验，也没有那么大数据池让搜索引擎为你改变什么，所以更偏重于搜索引擎自身的规则。搜索引擎喜欢的点、不care的点是什么一定要找到，同时找到流量提升的方向。\n\n第三步，做一个执行性比较强的工作计划。相对于大型网站，在某个期间中小网站部门间的连接可能更空白些，所以一定要做好工作计划。产品、技术、编辑……不同部门不同岗位该做的事情都列出来，彼此沟通也是很重要的一面。\n\n第四步，做SEO元素的升级。比如我们在PC端的title是35到75个汉字的范围，但在移动端是24到48个汉字的范围。要保障从PC端投射到移动端的时候也有匹配关系，就需要做SEO的升级。\n\n第五步，用程序做批量修改、移除修改，做全面见效的东西。比如一个终端详情页肯定会有面包屑，它们要么是文章标题要么是商业的主标题。这些面包屑我们都要统一加一个h1页面。\n\n第六步，优化页面数据的读取能力，即数据组合能力。比如很多电商购物网站会按照用户的兴趣点去匹配页面，但现在很多人希望页面变得更简单，他们不希望耗费精力。实际上这种想法相对来说太过于暴力了，所以不同阶段的策略、步骤要学会匹配，不见得全部砍掉、也不见得全部添加。\n\n第七步，定期查询数据报告。\n\n第八步，新增有意思的或能解决用户问题的内容，同时把用户的属性点做数据匹配。\n\n第九步，一定要做好全渠道。不仅做百度，搜狗、360、神马、之类的都要做好。PC端和移动端也都要付出不同的精力。\n\n第十步，根据搜索引擎的变化实时做调整。","source":"_posts/中小网站SEO九大步骤.md","raw":"title: 中小网站SEO九大步骤\nauthor: 知识铺\ndate: 2019-11-10 22:35:13\ntags:\n---\n首先，优先把握网站的核心流量，把网站流量划分的更垂直些。比如说卖酒的要想好重点打哪部分客户。酒分为清香型、浓香型、酱香型，它们分别针对的是不同的用户群体。\n\n第二步，做好数据分析和追测，找到哪一类型的页面对网站有优势。中小网站没有那么多人力和成本去做页面校验，也没有那么大数据池让搜索引擎为你改变什么，所以更偏重于搜索引擎自身的规则。搜索引擎喜欢的点、不care的点是什么一定要找到，同时找到流量提升的方向。\n\n第三步，做一个执行性比较强的工作计划。相对于大型网站，在某个期间中小网站部门间的连接可能更空白些，所以一定要做好工作计划。产品、技术、编辑……不同部门不同岗位该做的事情都列出来，彼此沟通也是很重要的一面。\n\n第四步，做SEO元素的升级。比如我们在PC端的title是35到75个汉字的范围，但在移动端是24到48个汉字的范围。要保障从PC端投射到移动端的时候也有匹配关系，就需要做SEO的升级。\n\n第五步，用程序做批量修改、移除修改，做全面见效的东西。比如一个终端详情页肯定会有面包屑，它们要么是文章标题要么是商业的主标题。这些面包屑我们都要统一加一个h1页面。\n\n第六步，优化页面数据的读取能力，即数据组合能力。比如很多电商购物网站会按照用户的兴趣点去匹配页面，但现在很多人希望页面变得更简单，他们不希望耗费精力。实际上这种想法相对来说太过于暴力了，所以不同阶段的策略、步骤要学会匹配，不见得全部砍掉、也不见得全部添加。\n\n第七步，定期查询数据报告。\n\n第八步，新增有意思的或能解决用户问题的内容，同时把用户的属性点做数据匹配。\n\n第九步，一定要做好全渠道。不仅做百度，搜狗、360、神马、之类的都要做好。PC端和移动端也都要付出不同的精力。\n\n第十步，根据搜索引擎的变化实时做调整。","slug":"中小网站SEO九大步骤","published":1,"updated":"2019-11-10T14:35:23.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgij000gokdm50p9hqhk","content":"<p>首先，优先把握网站的核心流量，把网站流量划分的更垂直些。比如说卖酒的要想好重点打哪部分客户。酒分为清香型、浓香型、酱香型，它们分别针对的是不同的用户群体。</p>\n<p>第二步，做好数据分析和追测，找到哪一类型的页面对网站有优势。中小网站没有那么多人力和成本去做页面校验，也没有那么大数据池让搜索引擎为你改变什么，所以更偏重于搜索引擎自身的规则。搜索引擎喜欢的点、不care的点是什么一定要找到，同时找到流量提升的方向。</p>\n<p>第三步，做一个执行性比较强的工作计划。相对于大型网站，在某个期间中小网站部门间的连接可能更空白些，所以一定要做好工作计划。产品、技术、编辑……不同部门不同岗位该做的事情都列出来，彼此沟通也是很重要的一面。</p>\n<p>第四步，做SEO元素的升级。比如我们在PC端的title是35到75个汉字的范围，但在移动端是24到48个汉字的范围。要保障从PC端投射到移动端的时候也有匹配关系，就需要做SEO的升级。</p>\n<p>第五步，用程序做批量修改、移除修改，做全面见效的东西。比如一个终端详情页肯定会有面包屑，它们要么是文章标题要么是商业的主标题。这些面包屑我们都要统一加一个h1页面。</p>\n<p>第六步，优化页面数据的读取能力，即数据组合能力。比如很多电商购物网站会按照用户的兴趣点去匹配页面，但现在很多人希望页面变得更简单，他们不希望耗费精力。实际上这种想法相对来说太过于暴力了，所以不同阶段的策略、步骤要学会匹配，不见得全部砍掉、也不见得全部添加。</p>\n<p>第七步，定期查询数据报告。</p>\n<p>第八步，新增有意思的或能解决用户问题的内容，同时把用户的属性点做数据匹配。</p>\n<p>第九步，一定要做好全渠道。不仅做百度，搜狗、360、神马、之类的都要做好。PC端和移动端也都要付出不同的精力。</p>\n<p>第十步，根据搜索引擎的变化实时做调整。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，优先把握网站的核心流量，把网站流量划分的更垂直些。比如说卖酒的要想好重点打哪部分客户。酒分为清香型、浓香型、酱香型，它们分别针对的是不同的用户群体。</p>\n<p>第二步，做好数据分析和追测，找到哪一类型的页面对网站有优势。中小网站没有那么多人力和成本去做页面校验，也没有那么大数据池让搜索引擎为你改变什么，所以更偏重于搜索引擎自身的规则。搜索引擎喜欢的点、不care的点是什么一定要找到，同时找到流量提升的方向。</p>\n<p>第三步，做一个执行性比较强的工作计划。相对于大型网站，在某个期间中小网站部门间的连接可能更空白些，所以一定要做好工作计划。产品、技术、编辑……不同部门不同岗位该做的事情都列出来，彼此沟通也是很重要的一面。</p>\n<p>第四步，做SEO元素的升级。比如我们在PC端的title是35到75个汉字的范围，但在移动端是24到48个汉字的范围。要保障从PC端投射到移动端的时候也有匹配关系，就需要做SEO的升级。</p>\n<p>第五步，用程序做批量修改、移除修改，做全面见效的东西。比如一个终端详情页肯定会有面包屑，它们要么是文章标题要么是商业的主标题。这些面包屑我们都要统一加一个h1页面。</p>\n<p>第六步，优化页面数据的读取能力，即数据组合能力。比如很多电商购物网站会按照用户的兴趣点去匹配页面，但现在很多人希望页面变得更简单，他们不希望耗费精力。实际上这种想法相对来说太过于暴力了，所以不同阶段的策略、步骤要学会匹配，不见得全部砍掉、也不见得全部添加。</p>\n<p>第七步，定期查询数据报告。</p>\n<p>第八步，新增有意思的或能解决用户问题的内容，同时把用户的属性点做数据匹配。</p>\n<p>第九步，一定要做好全渠道。不仅做百度，搜狗、360、神马、之类的都要做好。PC端和移动端也都要付出不同的精力。</p>\n<p>第十步，根据搜索引擎的变化实时做调整。</p>\n"},{"title":"从零开始创建一个属于程序员的网站，第一个个人博客-知识铺","author":"知识铺","date":"2019-11-03T06:54:30.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、 hexo\n\n1\\. Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n2\\. 采坑：随着Markdown文件的增多，hexo g 进行生成静态页面内存溢出\n\n3\\. 个人博客预览-左侧部分\n\n\n![菜单部分](/note/images/pasted-2.png)\n\n3.1 主题推荐： hexo-theme-3-hexo\n\n3.2 本博客自己有定制化了，和原来的主题稍微不同\n\n4\\. 个人博客-主体部分：\n\n\n![博客主体](/note/images/pasted-3.png)\n\n4.1 添加音乐组件，学习过程听点轻音乐\n\n二、hugo\n\n2.1 hexo生成静态html很快遇到瓶颈，从新选型，找到hugo\n\n2.2 hugo 使用golang开发，性能原生支持的比较好\n\n2.3 hugo 不需要复杂的环境，一个执行文件即可，不像 hexo 依赖node.js npm webpack一堆插件\n\n \n![简单，不需要插件](/note/images/pasted-4.png)\n\n2.4 主题 hugo-theme-learn ，定制了部分\n\n2.5 需要跟着博主一起学习，从零开始摸索创建属性程序员自己折腾网站，想把什么想法实现都可以，可以立项，可投票，可参与，既增长了经验，也增长了知识，可以评论关注私聊。\n\n2.6 目前实现了个比较有意思的功能，下篇博客揭晓\n\n[https://blog.zshipu.com/2019/10/15/golang/20191015/01.1/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F2019%2F10%2F15%2Fgolang%2F20191015%2F01.1%2F)","source":"_posts/从零开始创建一个属于程序员的网站，第一个个人博客-知识铺.md","raw":"title: 从零开始创建一个属于程序员的网站，第一个个人博客-知识铺\nauthor: 知识铺\ndate: 2019-11-03 14:54:30\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、 hexo\n\n1\\. Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n2\\. 采坑：随着Markdown文件的增多，hexo g 进行生成静态页面内存溢出\n\n3\\. 个人博客预览-左侧部分\n\n\n![菜单部分](/note/images/pasted-2.png)\n\n3.1 主题推荐： hexo-theme-3-hexo\n\n3.2 本博客自己有定制化了，和原来的主题稍微不同\n\n4\\. 个人博客-主体部分：\n\n\n![博客主体](/note/images/pasted-3.png)\n\n4.1 添加音乐组件，学习过程听点轻音乐\n\n二、hugo\n\n2.1 hexo生成静态html很快遇到瓶颈，从新选型，找到hugo\n\n2.2 hugo 使用golang开发，性能原生支持的比较好\n\n2.3 hugo 不需要复杂的环境，一个执行文件即可，不像 hexo 依赖node.js npm webpack一堆插件\n\n \n![简单，不需要插件](/note/images/pasted-4.png)\n\n2.4 主题 hugo-theme-learn ，定制了部分\n\n2.5 需要跟着博主一起学习，从零开始摸索创建属性程序员自己折腾网站，想把什么想法实现都可以，可以立项，可投票，可参与，既增长了经验，也增长了知识，可以评论关注私聊。\n\n2.6 目前实现了个比较有意思的功能，下篇博客揭晓\n\n[https://blog.zshipu.com/2019/10/15/golang/20191015/01.1/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F2019%2F10%2F15%2Fgolang%2F20191015%2F01.1%2F)","slug":"从零开始创建一个属于程序员的网站，第一个个人博客-知识铺","published":1,"updated":"2019-11-03T08:59:53.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgil000hokdmz341ld1e","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、 hexo</p>\n<p>1. Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>2. 采坑：随着Markdown文件的增多，hexo g 进行生成静态页面内存溢出</p>\n<p>3. 个人博客预览-左侧部分</p>\n<p><img src=\"/note/images/pasted-2.png\" alt=\"菜单部分\"></p>\n<p>3.1 主题推荐： hexo-theme-3-hexo</p>\n<p>3.2 本博客自己有定制化了，和原来的主题稍微不同</p>\n<p>4. 个人博客-主体部分：</p>\n<p><img src=\"/note/images/pasted-3.png\" alt=\"博客主体\"></p>\n<p>4.1 添加音乐组件，学习过程听点轻音乐</p>\n<p>二、hugo</p>\n<p>2.1 hexo生成静态html很快遇到瓶颈，从新选型，找到hugo</p>\n<p>2.2 hugo 使用golang开发，性能原生支持的比较好</p>\n<p>2.3 hugo 不需要复杂的环境，一个执行文件即可，不像 hexo 依赖node.js npm webpack一堆插件</p>\n<p><img src=\"/note/images/pasted-4.png\" alt=\"简单，不需要插件\"></p>\n<p>2.4 主题 hugo-theme-learn ，定制了部分</p>\n<p>2.5 需要跟着博主一起学习，从零开始摸索创建属性程序员自己折腾网站，想把什么想法实现都可以，可以立项，可投票，可参与，既增长了经验，也增长了知识，可以评论关注私聊。</p>\n<p>2.6 目前实现了个比较有意思的功能，下篇博客揭晓</p>\n<p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F2019%2F10%2F15%2Fgolang%2F20191015%2F01.1%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/2019/10/15/golang/20191015/01.1/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、 hexo</p>\n<p>1. Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>2. 采坑：随着Markdown文件的增多，hexo g 进行生成静态页面内存溢出</p>\n<p>3. 个人博客预览-左侧部分</p>\n<p><img src=\"/note/images/pasted-2.png\" alt=\"菜单部分\"></p>\n<p>3.1 主题推荐： hexo-theme-3-hexo</p>\n<p>3.2 本博客自己有定制化了，和原来的主题稍微不同</p>\n<p>4. 个人博客-主体部分：</p>\n<p><img src=\"/note/images/pasted-3.png\" alt=\"博客主体\"></p>\n<p>4.1 添加音乐组件，学习过程听点轻音乐</p>\n<p>二、hugo</p>\n<p>2.1 hexo生成静态html很快遇到瓶颈，从新选型，找到hugo</p>\n<p>2.2 hugo 使用golang开发，性能原生支持的比较好</p>\n<p>2.3 hugo 不需要复杂的环境，一个执行文件即可，不像 hexo 依赖node.js npm webpack一堆插件</p>\n<p><img src=\"/note/images/pasted-4.png\" alt=\"简单，不需要插件\"></p>\n<p>2.4 主题 hugo-theme-learn ，定制了部分</p>\n<p>2.5 需要跟着博主一起学习，从零开始摸索创建属性程序员自己折腾网站，想把什么想法实现都可以，可以立项，可投票，可参与，既增长了经验，也增长了知识，可以评论关注私聊。</p>\n<p>2.6 目前实现了个比较有意思的功能，下篇博客揭晓</p>\n<p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F2019%2F10%2F15%2Fgolang%2F20191015%2F01.1%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/2019/10/15/golang/20191015/01.1/</a></p>\n"},{"title":"从零开始创建一个属于技术宅的产品，万站联盟- 知识铺","author":"知识铺","date":"2019-11-03T06:56:02.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、新技术博客站\n\n   1\\. 做新技术博客站点，总希望被百度，谷歌各大搜索引擎收录，可以被搜索到。那种感觉，那种滋味，满满的成就感。奈何大厂门槛高不可攀，技术人员只想安心搞技术，可是也需要交流，不能闭门造车。怎么办呢？\n\n   2\\. 有天夜里，突然想到，我们有成千上万的技术站点，为何不联合起来。做到你中有我，我中有你，众人拾柴火焰高，团结就是力量。就想到了这种，万站推广，联盟，联合起来。\n\n  3\\. 做到最公平的推广，最简单的结合，只需两行代码接入万站联盟中。你的文章就可能出现在成千上万的站点中。当然功能还在一步一步完善中，征集技术大牛加入。也可能有些人感觉，这种方式老套，这种方式幼稚，可是作为技术人员就是想做属于自己的产品，不用做市场调研，不用写大堆的需求文档，只做自己喜欢的产品。\n\n\n![万站联盟](/note/images/pasted-1.png)\n\n4\\. 列好todo list，一步一步完成\n\n* * *\n\n二、技术选型\n\n后端：  go + ssdb\n\n前端：  js    ，未来（hexo 插件，hugo插件）\n\n三、持续更新产品进度\n\n完成：\n\n1\\. 站点首页 [https://zshipu.com/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F)  html + css + js\n\n2\\. 博客 [https://blog.zshipu.com/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F)  hexo \n\n3\\. 归档博客 [https://blog.zshipu.com/article/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2Farticle%2F) hugo \n\n4\\. 工具篇 - html2md [https://zshipu.com/2md/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F2md%2F) \n\n5\\. 万站联盟 [https://zshipu.com/tsua/code/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftsua%2Fcode%2F) html + css + js\n\n未完成：\n\n1\\. 万站联盟 - hexo 插件、hugo 插件\n\n2\\. 万站联盟 - 热门文章列表， 共享文章列表，最新文章 （全站）\n\n2\\. 工具篇-做最美的todo [https://zshipu.com/todo/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftodo%2F)","source":"_posts/从零开始创建一个属于技术宅的产品，万站联盟-知识铺.md","raw":"title: 从零开始创建一个属于技术宅的产品，万站联盟- 知识铺\nauthor: 知识铺\ndate: 2019-11-03 14:56:02\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\n一、新技术博客站\n\n   1\\. 做新技术博客站点，总希望被百度，谷歌各大搜索引擎收录，可以被搜索到。那种感觉，那种滋味，满满的成就感。奈何大厂门槛高不可攀，技术人员只想安心搞技术，可是也需要交流，不能闭门造车。怎么办呢？\n\n   2\\. 有天夜里，突然想到，我们有成千上万的技术站点，为何不联合起来。做到你中有我，我中有你，众人拾柴火焰高，团结就是力量。就想到了这种，万站推广，联盟，联合起来。\n\n  3\\. 做到最公平的推广，最简单的结合，只需两行代码接入万站联盟中。你的文章就可能出现在成千上万的站点中。当然功能还在一步一步完善中，征集技术大牛加入。也可能有些人感觉，这种方式老套，这种方式幼稚，可是作为技术人员就是想做属于自己的产品，不用做市场调研，不用写大堆的需求文档，只做自己喜欢的产品。\n\n\n![万站联盟](/note/images/pasted-1.png)\n\n4\\. 列好todo list，一步一步完成\n\n* * *\n\n二、技术选型\n\n后端：  go + ssdb\n\n前端：  js    ，未来（hexo 插件，hugo插件）\n\n三、持续更新产品进度\n\n完成：\n\n1\\. 站点首页 [https://zshipu.com/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F)  html + css + js\n\n2\\. 博客 [https://blog.zshipu.com/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F)  hexo \n\n3\\. 归档博客 [https://blog.zshipu.com/article/](https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2Farticle%2F) hugo \n\n4\\. 工具篇 - html2md [https://zshipu.com/2md/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F2md%2F) \n\n5\\. 万站联盟 [https://zshipu.com/tsua/code/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftsua%2Fcode%2F) html + css + js\n\n未完成：\n\n1\\. 万站联盟 - hexo 插件、hugo 插件\n\n2\\. 万站联盟 - 热门文章列表， 共享文章列表，最新文章 （全站）\n\n2\\. 工具篇-做最美的todo [https://zshipu.com/todo/](https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftodo%2F)","slug":"从零开始创建一个属于技术宅的产品，万站联盟-知识铺","published":1,"updated":"2019-11-03T08:59:53.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgin000kokdm0on1fh7j","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、新技术博客站</p>\n<p>   1. 做新技术博客站点，总希望被百度，谷歌各大搜索引擎收录，可以被搜索到。那种感觉，那种滋味，满满的成就感。奈何大厂门槛高不可攀，技术人员只想安心搞技术，可是也需要交流，不能闭门造车。怎么办呢？</p>\n<p>   2. 有天夜里，突然想到，我们有成千上万的技术站点，为何不联合起来。做到你中有我，我中有你，众人拾柴火焰高，团结就是力量。就想到了这种，万站推广，联盟，联合起来。</p>\n<p>  3. 做到最公平的推广，最简单的结合，只需两行代码接入万站联盟中。你的文章就可能出现在成千上万的站点中。当然功能还在一步一步完善中，征集技术大牛加入。也可能有些人感觉，这种方式老套，这种方式幼稚，可是作为技术人员就是想做属于自己的产品，不用做市场调研，不用写大堆的需求文档，只做自己喜欢的产品。</p>\n<p><img src=\"/note/images/pasted-1.png\" alt=\"万站联盟\"></p>\n<p>4. 列好todo list，一步一步完成</p>\n<hr>\n<p>二、技术选型</p>\n<p>后端：  go + ssdb</p>\n<p>前端：  js    ，未来（hexo 插件，hugo插件）</p>\n<p>三、持续更新产品进度</p>\n<p>完成：</p>\n<p>1. 站点首页 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/</a>  html + css + js</p>\n<p>2. 博客 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/</a>  hexo </p>\n<p>3. 归档博客 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2Farticle%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/article/</a> hugo </p>\n<p>4. 工具篇 - html2md <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F2md%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/2md/</a> </p>\n<p>5. 万站联盟 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftsua%2Fcode%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/tsua/code/</a> html + css + js</p>\n<p>未完成：</p>\n<p>1. 万站联盟 - hexo 插件、hugo 插件</p>\n<p>2. 万站联盟 - 热门文章列表， 共享文章列表，最新文章 （全站）</p>\n<p>2. 工具篇-做最美的todo <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftodo%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/todo/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>一、新技术博客站</p>\n<p>   1. 做新技术博客站点，总希望被百度，谷歌各大搜索引擎收录，可以被搜索到。那种感觉，那种滋味，满满的成就感。奈何大厂门槛高不可攀，技术人员只想安心搞技术，可是也需要交流，不能闭门造车。怎么办呢？</p>\n<p>   2. 有天夜里，突然想到，我们有成千上万的技术站点，为何不联合起来。做到你中有我，我中有你，众人拾柴火焰高，团结就是力量。就想到了这种，万站推广，联盟，联合起来。</p>\n<p>  3. 做到最公平的推广，最简单的结合，只需两行代码接入万站联盟中。你的文章就可能出现在成千上万的站点中。当然功能还在一步一步完善中，征集技术大牛加入。也可能有些人感觉，这种方式老套，这种方式幼稚，可是作为技术人员就是想做属于自己的产品，不用做市场调研，不用写大堆的需求文档，只做自己喜欢的产品。</p>\n<p><img src=\"/note/images/pasted-1.png\" alt=\"万站联盟\"></p>\n<p>4. 列好todo list，一步一步完成</p>\n<hr>\n<p>二、技术选型</p>\n<p>后端：  go + ssdb</p>\n<p>前端：  js    ，未来（hexo 插件，hugo插件）</p>\n<p>三、持续更新产品进度</p>\n<p>完成：</p>\n<p>1. 站点首页 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/</a>  html + css + js</p>\n<p>2. 博客 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/</a>  hexo </p>\n<p>3. 归档博客 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.zshipu.com%2Farticle%2F\" target=\"_blank\" rel=\"noopener\">https://blog.zshipu.com/article/</a> hugo </p>\n<p>4. 工具篇 - html2md <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2F2md%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/2md/</a> </p>\n<p>5. 万站联盟 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftsua%2Fcode%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/tsua/code/</a> html + css + js</p>\n<p>未完成：</p>\n<p>1. 万站联盟 - hexo 插件、hugo 插件</p>\n<p>2. 万站联盟 - 热门文章列表， 共享文章列表，最新文章 （全站）</p>\n<p>2. 工具篇-做最美的todo <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzshipu.com%2Ftodo%2F\" target=\"_blank\" rel=\"noopener\">https://zshipu.com/todo/</a></p>\n"},{"title":"企业网站SEO优化指南","author":"知识铺","date":"2019-11-10T14:37:24.000Z","_content":"第一，把网站的品牌词、业务关键词排名做好，当我搜索某一关键词时会出现我的官网，别人知道我是做什么的。\n\n第二，关键词设置方面可能需要更大一些。当别人想要搜索他想要的简单需求时，能看到我们企业的一个展示就ok了。\n\n另外，边边角角的优化也一定要做好。比如企业的网址、路线图、地图、传真、邮箱、联系人、领导人介绍、产品介绍之类的都要放进去。","source":"_posts/企业网站SEO优化指南.md","raw":"title: 企业网站SEO优化指南\nauthor: 知识铺\ndate: 2019-11-10 22:37:24\ntags:\n---\n第一，把网站的品牌词、业务关键词排名做好，当我搜索某一关键词时会出现我的官网，别人知道我是做什么的。\n\n第二，关键词设置方面可能需要更大一些。当别人想要搜索他想要的简单需求时，能看到我们企业的一个展示就ok了。\n\n另外，边边角角的优化也一定要做好。比如企业的网址、路线图、地图、传真、邮箱、联系人、领导人介绍、产品介绍之类的都要放进去。","slug":"企业网站SEO优化指南","published":1,"updated":"2019-11-10T14:37:25.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgip000mokdmok1fux0o","content":"<p>第一，把网站的品牌词、业务关键词排名做好，当我搜索某一关键词时会出现我的官网，别人知道我是做什么的。</p>\n<p>第二，关键词设置方面可能需要更大一些。当别人想要搜索他想要的简单需求时，能看到我们企业的一个展示就ok了。</p>\n<p>另外，边边角角的优化也一定要做好。比如企业的网址、路线图、地图、传真、邮箱、联系人、领导人介绍、产品介绍之类的都要放进去。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一，把网站的品牌词、业务关键词排名做好，当我搜索某一关键词时会出现我的官网，别人知道我是做什么的。</p>\n<p>第二，关键词设置方面可能需要更大一些。当别人想要搜索他想要的简单需求时，能看到我们企业的一个展示就ok了。</p>\n<p>另外，边边角角的优化也一定要做好。比如企业的网址、路线图、地图、传真、邮箱、联系人、领导人介绍、产品介绍之类的都要放进去。</p>\n"},{"title":"从零开始创建一个漂亮的todo 第一版- 知识铺","author":"知识铺","date":"2019-11-03T07:43:40.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\ncss零基础，一步一步实现一个漂亮的todo\n一、 vue.js + html\napp.vue\n\n![知识铺-pasted-34.png](https:\\/\\/blog.zshipu.com/note/images/pasted-34.png)\nHelloWorld.vue\n\n![知识铺-pasted-35.png](https:\\/\\/blog.zshipu.com/note/images/pasted-35.png)\n\n![知识铺-pasted-36.png](https:\\/\\/blog.zshipu.com/note/images/pasted-36.png)\n\n\n![知识铺-pasted-37.png](https:\\/\\/blog.zshipu.com/note/images/pasted-37.png)\n\n![知识铺-pasted-38.png](https:\\/\\/blog.zshipu.com/note/images/pasted-38.png)\n![知识铺-pasted-39.png](https:\\/\\/blog.zshipu.com/note/images/pasted-39.png)\n![知识铺-pasted-40.png](https:\\/\\/blog.zshipu.com/note/images/pasted-40.png)\n[目前做到效果](https://zshipu.com/todo/)\n\n![知识铺-pasted-41.png](https:\\/\\/blog.zshipu.com/note/images/pasted-41.png)\n终极目标：\n\n![知识铺-pasted-42.png](https:\\/\\/blog.zshipu.com/note/images/pasted-42.png)\n","source":"_posts/从零开始创建一个漂亮的todo-第一版-知识铺.md","raw":"title: 从零开始创建一个漂亮的todo 第一版- 知识铺\nauthor: 知识铺\ndate: 2019-11-03 15:43:40\ntags:\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n\ncss零基础，一步一步实现一个漂亮的todo\n一、 vue.js + html\napp.vue\n\n![知识铺-pasted-34.png](https:\\/\\/blog.zshipu.com/note/images/pasted-34.png)\nHelloWorld.vue\n\n![知识铺-pasted-35.png](https:\\/\\/blog.zshipu.com/note/images/pasted-35.png)\n\n![知识铺-pasted-36.png](https:\\/\\/blog.zshipu.com/note/images/pasted-36.png)\n\n\n![知识铺-pasted-37.png](https:\\/\\/blog.zshipu.com/note/images/pasted-37.png)\n\n![知识铺-pasted-38.png](https:\\/\\/blog.zshipu.com/note/images/pasted-38.png)\n![知识铺-pasted-39.png](https:\\/\\/blog.zshipu.com/note/images/pasted-39.png)\n![知识铺-pasted-40.png](https:\\/\\/blog.zshipu.com/note/images/pasted-40.png)\n[目前做到效果](https://zshipu.com/todo/)\n\n![知识铺-pasted-41.png](https:\\/\\/blog.zshipu.com/note/images/pasted-41.png)\n终极目标：\n\n![知识铺-pasted-42.png](https:\\/\\/blog.zshipu.com/note/images/pasted-42.png)\n","slug":"从零开始创建一个漂亮的todo-第一版-知识铺","published":1,"updated":"2019-11-03T13:26:20.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgiq000ookdm2yxlpr7h","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>css零基础，一步一步实现一个漂亮的todo<br>一、 vue.js + html<br>app.vue</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-34.png\" alt=\"知识铺-pasted-34.png\"><br>HelloWorld.vue</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-35.png\" alt=\"知识铺-pasted-35.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-36.png\" alt=\"知识铺-pasted-36.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-37.png\" alt=\"知识铺-pasted-37.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-38.png\" alt=\"知识铺-pasted-38.png\"><br><img src=\"https://blog.zshipu.com/note/images/pasted-39.png\" alt=\"知识铺-pasted-39.png\"><br><img src=\"https://blog.zshipu.com/note/images/pasted-40.png\" alt=\"知识铺-pasted-40.png\"><br><a href=\"https://zshipu.com/todo/\" target=\"_blank\" rel=\"noopener\">目前做到效果</a></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-41.png\" alt=\"知识铺-pasted-41.png\"><br>终极目标：</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-42.png\" alt=\"知识铺-pasted-42.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<p>css零基础，一步一步实现一个漂亮的todo<br>一、 vue.js + html<br>app.vue</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-34.png\" alt=\"知识铺-pasted-34.png\"><br>HelloWorld.vue</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-35.png\" alt=\"知识铺-pasted-35.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-36.png\" alt=\"知识铺-pasted-36.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-37.png\" alt=\"知识铺-pasted-37.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-38.png\" alt=\"知识铺-pasted-38.png\"><br><img src=\"https://blog.zshipu.com/note/images/pasted-39.png\" alt=\"知识铺-pasted-39.png\"><br><img src=\"https://blog.zshipu.com/note/images/pasted-40.png\" alt=\"知识铺-pasted-40.png\"><br><a href=\"https://zshipu.com/todo/\" target=\"_blank\" rel=\"noopener\">目前做到效果</a></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-41.png\" alt=\"知识铺-pasted-41.png\"><br>终极目标：</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-42.png\" alt=\"知识铺-pasted-42.png\"></p>\n"},{"title":"大型网站SEO十二招，惊天逆袭排行榜","author":"知识铺","date":"2019-11-10T14:27:12.000Z","_content":"第一步，定一个目标。网站流量提升一倍、两倍，还是三倍。\n\n第二步，目标拆解。比如每个季度流量提升多少。\n\n第三步，数据分析。比如流量要提升100万，这100万流量是从什么地方来的，它们分别可能是从网站的内容列表、分离页面、专题页面、问答页面来的。\n\n第四步，做好网站SEO的公共元素。公共元素指的是页面都应该遵循的规范，head、 body、footer等都有遵循的通用规范。\n\n第五步，优先做一些短期见效的东西。比如，有些词或页面目前已经优先排在第二或第三四页了，那我们要优先把这些关键词做上去，这样我们的流量也会提升。\n\n第六步，建立流量结构数据池，把整个网站流量做拆分。品牌词比如关于Slogan、内容IP、领导人词的搜索。非品牌词分为：网站或页面的底层流量，说白了外部的搜索环境或用户的增加或减少，都不会造成对核心生意的威胁。\n\n第七步，做好网站最基础的技术性优化。比如网站显示层的数据交互，保持我们所生产内容的生命周期。有时大型网站做这一步时会陷入一个死循环，要么产品不统一、要么技术做不了，所以建议在这一步时要根据自己的情况做一些调整和适应。\n\n第八步，做一些标配的东西。比如PC和移动端的适配、数据校验、页面优化等工作，保持整体网页的活力。很多人可能觉得太宏观，实际上这属于一个思路，你网站如果不这样做，可能会和别人网站同质化特别严重，或者说你永远找不到自己网站最核心的东西，也就丧失了所谓的核心竞争力。\n\n第九步，实时查询数据报告，一定要多维度。比如一个电商网站有十万个详情页，经过查询发现实际上只有六万个被收录，剩下的四万里一半被PC收录一半被移动端收录。通过数据报告可以发现哪些需要短期调整，哪些需要长期调整。\n\n第十步，利用搜索引擎的全部算法（包括最新的还有历史的）。我们在网站上要做的调整不同，算法有的是针对内容流的，有的是针对链接的，有的是针对用户体验的。常见的算法包括起源算法、新货算法、冰桶识别算法、绿萝算法、天网蓝天飓风算法等。\n\n第十一步，根据网站业务的发展方向，做一个侧重点。比如网站在淡季旺季可能要在一些关键词的选择上有所侧重。\n\n第十二步，及时做一些筛选或侧重。大型网站有特别重要的一点，就是它会不断有新的内容产生，不断有旧的内容被淘汰。针对这样的数据，我们要及时做一些筛选或屏蔽。","source":"_posts/大型网站SEO十二步曲.md","raw":"title: 大型网站SEO十二招，惊天逆袭排行榜\nauthor: 知识铺\ndate: 2019-11-10 22:27:12\ntags:\n---\n第一步，定一个目标。网站流量提升一倍、两倍，还是三倍。\n\n第二步，目标拆解。比如每个季度流量提升多少。\n\n第三步，数据分析。比如流量要提升100万，这100万流量是从什么地方来的，它们分别可能是从网站的内容列表、分离页面、专题页面、问答页面来的。\n\n第四步，做好网站SEO的公共元素。公共元素指的是页面都应该遵循的规范，head、 body、footer等都有遵循的通用规范。\n\n第五步，优先做一些短期见效的东西。比如，有些词或页面目前已经优先排在第二或第三四页了，那我们要优先把这些关键词做上去，这样我们的流量也会提升。\n\n第六步，建立流量结构数据池，把整个网站流量做拆分。品牌词比如关于Slogan、内容IP、领导人词的搜索。非品牌词分为：网站或页面的底层流量，说白了外部的搜索环境或用户的增加或减少，都不会造成对核心生意的威胁。\n\n第七步，做好网站最基础的技术性优化。比如网站显示层的数据交互，保持我们所生产内容的生命周期。有时大型网站做这一步时会陷入一个死循环，要么产品不统一、要么技术做不了，所以建议在这一步时要根据自己的情况做一些调整和适应。\n\n第八步，做一些标配的东西。比如PC和移动端的适配、数据校验、页面优化等工作，保持整体网页的活力。很多人可能觉得太宏观，实际上这属于一个思路，你网站如果不这样做，可能会和别人网站同质化特别严重，或者说你永远找不到自己网站最核心的东西，也就丧失了所谓的核心竞争力。\n\n第九步，实时查询数据报告，一定要多维度。比如一个电商网站有十万个详情页，经过查询发现实际上只有六万个被收录，剩下的四万里一半被PC收录一半被移动端收录。通过数据报告可以发现哪些需要短期调整，哪些需要长期调整。\n\n第十步，利用搜索引擎的全部算法（包括最新的还有历史的）。我们在网站上要做的调整不同，算法有的是针对内容流的，有的是针对链接的，有的是针对用户体验的。常见的算法包括起源算法、新货算法、冰桶识别算法、绿萝算法、天网蓝天飓风算法等。\n\n第十一步，根据网站业务的发展方向，做一个侧重点。比如网站在淡季旺季可能要在一些关键词的选择上有所侧重。\n\n第十二步，及时做一些筛选或侧重。大型网站有特别重要的一点，就是它会不断有新的内容产生，不断有旧的内容被淘汰。针对这样的数据，我们要及时做一些筛选或屏蔽。","slug":"大型网站SEO十二步曲","published":1,"updated":"2019-11-10T14:28:39.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgir000qokdmiyqgsgx2","content":"<p>第一步，定一个目标。网站流量提升一倍、两倍，还是三倍。</p>\n<p>第二步，目标拆解。比如每个季度流量提升多少。</p>\n<p>第三步，数据分析。比如流量要提升100万，这100万流量是从什么地方来的，它们分别可能是从网站的内容列表、分离页面、专题页面、问答页面来的。</p>\n<p>第四步，做好网站SEO的公共元素。公共元素指的是页面都应该遵循的规范，head、 body、footer等都有遵循的通用规范。</p>\n<p>第五步，优先做一些短期见效的东西。比如，有些词或页面目前已经优先排在第二或第三四页了，那我们要优先把这些关键词做上去，这样我们的流量也会提升。</p>\n<p>第六步，建立流量结构数据池，把整个网站流量做拆分。品牌词比如关于Slogan、内容IP、领导人词的搜索。非品牌词分为：网站或页面的底层流量，说白了外部的搜索环境或用户的增加或减少，都不会造成对核心生意的威胁。</p>\n<p>第七步，做好网站最基础的技术性优化。比如网站显示层的数据交互，保持我们所生产内容的生命周期。有时大型网站做这一步时会陷入一个死循环，要么产品不统一、要么技术做不了，所以建议在这一步时要根据自己的情况做一些调整和适应。</p>\n<p>第八步，做一些标配的东西。比如PC和移动端的适配、数据校验、页面优化等工作，保持整体网页的活力。很多人可能觉得太宏观，实际上这属于一个思路，你网站如果不这样做，可能会和别人网站同质化特别严重，或者说你永远找不到自己网站最核心的东西，也就丧失了所谓的核心竞争力。</p>\n<p>第九步，实时查询数据报告，一定要多维度。比如一个电商网站有十万个详情页，经过查询发现实际上只有六万个被收录，剩下的四万里一半被PC收录一半被移动端收录。通过数据报告可以发现哪些需要短期调整，哪些需要长期调整。</p>\n<p>第十步，利用搜索引擎的全部算法（包括最新的还有历史的）。我们在网站上要做的调整不同，算法有的是针对内容流的，有的是针对链接的，有的是针对用户体验的。常见的算法包括起源算法、新货算法、冰桶识别算法、绿萝算法、天网蓝天飓风算法等。</p>\n<p>第十一步，根据网站业务的发展方向，做一个侧重点。比如网站在淡季旺季可能要在一些关键词的选择上有所侧重。</p>\n<p>第十二步，及时做一些筛选或侧重。大型网站有特别重要的一点，就是它会不断有新的内容产生，不断有旧的内容被淘汰。针对这样的数据，我们要及时做一些筛选或屏蔽。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一步，定一个目标。网站流量提升一倍、两倍，还是三倍。</p>\n<p>第二步，目标拆解。比如每个季度流量提升多少。</p>\n<p>第三步，数据分析。比如流量要提升100万，这100万流量是从什么地方来的，它们分别可能是从网站的内容列表、分离页面、专题页面、问答页面来的。</p>\n<p>第四步，做好网站SEO的公共元素。公共元素指的是页面都应该遵循的规范，head、 body、footer等都有遵循的通用规范。</p>\n<p>第五步，优先做一些短期见效的东西。比如，有些词或页面目前已经优先排在第二或第三四页了，那我们要优先把这些关键词做上去，这样我们的流量也会提升。</p>\n<p>第六步，建立流量结构数据池，把整个网站流量做拆分。品牌词比如关于Slogan、内容IP、领导人词的搜索。非品牌词分为：网站或页面的底层流量，说白了外部的搜索环境或用户的增加或减少，都不会造成对核心生意的威胁。</p>\n<p>第七步，做好网站最基础的技术性优化。比如网站显示层的数据交互，保持我们所生产内容的生命周期。有时大型网站做这一步时会陷入一个死循环，要么产品不统一、要么技术做不了，所以建议在这一步时要根据自己的情况做一些调整和适应。</p>\n<p>第八步，做一些标配的东西。比如PC和移动端的适配、数据校验、页面优化等工作，保持整体网页的活力。很多人可能觉得太宏观，实际上这属于一个思路，你网站如果不这样做，可能会和别人网站同质化特别严重，或者说你永远找不到自己网站最核心的东西，也就丧失了所谓的核心竞争力。</p>\n<p>第九步，实时查询数据报告，一定要多维度。比如一个电商网站有十万个详情页，经过查询发现实际上只有六万个被收录，剩下的四万里一半被PC收录一半被移动端收录。通过数据报告可以发现哪些需要短期调整，哪些需要长期调整。</p>\n<p>第十步，利用搜索引擎的全部算法（包括最新的还有历史的）。我们在网站上要做的调整不同，算法有的是针对内容流的，有的是针对链接的，有的是针对用户体验的。常见的算法包括起源算法、新货算法、冰桶识别算法、绿萝算法、天网蓝天飓风算法等。</p>\n<p>第十一步，根据网站业务的发展方向，做一个侧重点。比如网站在淡季旺季可能要在一些关键词的选择上有所侧重。</p>\n<p>第十二步，及时做一些筛选或侧重。大型网站有特别重要的一点，就是它会不断有新的内容产生，不断有旧的内容被淘汰。针对这样的数据，我们要及时做一些筛选或屏蔽。</p>\n"},{"title":"如何优雅地发布Hexo博客","author":"知识铺","date":"2019-11-03T04:07:00.000Z","_content":"知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n> 次优雅的发布hexo博客方式，为什么说是次优雅，因为它是目前我自己所知道的比较优雅的发布方式，可能存在其他更好的方式，欢迎指教~   \n> 转载：[http://blog.lzoro.com](https://link.jianshu.com?t=http://blog.lzoro.com)\n\n## 前言\n\n就目前而言，我所知道的发布Hexo的博客有如下几种：\n1、原始方式，也就是在服务器上编写md文件，然后利用`hexo g`来生成；\n2、利用github+hook来管理，[小锅](https://link.jianshu.com?t=http://www.swiftyper.com/)这里有[一篇教程](https://link.jianshu.com?t=http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/)；\n3、其他(hexo-admin or other plugins)；\n我所用的这个方式就属于第三种，略微改进版。也许你已经看过[那么可以概览之后忽略]，也许你没看过，那么请耐心看完，反正都点进来了，也许有福利呢，who knows...\n\n ![](//upload-images.jianshu.io/upload_images/5548926-52355809250f78c7.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/116/format/webp)\n\n## 环境说明\n\n格子这里所使用的环境如下：\n\n`1、阿里云 Linux 3.10.0-514.6.2.el7.x86_64\n2、NodeJs 6.10.3\n3、Hexo-cli: 1.0.2\n4、Hexo 3.3.7\n5、Hexo-admin \n6、Nginx1.9.9` \n\n本篇博客的重点在于Hexo博客的优雅发布，所以其他必需环境的安装大部分会简短带过。如果还未安装过相关环境或者不会安装相关环境的请自行百度，网上有特别丰富的教程资料，这里只给出部分链接供参考。\n\n重要说明：格子未直接使用`hexo server`启动hexo服务来对外提供博客的访问，而是通过nginx作为web服务器对外提供服务。\n\n## NodeJs\n\n**下载地址**\n\n`http://nodejs.cn/download/` \n\n**安装**\n请参考[这里](https://link.jianshu.com?t=http://www.cnblogs.com/8765h/p/4777746.html)，注意自己选择的安装包。\n\n## Hexo\n\n**官网**\n\n`https://hexo.io/` \n\n**安装**\n请参考[这里](https://link.jianshu.com?t=http://ibruce.info/2013/11/22/hexo-your-blog/)。需要注意的是，格子这里是将环境搭建在阿里云机器上，并不是通过GitHub托管，毕竟用GitHub的子域名感觉不够高大上，毕竟装(chui)比(niu)要装一整套的。所以我就花重金买了域名，买了云主机，买了oss，这样装备齐全之后，感觉逼格都提高了。\n\n ![](//upload-images.jianshu.io/upload_images/5548926-2ea2b5f9101c0865.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/137/format/webp)\n\n另：安装完博客之后，有很多主题可供挑选，点击[这里](https://link.jianshu.com?t=https://hexo.io/themes/)，找到自己喜欢的主题，并给hexo换上，舒舒服服地来一发吧。\n## Hexo-admin\n\n主角登场了，前面也有提到过，管理Hexo博客，我所知道的有几种方式。用手动管理的方式未免显得太过于原始人，即便你用本地的Markdown编辑器洋洋洒洒地写完了一篇博客，还是得屁颠屁颠地连接到服务器，然后将文件上传到博客服务器，再然后谄媚地告诉服务器，乖，帮我执行一下`hexo g`，命令执行完，静态页面生成后一篇博客才叫告一段落。\n也许你不嫌麻烦，觉得这样也挺好的，没那么多屁事儿折腾，那么就坚持自己的做法也未尝不可。\n但是，如果你跟我一样嫌(tai)麻(lan)烦(le)的话，那么利用Hexo-admin插件，加上自己部分diy，也许一个自己比较满意的Hexo博客发布方式就到手了，岂不是一大爽事。\n\n> 就是这个feel~倍儿爽\n\n反正我就是懒，不要拉我，让我懒。其实有时候这种“懒”往往能促使人进步，如果不嫌麻烦甘于重复劳动，虽然会少掉很多折腾，但也会少掉很多发现和进步。\n好了，鸡汤喝完，该说正事儿了。\n\n**hexo-admin官网**\n[https://jaredforsyth.com/hexo-admin/](https://link.jianshu.com?t=https://jaredforsyth.com/hexo-admin/)\n\n### step 1\n\n安装必要环境，请参照上面\n\n### step 2\n\n初始化博客，一般到这里你应该是已经初始化自己的博客了，如果还没有的话，请看下面\n\n`cd /usr/local/\nhexo init yourblog\ncd yourblog\nnpm install` \n### step 3\n\n安装hexo-admin插件，并且启动hexo服务，打开浏览器访问能看到基本的界面\n\n`npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/` \n\n**登录界面**\n\n ![](//upload-images.jianshu.io/upload_images/5548926-76381c3b23a04058.png?imageMogr2/auto-orient/strip|imageView2/2/w/1061/format/webp)\n\n到这里，没进行配置的小伙伴可能还无法登录，请接着往下看。\n### step 4\n\n在hexo的_config.yml配置hexo-admin\n\n`admin:\n   username: zoro\n   password_hash:be121740bf988b2225a313fa1f107ca1\n   secret: hey hexo\n   deployCommand: './admin_script/hexo-generate.sh'\n  '# expire: 60*1` \n\n`注`\n1、password_hash就是密码，通过bcrypt hash，你可以用尽你一切手段对自己的密码做一个bcrypt加密，C/Java/Python都可以，做人嘛，重要的是嗨森；\n2、secret用以cookies安全；\n3、deployCommand就是一个关键点，不要着急，下面给出说明；\n\n**主页**\n\n ![](//upload-images.jianshu.io/upload_images/5548926-cfba47671e9c6e9e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n*   Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\n*   Pages：就是诸如标签云之类的页面管理；\n*   About：关于admin插件的说明\n*   hexo-gen：这个原来是Deploy，被我修改了，关键节点；\n*   Settings:配置；\n\n### step 5\n\n先解释一下上面配置的那个`deployCommand`的用处，目的在于页面上你点击了Deploy页面下面的Deploy按钮的时候，所执行的脚本，这里格子拿它来作为执行`hexo g`的载体。\n说到这里，可能有些人不是很理解为什么要这么做，看官莫急，听我细细道来。\n其实，当你以`hexo server -d`启动了hexo服务的时候，hexo-admin插件在你修改了 某篇博已发布博客，或者新发布博客的时候，会在后台帮你执行一系列操作，所以这个时候，你可以通过`http://localhost:4000`访问就可以看到刚才发布到博客了，看到这里，有读者应该就要心里问候格子声：那你是不是傻，为什么还要折腾？容我说一句，原因只有一点：以`hexo server`启动的hexo对外提供的服务，并不是特别稳定，访问略慢，毕竟不是专门的web服务容器，而且如果你不以`nohup`方式启动的话，一旦关掉Xshell等操作界面的时候，就会被迫关掉，所以带来了一系列令人不喜的体验，这就是我折腾的唯一原因。\n因此，其实格子是以Nginx为web服务容器对外提供博客服务，每次将新博客生成静态Html放到Nginx配置的目录下，速度不要太快；格子的云主机只有`1G内存 单核CPU`,还是能有不俗的访问体验，所以觉得还算没白折腾。\n有点走题，话说回来，大体的步骤是这样：\n1、Nginx提供web服务\n2、hexo-admin提供博客管理\n3、利用hexo-admin在浏览器实现博客编写，或者自己本地md编辑器写好之后粘贴到hexo-admin，后者可能更为保险，防止丢失。\n4、利用hexo-admin留下来的deploy按钮，去执行我们放在博客服务器上的脚本，来生成html页面；\n\n所以，**重点**来了，在_config.yml里面填写好deployCommand的存储路径之后，在该路径下生成脚本；\n\n`touch hexo-generate.sh;\nvim hexo-generate.sh;` \n\n输入以下内容\n\n`#!/usr/bin/env sh\nhexo g` \n\n保存退出，并赋予执行权限\n\n`执行Shift+:，输入q，如下\n:q\nchmod +x hexo-generate.sh`    \n### step 6\n\n验证效果，这里我没有贴出Nginx的配置，稍等给出，可以先行验证是否有效果\n1、启动hexo server\n2、访问`http://localhost:4000/admin`并登陆\n3、进入Posts页面，新建博客并编写发布；\n4、进入Deploy页面（如果你还没改掉改名称的话），点击下面的Deploy按钮\n5、进入博客目录->public，查看相应的html是否有生成，如果有，那么恭喜你成功了。\n\n这里有两个问题：\n①、hexo-admin的作者将hexo-admin的服务依赖于hexo来运行[`hexo s`]，个人觉得有点浪费资源，但有碍于没时间，只好暂时将就这样。有兴趣的人，可以去阅读源码，然后将hexo-admin处理成独立的服务。\n②、Deploy页面的功能其实被我们diy成`hexo generate`的执行者了，所以有强迫症的小伙伴可以将页面内容改成具体含义的，比如格子改成了`hexo-gen`，修改路径在hexo目录下，`node_modules/hexo-admin/www/bundle.js`；\n差不多就是这样，突然觉得有点没头没尾，因为没有讲Nginx部分，下面给出，这样大家应该不会觉得特别乱；\n\n## Nginx\n\n**下载**\n[http://nginx.org/en/download.html](https://link.jianshu.com?t=http://nginx.org/en/download.html)\n**安装**\n请搜索网上安装教程，特别多，这里不做重复劳动了。如果有什么问题可以留言指出。\n**配置**\n\n `server {\n        listen 80;\n        #域名，多个用空格隔开\n        server_name lzoro.com blog.lzoro.com;\n        #配置hexo博客目录\n        root /usr/local/hexo/public;\n        location / {\n                index  index.html index.htm;\n        }\n        access_log /tmp/logs/nginx/hexo.access.log;\n    }`","source":"_posts/如何优雅地发布Hexo博客.md","raw":"title: 如何优雅地发布Hexo博客\nauthor: 知识铺\ntags:\n  - hexo\ncategories: []\ndate: 2019-11-03 12:07:00\n---\n知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。\n> 次优雅的发布hexo博客方式，为什么说是次优雅，因为它是目前我自己所知道的比较优雅的发布方式，可能存在其他更好的方式，欢迎指教~   \n> 转载：[http://blog.lzoro.com](https://link.jianshu.com?t=http://blog.lzoro.com)\n\n## 前言\n\n就目前而言，我所知道的发布Hexo的博客有如下几种：\n1、原始方式，也就是在服务器上编写md文件，然后利用`hexo g`来生成；\n2、利用github+hook来管理，[小锅](https://link.jianshu.com?t=http://www.swiftyper.com/)这里有[一篇教程](https://link.jianshu.com?t=http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/)；\n3、其他(hexo-admin or other plugins)；\n我所用的这个方式就属于第三种，略微改进版。也许你已经看过[那么可以概览之后忽略]，也许你没看过，那么请耐心看完，反正都点进来了，也许有福利呢，who knows...\n\n ![](//upload-images.jianshu.io/upload_images/5548926-52355809250f78c7.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/116/format/webp)\n\n## 环境说明\n\n格子这里所使用的环境如下：\n\n`1、阿里云 Linux 3.10.0-514.6.2.el7.x86_64\n2、NodeJs 6.10.3\n3、Hexo-cli: 1.0.2\n4、Hexo 3.3.7\n5、Hexo-admin \n6、Nginx1.9.9` \n\n本篇博客的重点在于Hexo博客的优雅发布，所以其他必需环境的安装大部分会简短带过。如果还未安装过相关环境或者不会安装相关环境的请自行百度，网上有特别丰富的教程资料，这里只给出部分链接供参考。\n\n重要说明：格子未直接使用`hexo server`启动hexo服务来对外提供博客的访问，而是通过nginx作为web服务器对外提供服务。\n\n## NodeJs\n\n**下载地址**\n\n`http://nodejs.cn/download/` \n\n**安装**\n请参考[这里](https://link.jianshu.com?t=http://www.cnblogs.com/8765h/p/4777746.html)，注意自己选择的安装包。\n\n## Hexo\n\n**官网**\n\n`https://hexo.io/` \n\n**安装**\n请参考[这里](https://link.jianshu.com?t=http://ibruce.info/2013/11/22/hexo-your-blog/)。需要注意的是，格子这里是将环境搭建在阿里云机器上，并不是通过GitHub托管，毕竟用GitHub的子域名感觉不够高大上，毕竟装(chui)比(niu)要装一整套的。所以我就花重金买了域名，买了云主机，买了oss，这样装备齐全之后，感觉逼格都提高了。\n\n ![](//upload-images.jianshu.io/upload_images/5548926-2ea2b5f9101c0865.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/137/format/webp)\n\n另：安装完博客之后，有很多主题可供挑选，点击[这里](https://link.jianshu.com?t=https://hexo.io/themes/)，找到自己喜欢的主题，并给hexo换上，舒舒服服地来一发吧。\n## Hexo-admin\n\n主角登场了，前面也有提到过，管理Hexo博客，我所知道的有几种方式。用手动管理的方式未免显得太过于原始人，即便你用本地的Markdown编辑器洋洋洒洒地写完了一篇博客，还是得屁颠屁颠地连接到服务器，然后将文件上传到博客服务器，再然后谄媚地告诉服务器，乖，帮我执行一下`hexo g`，命令执行完，静态页面生成后一篇博客才叫告一段落。\n也许你不嫌麻烦，觉得这样也挺好的，没那么多屁事儿折腾，那么就坚持自己的做法也未尝不可。\n但是，如果你跟我一样嫌(tai)麻(lan)烦(le)的话，那么利用Hexo-admin插件，加上自己部分diy，也许一个自己比较满意的Hexo博客发布方式就到手了，岂不是一大爽事。\n\n> 就是这个feel~倍儿爽\n\n反正我就是懒，不要拉我，让我懒。其实有时候这种“懒”往往能促使人进步，如果不嫌麻烦甘于重复劳动，虽然会少掉很多折腾，但也会少掉很多发现和进步。\n好了，鸡汤喝完，该说正事儿了。\n\n**hexo-admin官网**\n[https://jaredforsyth.com/hexo-admin/](https://link.jianshu.com?t=https://jaredforsyth.com/hexo-admin/)\n\n### step 1\n\n安装必要环境，请参照上面\n\n### step 2\n\n初始化博客，一般到这里你应该是已经初始化自己的博客了，如果还没有的话，请看下面\n\n`cd /usr/local/\nhexo init yourblog\ncd yourblog\nnpm install` \n### step 3\n\n安装hexo-admin插件，并且启动hexo服务，打开浏览器访问能看到基本的界面\n\n`npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/` \n\n**登录界面**\n\n ![](//upload-images.jianshu.io/upload_images/5548926-76381c3b23a04058.png?imageMogr2/auto-orient/strip|imageView2/2/w/1061/format/webp)\n\n到这里，没进行配置的小伙伴可能还无法登录，请接着往下看。\n### step 4\n\n在hexo的_config.yml配置hexo-admin\n\n`admin:\n   username: zoro\n   password_hash:be121740bf988b2225a313fa1f107ca1\n   secret: hey hexo\n   deployCommand: './admin_script/hexo-generate.sh'\n  '# expire: 60*1` \n\n`注`\n1、password_hash就是密码，通过bcrypt hash，你可以用尽你一切手段对自己的密码做一个bcrypt加密，C/Java/Python都可以，做人嘛，重要的是嗨森；\n2、secret用以cookies安全；\n3、deployCommand就是一个关键点，不要着急，下面给出说明；\n\n**主页**\n\n ![](//upload-images.jianshu.io/upload_images/5548926-cfba47671e9c6e9e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n*   Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；\n*   Pages：就是诸如标签云之类的页面管理；\n*   About：关于admin插件的说明\n*   hexo-gen：这个原来是Deploy，被我修改了，关键节点；\n*   Settings:配置；\n\n### step 5\n\n先解释一下上面配置的那个`deployCommand`的用处，目的在于页面上你点击了Deploy页面下面的Deploy按钮的时候，所执行的脚本，这里格子拿它来作为执行`hexo g`的载体。\n说到这里，可能有些人不是很理解为什么要这么做，看官莫急，听我细细道来。\n其实，当你以`hexo server -d`启动了hexo服务的时候，hexo-admin插件在你修改了 某篇博已发布博客，或者新发布博客的时候，会在后台帮你执行一系列操作，所以这个时候，你可以通过`http://localhost:4000`访问就可以看到刚才发布到博客了，看到这里，有读者应该就要心里问候格子声：那你是不是傻，为什么还要折腾？容我说一句，原因只有一点：以`hexo server`启动的hexo对外提供的服务，并不是特别稳定，访问略慢，毕竟不是专门的web服务容器，而且如果你不以`nohup`方式启动的话，一旦关掉Xshell等操作界面的时候，就会被迫关掉，所以带来了一系列令人不喜的体验，这就是我折腾的唯一原因。\n因此，其实格子是以Nginx为web服务容器对外提供博客服务，每次将新博客生成静态Html放到Nginx配置的目录下，速度不要太快；格子的云主机只有`1G内存 单核CPU`,还是能有不俗的访问体验，所以觉得还算没白折腾。\n有点走题，话说回来，大体的步骤是这样：\n1、Nginx提供web服务\n2、hexo-admin提供博客管理\n3、利用hexo-admin在浏览器实现博客编写，或者自己本地md编辑器写好之后粘贴到hexo-admin，后者可能更为保险，防止丢失。\n4、利用hexo-admin留下来的deploy按钮，去执行我们放在博客服务器上的脚本，来生成html页面；\n\n所以，**重点**来了，在_config.yml里面填写好deployCommand的存储路径之后，在该路径下生成脚本；\n\n`touch hexo-generate.sh;\nvim hexo-generate.sh;` \n\n输入以下内容\n\n`#!/usr/bin/env sh\nhexo g` \n\n保存退出，并赋予执行权限\n\n`执行Shift+:，输入q，如下\n:q\nchmod +x hexo-generate.sh`    \n### step 6\n\n验证效果，这里我没有贴出Nginx的配置，稍等给出，可以先行验证是否有效果\n1、启动hexo server\n2、访问`http://localhost:4000/admin`并登陆\n3、进入Posts页面，新建博客并编写发布；\n4、进入Deploy页面（如果你还没改掉改名称的话），点击下面的Deploy按钮\n5、进入博客目录->public，查看相应的html是否有生成，如果有，那么恭喜你成功了。\n\n这里有两个问题：\n①、hexo-admin的作者将hexo-admin的服务依赖于hexo来运行[`hexo s`]，个人觉得有点浪费资源，但有碍于没时间，只好暂时将就这样。有兴趣的人，可以去阅读源码，然后将hexo-admin处理成独立的服务。\n②、Deploy页面的功能其实被我们diy成`hexo generate`的执行者了，所以有强迫症的小伙伴可以将页面内容改成具体含义的，比如格子改成了`hexo-gen`，修改路径在hexo目录下，`node_modules/hexo-admin/www/bundle.js`；\n差不多就是这样，突然觉得有点没头没尾，因为没有讲Nginx部分，下面给出，这样大家应该不会觉得特别乱；\n\n## Nginx\n\n**下载**\n[http://nginx.org/en/download.html](https://link.jianshu.com?t=http://nginx.org/en/download.html)\n**安装**\n请搜索网上安装教程，特别多，这里不做重复劳动了。如果有什么问题可以留言指出。\n**配置**\n\n `server {\n        listen 80;\n        #域名，多个用空格隔开\n        server_name lzoro.com blog.lzoro.com;\n        #配置hexo博客目录\n        root /usr/local/hexo/public;\n        location / {\n                index  index.html index.htm;\n        }\n        access_log /tmp/logs/nginx/hexo.access.log;\n    }`","slug":"如何优雅地发布Hexo博客","published":1,"updated":"2019-11-03T08:59:53.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgit000rokdmmzf3nauw","content":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<blockquote>\n<p>次优雅的发布hexo博客方式，为什么说是次优雅，因为它是目前我自己所知道的比较优雅的发布方式，可能存在其他更好的方式，欢迎指教~<br>转载：<a href=\"https://link.jianshu.com?t=http://blog.lzoro.com\" target=\"_blank\" rel=\"noopener\">http://blog.lzoro.com</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>就目前而言，我所知道的发布Hexo的博客有如下几种：<br>1、原始方式，也就是在服务器上编写md文件，然后利用<code>hexo g</code>来生成；<br>2、利用github+hook来管理，<a href=\"https://link.jianshu.com?t=http://www.swiftyper.com/\" target=\"_blank\" rel=\"noopener\">小锅</a>这里有<a href=\"https://link.jianshu.com?t=http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/\" target=\"_blank\" rel=\"noopener\">一篇教程</a>；<br>3、其他(hexo-admin or other plugins)；<br>我所用的这个方式就属于第三种，略微改进版。也许你已经看过[那么可以概览之后忽略]，也许你没看过，那么请耐心看完，反正都点进来了，也许有福利呢，who knows…</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-52355809250f78c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/116/format/webp\" alt></p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>格子这里所使用的环境如下：</p>\n<p><code>1、阿里云 Linux 3.10.0-514.6.2.el7.x86_64\n2、NodeJs 6.10.3\n3、Hexo-cli: 1.0.2\n4、Hexo 3.3.7\n5、Hexo-admin \n6、Nginx1.9.9</code> </p>\n<p>本篇博客的重点在于Hexo博客的优雅发布，所以其他必需环境的安装大部分会简短带过。如果还未安装过相关环境或者不会安装相关环境的请自行百度，网上有特别丰富的教程资料，这里只给出部分链接供参考。</p>\n<p>重要说明：格子未直接使用<code>hexo server</code>启动hexo服务来对外提供博客的访问，而是通过nginx作为web服务器对外提供服务。</p>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p><strong>下载地址</strong></p>\n<p><code>http://nodejs.cn/download/</code> </p>\n<p><strong>安装</strong><br>请参考<a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/8765h/p/4777746.html\" target=\"_blank\" rel=\"noopener\">这里</a>，注意自己选择的安装包。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><strong>官网</strong></p>\n<p><code>https://hexo.io/</code> </p>\n<p><strong>安装</strong><br>请参考<a href=\"https://link.jianshu.com?t=http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">这里</a>。需要注意的是，格子这里是将环境搭建在阿里云机器上，并不是通过GitHub托管，毕竟用GitHub的子域名感觉不够高大上，毕竟装(chui)比(niu)要装一整套的。所以我就花重金买了域名，买了云主机，买了oss，这样装备齐全之后，感觉逼格都提高了。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-2ea2b5f9101c0865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/137/format/webp\" alt></p>\n<p>另：安装完博客之后，有很多主题可供挑选，点击<a href=\"https://link.jianshu.com?t=https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>，找到自己喜欢的主题，并给hexo换上，舒舒服服地来一发吧。</p>\n<h2 id=\"Hexo-admin\"><a href=\"#Hexo-admin\" class=\"headerlink\" title=\"Hexo-admin\"></a>Hexo-admin</h2><p>主角登场了，前面也有提到过，管理Hexo博客，我所知道的有几种方式。用手动管理的方式未免显得太过于原始人，即便你用本地的Markdown编辑器洋洋洒洒地写完了一篇博客，还是得屁颠屁颠地连接到服务器，然后将文件上传到博客服务器，再然后谄媚地告诉服务器，乖，帮我执行一下<code>hexo g</code>，命令执行完，静态页面生成后一篇博客才叫告一段落。<br>也许你不嫌麻烦，觉得这样也挺好的，没那么多屁事儿折腾，那么就坚持自己的做法也未尝不可。<br>但是，如果你跟我一样嫌(tai)麻(lan)烦(le)的话，那么利用Hexo-admin插件，加上自己部分diy，也许一个自己比较满意的Hexo博客发布方式就到手了，岂不是一大爽事。</p>\n<blockquote>\n<p>就是这个feel~倍儿爽</p>\n</blockquote>\n<p>反正我就是懒，不要拉我，让我懒。其实有时候这种“懒”往往能促使人进步，如果不嫌麻烦甘于重复劳动，虽然会少掉很多折腾，但也会少掉很多发现和进步。<br>好了，鸡汤喝完，该说正事儿了。</p>\n<p><strong>hexo-admin官网</strong><br><a href=\"https://link.jianshu.com?t=https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a></p>\n<h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h3><p>安装必要环境，请参照上面</p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h3><p>初始化博客，一般到这里你应该是已经初始化自己的博客了，如果还没有的话，请看下面</p>\n<p><code>cd /usr/local/\nhexo init yourblog\ncd yourblog\nnpm install</code> </p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3\"></a>step 3</h3><p>安装hexo-admin插件，并且启动hexo服务，打开浏览器访问能看到基本的界面</p>\n<p><code>npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/</code> </p>\n<p><strong>登录界面</strong></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-76381c3b23a04058.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1061/format/webp\" alt></p>\n<p>到这里，没进行配置的小伙伴可能还无法登录，请接着往下看。</p>\n<h3 id=\"step-4\"><a href=\"#step-4\" class=\"headerlink\" title=\"step 4\"></a>step 4</h3><p>在hexo的_config.yml配置hexo-admin</p>\n<p><code>admin:\n   username: zoro\n   password_hash:be121740bf988b2225a313fa1f107ca1\n   secret: hey hexo\n   deployCommand: &#39;./admin_script/hexo-generate.sh&#39;\n  &#39;# expire: 60*1</code> </p>\n<p><code>注</code><br>1、password_hash就是密码，通过bcrypt hash，你可以用尽你一切手段对自己的密码做一个bcrypt加密，C/Java/Python都可以，做人嘛，重要的是嗨森；<br>2、secret用以cookies安全；<br>3、deployCommand就是一个关键点，不要着急，下面给出说明；</p>\n<p><strong>主页</strong></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-cfba47671e9c6e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt></p>\n<ul>\n<li>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；</li>\n<li>Pages：就是诸如标签云之类的页面管理；</li>\n<li>About：关于admin插件的说明</li>\n<li>hexo-gen：这个原来是Deploy，被我修改了，关键节点；</li>\n<li>Settings:配置；</li>\n</ul>\n<h3 id=\"step-5\"><a href=\"#step-5\" class=\"headerlink\" title=\"step 5\"></a>step 5</h3><p>先解释一下上面配置的那个<code>deployCommand</code>的用处，目的在于页面上你点击了Deploy页面下面的Deploy按钮的时候，所执行的脚本，这里格子拿它来作为执行<code>hexo g</code>的载体。<br>说到这里，可能有些人不是很理解为什么要这么做，看官莫急，听我细细道来。<br>其实，当你以<code>hexo server -d</code>启动了hexo服务的时候，hexo-admin插件在你修改了 某篇博已发布博客，或者新发布博客的时候，会在后台帮你执行一系列操作，所以这个时候，你可以通过<code>http://localhost:4000</code>访问就可以看到刚才发布到博客了，看到这里，有读者应该就要心里问候格子声：那你是不是傻，为什么还要折腾？容我说一句，原因只有一点：以<code>hexo server</code>启动的hexo对外提供的服务，并不是特别稳定，访问略慢，毕竟不是专门的web服务容器，而且如果你不以<code>nohup</code>方式启动的话，一旦关掉Xshell等操作界面的时候，就会被迫关掉，所以带来了一系列令人不喜的体验，这就是我折腾的唯一原因。<br>因此，其实格子是以Nginx为web服务容器对外提供博客服务，每次将新博客生成静态Html放到Nginx配置的目录下，速度不要太快；格子的云主机只有<code>1G内存 单核CPU</code>,还是能有不俗的访问体验，所以觉得还算没白折腾。<br>有点走题，话说回来，大体的步骤是这样：<br>1、Nginx提供web服务<br>2、hexo-admin提供博客管理<br>3、利用hexo-admin在浏览器实现博客编写，或者自己本地md编辑器写好之后粘贴到hexo-admin，后者可能更为保险，防止丢失。<br>4、利用hexo-admin留下来的deploy按钮，去执行我们放在博客服务器上的脚本，来生成html页面；</p>\n<p>所以，<strong>重点</strong>来了，在_config.yml里面填写好deployCommand的存储路径之后，在该路径下生成脚本；</p>\n<p><code>touch hexo-generate.sh;\nvim hexo-generate.sh;</code> </p>\n<p>输入以下内容</p>\n<p><code>#!/usr/bin/env sh\nhexo g</code> </p>\n<p>保存退出，并赋予执行权限</p>\n<p><code>执行Shift+:，输入q，如下\n:q\nchmod +x hexo-generate.sh</code>    </p>\n<h3 id=\"step-6\"><a href=\"#step-6\" class=\"headerlink\" title=\"step 6\"></a>step 6</h3><p>验证效果，这里我没有贴出Nginx的配置，稍等给出，可以先行验证是否有效果<br>1、启动hexo server<br>2、访问<code>http://localhost:4000/admin</code>并登陆<br>3、进入Posts页面，新建博客并编写发布；<br>4、进入Deploy页面（如果你还没改掉改名称的话），点击下面的Deploy按钮<br>5、进入博客目录-&gt;public，查看相应的html是否有生成，如果有，那么恭喜你成功了。</p>\n<p>这里有两个问题：<br>①、hexo-admin的作者将hexo-admin的服务依赖于hexo来运行[<code>hexo s</code>]，个人觉得有点浪费资源，但有碍于没时间，只好暂时将就这样。有兴趣的人，可以去阅读源码，然后将hexo-admin处理成独立的服务。<br>②、Deploy页面的功能其实被我们diy成<code>hexo generate</code>的执行者了，所以有强迫症的小伙伴可以将页面内容改成具体含义的，比如格子改成了<code>hexo-gen</code>，修改路径在hexo目录下，<code>node_modules/hexo-admin/www/bundle.js</code>；<br>差不多就是这样，突然觉得有点没头没尾，因为没有讲Nginx部分，下面给出，这样大家应该不会觉得特别乱；</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p><strong>下载</strong><br><a href=\"https://link.jianshu.com?t=http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a><br><strong>安装</strong><br>请搜索网上安装教程，特别多，这里不做重复劳动了。如果有什么问题可以留言指出。<br><strong>配置</strong></p>\n<p> <code>server {\n        listen 80;\n        #域名，多个用空格隔开\n        server_name lzoro.com blog.lzoro.com;\n        #配置hexo博客目录\n        root /usr/local/hexo/public;\n        location / {\n                index  index.html index.htm;\n        }\n        access_log /tmp/logs/nginx/hexo.access.log;\n    }</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>知识铺： 致力于打造轻知识点，持续更新每次的知识点较少，阅读不累。不占太多时间，不停地来唤醒记忆深处的知识点。</p>\n<blockquote>\n<p>次优雅的发布hexo博客方式，为什么说是次优雅，因为它是目前我自己所知道的比较优雅的发布方式，可能存在其他更好的方式，欢迎指教~<br>转载：<a href=\"https://link.jianshu.com?t=http://blog.lzoro.com\" target=\"_blank\" rel=\"noopener\">http://blog.lzoro.com</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>就目前而言，我所知道的发布Hexo的博客有如下几种：<br>1、原始方式，也就是在服务器上编写md文件，然后利用<code>hexo g</code>来生成；<br>2、利用github+hook来管理，<a href=\"https://link.jianshu.com?t=http://www.swiftyper.com/\" target=\"_blank\" rel=\"noopener\">小锅</a>这里有<a href=\"https://link.jianshu.com?t=http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/\" target=\"_blank\" rel=\"noopener\">一篇教程</a>；<br>3、其他(hexo-admin or other plugins)；<br>我所用的这个方式就属于第三种，略微改进版。也许你已经看过[那么可以概览之后忽略]，也许你没看过，那么请耐心看完，反正都点进来了，也许有福利呢，who knows…</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-52355809250f78c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/116/format/webp\" alt></p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>格子这里所使用的环境如下：</p>\n<p><code>1、阿里云 Linux 3.10.0-514.6.2.el7.x86_64\n2、NodeJs 6.10.3\n3、Hexo-cli: 1.0.2\n4、Hexo 3.3.7\n5、Hexo-admin \n6、Nginx1.9.9</code> </p>\n<p>本篇博客的重点在于Hexo博客的优雅发布，所以其他必需环境的安装大部分会简短带过。如果还未安装过相关环境或者不会安装相关环境的请自行百度，网上有特别丰富的教程资料，这里只给出部分链接供参考。</p>\n<p>重要说明：格子未直接使用<code>hexo server</code>启动hexo服务来对外提供博客的访问，而是通过nginx作为web服务器对外提供服务。</p>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p><strong>下载地址</strong></p>\n<p><code>http://nodejs.cn/download/</code> </p>\n<p><strong>安装</strong><br>请参考<a href=\"https://link.jianshu.com?t=http://www.cnblogs.com/8765h/p/4777746.html\" target=\"_blank\" rel=\"noopener\">这里</a>，注意自己选择的安装包。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><strong>官网</strong></p>\n<p><code>https://hexo.io/</code> </p>\n<p><strong>安装</strong><br>请参考<a href=\"https://link.jianshu.com?t=http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">这里</a>。需要注意的是，格子这里是将环境搭建在阿里云机器上，并不是通过GitHub托管，毕竟用GitHub的子域名感觉不够高大上，毕竟装(chui)比(niu)要装一整套的。所以我就花重金买了域名，买了云主机，买了oss，这样装备齐全之后，感觉逼格都提高了。</p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-2ea2b5f9101c0865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/137/format/webp\" alt></p>\n<p>另：安装完博客之后，有很多主题可供挑选，点击<a href=\"https://link.jianshu.com?t=https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>，找到自己喜欢的主题，并给hexo换上，舒舒服服地来一发吧。</p>\n<h2 id=\"Hexo-admin\"><a href=\"#Hexo-admin\" class=\"headerlink\" title=\"Hexo-admin\"></a>Hexo-admin</h2><p>主角登场了，前面也有提到过，管理Hexo博客，我所知道的有几种方式。用手动管理的方式未免显得太过于原始人，即便你用本地的Markdown编辑器洋洋洒洒地写完了一篇博客，还是得屁颠屁颠地连接到服务器，然后将文件上传到博客服务器，再然后谄媚地告诉服务器，乖，帮我执行一下<code>hexo g</code>，命令执行完，静态页面生成后一篇博客才叫告一段落。<br>也许你不嫌麻烦，觉得这样也挺好的，没那么多屁事儿折腾，那么就坚持自己的做法也未尝不可。<br>但是，如果你跟我一样嫌(tai)麻(lan)烦(le)的话，那么利用Hexo-admin插件，加上自己部分diy，也许一个自己比较满意的Hexo博客发布方式就到手了，岂不是一大爽事。</p>\n<blockquote>\n<p>就是这个feel~倍儿爽</p>\n</blockquote>\n<p>反正我就是懒，不要拉我，让我懒。其实有时候这种“懒”往往能促使人进步，如果不嫌麻烦甘于重复劳动，虽然会少掉很多折腾，但也会少掉很多发现和进步。<br>好了，鸡汤喝完，该说正事儿了。</p>\n<p><strong>hexo-admin官网</strong><br><a href=\"https://link.jianshu.com?t=https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">https://jaredforsyth.com/hexo-admin/</a></p>\n<h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h3><p>安装必要环境，请参照上面</p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h3><p>初始化博客，一般到这里你应该是已经初始化自己的博客了，如果还没有的话，请看下面</p>\n<p><code>cd /usr/local/\nhexo init yourblog\ncd yourblog\nnpm install</code> </p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3\"></a>step 3</h3><p>安装hexo-admin插件，并且启动hexo服务，打开浏览器访问能看到基本的界面</p>\n<p><code>npm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/</code> </p>\n<p><strong>登录界面</strong></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-76381c3b23a04058.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1061/format/webp\" alt></p>\n<p>到这里，没进行配置的小伙伴可能还无法登录，请接着往下看。</p>\n<h3 id=\"step-4\"><a href=\"#step-4\" class=\"headerlink\" title=\"step 4\"></a>step 4</h3><p>在hexo的_config.yml配置hexo-admin</p>\n<p><code>admin:\n   username: zoro\n   password_hash:be121740bf988b2225a313fa1f107ca1\n   secret: hey hexo\n   deployCommand: &#39;./admin_script/hexo-generate.sh&#39;\n  &#39;# expire: 60*1</code> </p>\n<p><code>注</code><br>1、password_hash就是密码，通过bcrypt hash，你可以用尽你一切手段对自己的密码做一个bcrypt加密，C/Java/Python都可以，做人嘛，重要的是嗨森；<br>2、secret用以cookies安全；<br>3、deployCommand就是一个关键点，不要着急，下面给出说明；</p>\n<p><strong>主页</strong></p>\n<p> <img src=\"//upload-images.jianshu.io/upload_images/5548926-cfba47671e9c6e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt></p>\n<ul>\n<li>Post：博客文章列表，包括已经发布的和还在草稿箱等待宠幸的；</li>\n<li>Pages：就是诸如标签云之类的页面管理；</li>\n<li>About：关于admin插件的说明</li>\n<li>hexo-gen：这个原来是Deploy，被我修改了，关键节点；</li>\n<li>Settings:配置；</li>\n</ul>\n<h3 id=\"step-5\"><a href=\"#step-5\" class=\"headerlink\" title=\"step 5\"></a>step 5</h3><p>先解释一下上面配置的那个<code>deployCommand</code>的用处，目的在于页面上你点击了Deploy页面下面的Deploy按钮的时候，所执行的脚本，这里格子拿它来作为执行<code>hexo g</code>的载体。<br>说到这里，可能有些人不是很理解为什么要这么做，看官莫急，听我细细道来。<br>其实，当你以<code>hexo server -d</code>启动了hexo服务的时候，hexo-admin插件在你修改了 某篇博已发布博客，或者新发布博客的时候，会在后台帮你执行一系列操作，所以这个时候，你可以通过<code>http://localhost:4000</code>访问就可以看到刚才发布到博客了，看到这里，有读者应该就要心里问候格子声：那你是不是傻，为什么还要折腾？容我说一句，原因只有一点：以<code>hexo server</code>启动的hexo对外提供的服务，并不是特别稳定，访问略慢，毕竟不是专门的web服务容器，而且如果你不以<code>nohup</code>方式启动的话，一旦关掉Xshell等操作界面的时候，就会被迫关掉，所以带来了一系列令人不喜的体验，这就是我折腾的唯一原因。<br>因此，其实格子是以Nginx为web服务容器对外提供博客服务，每次将新博客生成静态Html放到Nginx配置的目录下，速度不要太快；格子的云主机只有<code>1G内存 单核CPU</code>,还是能有不俗的访问体验，所以觉得还算没白折腾。<br>有点走题，话说回来，大体的步骤是这样：<br>1、Nginx提供web服务<br>2、hexo-admin提供博客管理<br>3、利用hexo-admin在浏览器实现博客编写，或者自己本地md编辑器写好之后粘贴到hexo-admin，后者可能更为保险，防止丢失。<br>4、利用hexo-admin留下来的deploy按钮，去执行我们放在博客服务器上的脚本，来生成html页面；</p>\n<p>所以，<strong>重点</strong>来了，在_config.yml里面填写好deployCommand的存储路径之后，在该路径下生成脚本；</p>\n<p><code>touch hexo-generate.sh;\nvim hexo-generate.sh;</code> </p>\n<p>输入以下内容</p>\n<p><code>#!/usr/bin/env sh\nhexo g</code> </p>\n<p>保存退出，并赋予执行权限</p>\n<p><code>执行Shift+:，输入q，如下\n:q\nchmod +x hexo-generate.sh</code>    </p>\n<h3 id=\"step-6\"><a href=\"#step-6\" class=\"headerlink\" title=\"step 6\"></a>step 6</h3><p>验证效果，这里我没有贴出Nginx的配置，稍等给出，可以先行验证是否有效果<br>1、启动hexo server<br>2、访问<code>http://localhost:4000/admin</code>并登陆<br>3、进入Posts页面，新建博客并编写发布；<br>4、进入Deploy页面（如果你还没改掉改名称的话），点击下面的Deploy按钮<br>5、进入博客目录-&gt;public，查看相应的html是否有生成，如果有，那么恭喜你成功了。</p>\n<p>这里有两个问题：<br>①、hexo-admin的作者将hexo-admin的服务依赖于hexo来运行[<code>hexo s</code>]，个人觉得有点浪费资源，但有碍于没时间，只好暂时将就这样。有兴趣的人，可以去阅读源码，然后将hexo-admin处理成独立的服务。<br>②、Deploy页面的功能其实被我们diy成<code>hexo generate</code>的执行者了，所以有强迫症的小伙伴可以将页面内容改成具体含义的，比如格子改成了<code>hexo-gen</code>，修改路径在hexo目录下，<code>node_modules/hexo-admin/www/bundle.js</code>；<br>差不多就是这样，突然觉得有点没头没尾，因为没有讲Nginx部分，下面给出，这样大家应该不会觉得特别乱；</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p><strong>下载</strong><br><a href=\"https://link.jianshu.com?t=http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a><br><strong>安装</strong><br>请搜索网上安装教程，特别多，这里不做重复劳动了。如果有什么问题可以留言指出。<br><strong>配置</strong></p>\n<p> <code>server {\n        listen 80;\n        #域名，多个用空格隔开\n        server_name lzoro.com blog.lzoro.com;\n        #配置hexo博客目录\n        root /usr/local/hexo/public;\n        location / {\n                index  index.html index.htm;\n        }\n        access_log /tmp/logs/nginx/hexo.access.log;\n    }</code></p>\n"},{"title":"偏向内容网站SEO优化指南","author":"知识铺","date":"2019-11-10T14:38:48.000Z","_content":"首先，一定让你页面的生命周期长一些，不要让页面过早死亡。\n\n第二，你的内容一定要和其他竞品的内容做出差异化。\n\n第三，做好你的内容距阵或者说内容IP，这样你的流量才可以源源不断获取。\n\n第四，PC、移动端同步去做。\n\n第五，一定要不断地更新，清洗你关键词的数据仓。\n\n第六，尽可能的挖掘关键词。比如“宫爆鸡丁”，那么与它相关的，比如宫爆鸡丁的配料，宫爆鸡丁图片，宫爆鸡丁视频……等相关的内容都要呈现出来。","source":"_posts/偏向内容网站SEO优化指南.md","raw":"title: 偏向内容网站SEO优化指南\nauthor: 知识铺\ndate: 2019-11-10 22:38:48\ntags:\n---\n首先，一定让你页面的生命周期长一些，不要让页面过早死亡。\n\n第二，你的内容一定要和其他竞品的内容做出差异化。\n\n第三，做好你的内容距阵或者说内容IP，这样你的流量才可以源源不断获取。\n\n第四，PC、移动端同步去做。\n\n第五，一定要不断地更新，清洗你关键词的数据仓。\n\n第六，尽可能的挖掘关键词。比如“宫爆鸡丁”，那么与它相关的，比如宫爆鸡丁的配料，宫爆鸡丁图片，宫爆鸡丁视频……等相关的内容都要呈现出来。","slug":"偏向内容网站SEO优化指南","published":1,"updated":"2019-11-10T14:38:54.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgiu000sokdm8bhbe2db","content":"<p>首先，一定让你页面的生命周期长一些，不要让页面过早死亡。</p>\n<p>第二，你的内容一定要和其他竞品的内容做出差异化。</p>\n<p>第三，做好你的内容距阵或者说内容IP，这样你的流量才可以源源不断获取。</p>\n<p>第四，PC、移动端同步去做。</p>\n<p>第五，一定要不断地更新，清洗你关键词的数据仓。</p>\n<p>第六，尽可能的挖掘关键词。比如“宫爆鸡丁”，那么与它相关的，比如宫爆鸡丁的配料，宫爆鸡丁图片，宫爆鸡丁视频……等相关的内容都要呈现出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，一定让你页面的生命周期长一些，不要让页面过早死亡。</p>\n<p>第二，你的内容一定要和其他竞品的内容做出差异化。</p>\n<p>第三，做好你的内容距阵或者说内容IP，这样你的流量才可以源源不断获取。</p>\n<p>第四，PC、移动端同步去做。</p>\n<p>第五，一定要不断地更新，清洗你关键词的数据仓。</p>\n<p>第六，尽可能的挖掘关键词。比如“宫爆鸡丁”，那么与它相关的，比如宫爆鸡丁的配料，宫爆鸡丁图片，宫爆鸡丁视频……等相关的内容都要呈现出来。</p>\n"},{"title":"如何让百度收录新站","author":"知识铺","date":"2019-11-09T12:27:00.000Z","_content":"以www.xxdwzd.com为例：   \n一、百度已经收录了你的网站，首页还是被收录进去了的\n\n![知识铺-pasted-47.png](https:\\/\\/blog.zshipu.com/note/images/pasted-47.png)\n二、创建时间才1个多月，没有很多收录很正常，现在百度对新站、尤其是个人、企业的新站，都不怎么收录。\n\n![知识铺-pasted-48.png](https:\\/\\/blog.zshipu.com/note/images/pasted-48.png)\n三、无百度快照，你网站上的文章没有更新日期，所以我不能断定，是百度没收录你的内容，还是你压根没更新，导致快照无法更新。\n新网站要坚持每天都更新，最好是弄一些高质量的原创文章，做好文章关键词优化，这样才可能有百度收录。    \n四、百度反链过多，一个新站27万的反链……找找原因吧，看是你自己外链刷太多了，还是被竞争对手K了，想办法删一些。\n\n![知识铺-pasted-52.png](https:\\/\\/blog.zshipu.com/note/images/pasted-52.png)\n五、模拟蜘蛛，只抓取了你的首页、关于我们、新闻动态、联系我们四个板块，给剩下的板块多做点更新吧。\n\n![知识铺-pasted-53.png](https:\\/\\/blog.zshipu.com/note/images/pasted-53.png)\n\n六、图片太大，加载速度太慢，影响用户体验，随便一个图片都是十几万、二十几万字节，我光纤打开都还需要一定时间的缓冲。\n\n![知识铺-pasted-55.png](https:\\/\\/blog.zshipu.com/note/images/pasted-55.png)\n七、为什么要做关键词锁死？     \n为什么要做关键词锁死？   \n包括首页在内，除了title不同，所有的keywords和Description都被锁死了，这样做的坏处有两个，1、不利于关键词优化；2、容易被百度判定为作弊，引发K站风险。\n\n![知识铺-pasted-56.png](https:\\/\\/blog.zshipu.com/note/images/pasted-56.png)\n八、做了关键词锁死就算了，关键词密度布局还这么低，仅仅在keywords处出现了一次，同样不利于收录。\n任何一个页面，包括首页在内，所有关键词都只出现过一次，当然，这也和你关键词锁死有点关系。\n\n![知识铺-pasted-57.png](https:\\/\\/blog.zshipu.com/note/images/pasted-57.png)\n\n![知识铺-pasted-58.png](https:\\/\\/blog.zshipu.com/note/images/pasted-58.png)\n九、Description描写及不规范，完全不符合SEO基本原则。\n\n![知识铺-pasted-59.png](https:\\/\\/blog.zshipu.com/note/images/pasted-59.png)\n十、没有具备收录价值的着陆页，站上所有的内容，几乎都是直接从百度上面copy下来的，连最基本的伪原创都不肯做，谈何收录？   \n对于新站而言，多做高质量的原创、讲究四处一词原则，才能有效提高收录。\n\n十一、友链完全没有\n十二、站长优化建议，自己看\n\n建议：   \n1. 重设网站架构，优化网站内部结构，废除关键词、描述锁死；\n2. 增加关键词比重；\n3. 删除一些反链，优化反链；\n4. 在保证清晰度的前提下，将着陆页中的图片分辨率调低一点；\n5. 多做友链交换；\n6. 多写一些原创文章发布，实在没时间，做做伪原创也好，注意保持每日更新，每天更新数目不要少于10条，注意内容优化的原则。\n7. 通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：\"振动筛,振动机械,振动设备,筛分设备,筛分机械\"，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。\n\n8. 通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：\"振动筛,振动机械,振动设备,筛分设备,筛分机械\"，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。\n9. 新站上线，至少弄点原创内容，做点外链。\n\n\n\n\n","source":"_posts/如何让百度收录新站.md","raw":"title: 如何让百度收录新站\nauthor: 知识铺\ntags: []\ncategories: []\ndate: 2019-11-09 20:27:00\n---\n以www.xxdwzd.com为例：   \n一、百度已经收录了你的网站，首页还是被收录进去了的\n\n![知识铺-pasted-47.png](https:\\/\\/blog.zshipu.com/note/images/pasted-47.png)\n二、创建时间才1个多月，没有很多收录很正常，现在百度对新站、尤其是个人、企业的新站，都不怎么收录。\n\n![知识铺-pasted-48.png](https:\\/\\/blog.zshipu.com/note/images/pasted-48.png)\n三、无百度快照，你网站上的文章没有更新日期，所以我不能断定，是百度没收录你的内容，还是你压根没更新，导致快照无法更新。\n新网站要坚持每天都更新，最好是弄一些高质量的原创文章，做好文章关键词优化，这样才可能有百度收录。    \n四、百度反链过多，一个新站27万的反链……找找原因吧，看是你自己外链刷太多了，还是被竞争对手K了，想办法删一些。\n\n![知识铺-pasted-52.png](https:\\/\\/blog.zshipu.com/note/images/pasted-52.png)\n五、模拟蜘蛛，只抓取了你的首页、关于我们、新闻动态、联系我们四个板块，给剩下的板块多做点更新吧。\n\n![知识铺-pasted-53.png](https:\\/\\/blog.zshipu.com/note/images/pasted-53.png)\n\n六、图片太大，加载速度太慢，影响用户体验，随便一个图片都是十几万、二十几万字节，我光纤打开都还需要一定时间的缓冲。\n\n![知识铺-pasted-55.png](https:\\/\\/blog.zshipu.com/note/images/pasted-55.png)\n七、为什么要做关键词锁死？     \n为什么要做关键词锁死？   \n包括首页在内，除了title不同，所有的keywords和Description都被锁死了，这样做的坏处有两个，1、不利于关键词优化；2、容易被百度判定为作弊，引发K站风险。\n\n![知识铺-pasted-56.png](https:\\/\\/blog.zshipu.com/note/images/pasted-56.png)\n八、做了关键词锁死就算了，关键词密度布局还这么低，仅仅在keywords处出现了一次，同样不利于收录。\n任何一个页面，包括首页在内，所有关键词都只出现过一次，当然，这也和你关键词锁死有点关系。\n\n![知识铺-pasted-57.png](https:\\/\\/blog.zshipu.com/note/images/pasted-57.png)\n\n![知识铺-pasted-58.png](https:\\/\\/blog.zshipu.com/note/images/pasted-58.png)\n九、Description描写及不规范，完全不符合SEO基本原则。\n\n![知识铺-pasted-59.png](https:\\/\\/blog.zshipu.com/note/images/pasted-59.png)\n十、没有具备收录价值的着陆页，站上所有的内容，几乎都是直接从百度上面copy下来的，连最基本的伪原创都不肯做，谈何收录？   \n对于新站而言，多做高质量的原创、讲究四处一词原则，才能有效提高收录。\n\n十一、友链完全没有\n十二、站长优化建议，自己看\n\n建议：   \n1. 重设网站架构，优化网站内部结构，废除关键词、描述锁死；\n2. 增加关键词比重；\n3. 删除一些反链，优化反链；\n4. 在保证清晰度的前提下，将着陆页中的图片分辨率调低一点；\n5. 多做友链交换；\n6. 多写一些原创文章发布，实在没时间，做做伪原创也好，注意保持每日更新，每天更新数目不要少于10条，注意内容优化的原则。\n7. 通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：\"振动筛,振动机械,振动设备,筛分设备,筛分机械\"，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。\n\n8. 通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：\"振动筛,振动机械,振动设备,筛分设备,筛分机械\"，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。\n9. 新站上线，至少弄点原创内容，做点外链。\n\n\n\n\n","slug":"如何让百度收录新站","published":1,"updated":"2019-11-09T12:47:03.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgiw000uokdm2clntd3c","content":"<p>以<a href=\"http://www.xxdwzd.com为例：\" target=\"_blank\" rel=\"noopener\">www.xxdwzd.com为例：</a><br>一、百度已经收录了你的网站，首页还是被收录进去了的</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-47.png\" alt=\"知识铺-pasted-47.png\"><br>二、创建时间才1个多月，没有很多收录很正常，现在百度对新站、尤其是个人、企业的新站，都不怎么收录。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-48.png\" alt=\"知识铺-pasted-48.png\"><br>三、无百度快照，你网站上的文章没有更新日期，所以我不能断定，是百度没收录你的内容，还是你压根没更新，导致快照无法更新。<br>新网站要坚持每天都更新，最好是弄一些高质量的原创文章，做好文章关键词优化，这样才可能有百度收录。<br>四、百度反链过多，一个新站27万的反链……找找原因吧，看是你自己外链刷太多了，还是被竞争对手K了，想办法删一些。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-52.png\" alt=\"知识铺-pasted-52.png\"><br>五、模拟蜘蛛，只抓取了你的首页、关于我们、新闻动态、联系我们四个板块，给剩下的板块多做点更新吧。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-53.png\" alt=\"知识铺-pasted-53.png\"></p>\n<p>六、图片太大，加载速度太慢，影响用户体验，随便一个图片都是十几万、二十几万字节，我光纤打开都还需要一定时间的缓冲。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-55.png\" alt=\"知识铺-pasted-55.png\"><br>七、为什么要做关键词锁死？<br>为什么要做关键词锁死？<br>包括首页在内，除了title不同，所有的keywords和Description都被锁死了，这样做的坏处有两个，1、不利于关键词优化；2、容易被百度判定为作弊，引发K站风险。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-56.png\" alt=\"知识铺-pasted-56.png\"><br>八、做了关键词锁死就算了，关键词密度布局还这么低，仅仅在keywords处出现了一次，同样不利于收录。<br>任何一个页面，包括首页在内，所有关键词都只出现过一次，当然，这也和你关键词锁死有点关系。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-57.png\" alt=\"知识铺-pasted-57.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-58.png\" alt=\"知识铺-pasted-58.png\"><br>九、Description描写及不规范，完全不符合SEO基本原则。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-59.png\" alt=\"知识铺-pasted-59.png\"><br>十、没有具备收录价值的着陆页，站上所有的内容，几乎都是直接从百度上面copy下来的，连最基本的伪原创都不肯做，谈何收录？<br>对于新站而言，多做高质量的原创、讲究四处一词原则，才能有效提高收录。</p>\n<p>十一、友链完全没有<br>十二、站长优化建议，自己看</p>\n<p>建议：   </p>\n<ol>\n<li><p>重设网站架构，优化网站内部结构，废除关键词、描述锁死；</p>\n</li>\n<li><p>增加关键词比重；</p>\n</li>\n<li><p>删除一些反链，优化反链；</p>\n</li>\n<li><p>在保证清晰度的前提下，将着陆页中的图片分辨率调低一点；</p>\n</li>\n<li><p>多做友链交换；</p>\n</li>\n<li><p>多写一些原创文章发布，实在没时间，做做伪原创也好，注意保持每日更新，每天更新数目不要少于10条，注意内容优化的原则。</p>\n</li>\n<li><p>通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：”振动筛,振动机械,振动设备,筛分设备,筛分机械”，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。</p>\n</li>\n<li><p>通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：”振动筛,振动机械,振动设备,筛分设备,筛分机械”，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。</p>\n</li>\n<li><p>新站上线，至少弄点原创内容，做点外链。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>以<a href=\"http://www.xxdwzd.com为例：\" target=\"_blank\" rel=\"noopener\">www.xxdwzd.com为例：</a><br>一、百度已经收录了你的网站，首页还是被收录进去了的</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-47.png\" alt=\"知识铺-pasted-47.png\"><br>二、创建时间才1个多月，没有很多收录很正常，现在百度对新站、尤其是个人、企业的新站，都不怎么收录。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-48.png\" alt=\"知识铺-pasted-48.png\"><br>三、无百度快照，你网站上的文章没有更新日期，所以我不能断定，是百度没收录你的内容，还是你压根没更新，导致快照无法更新。<br>新网站要坚持每天都更新，最好是弄一些高质量的原创文章，做好文章关键词优化，这样才可能有百度收录。<br>四、百度反链过多，一个新站27万的反链……找找原因吧，看是你自己外链刷太多了，还是被竞争对手K了，想办法删一些。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-52.png\" alt=\"知识铺-pasted-52.png\"><br>五、模拟蜘蛛，只抓取了你的首页、关于我们、新闻动态、联系我们四个板块，给剩下的板块多做点更新吧。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-53.png\" alt=\"知识铺-pasted-53.png\"></p>\n<p>六、图片太大，加载速度太慢，影响用户体验，随便一个图片都是十几万、二十几万字节，我光纤打开都还需要一定时间的缓冲。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-55.png\" alt=\"知识铺-pasted-55.png\"><br>七、为什么要做关键词锁死？<br>为什么要做关键词锁死？<br>包括首页在内，除了title不同，所有的keywords和Description都被锁死了，这样做的坏处有两个，1、不利于关键词优化；2、容易被百度判定为作弊，引发K站风险。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-56.png\" alt=\"知识铺-pasted-56.png\"><br>八、做了关键词锁死就算了，关键词密度布局还这么低，仅仅在keywords处出现了一次，同样不利于收录。<br>任何一个页面，包括首页在内，所有关键词都只出现过一次，当然，这也和你关键词锁死有点关系。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-57.png\" alt=\"知识铺-pasted-57.png\"></p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-58.png\" alt=\"知识铺-pasted-58.png\"><br>九、Description描写及不规范，完全不符合SEO基本原则。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-59.png\" alt=\"知识铺-pasted-59.png\"><br>十、没有具备收录价值的着陆页，站上所有的内容，几乎都是直接从百度上面copy下来的，连最基本的伪原创都不肯做，谈何收录？<br>对于新站而言，多做高质量的原创、讲究四处一词原则，才能有效提高收录。</p>\n<p>十一、友链完全没有<br>十二、站长优化建议，自己看</p>\n<p>建议：   </p>\n<ol>\n<li><p>重设网站架构，优化网站内部结构，废除关键词、描述锁死；</p>\n</li>\n<li><p>增加关键词比重；</p>\n</li>\n<li><p>删除一些反链，优化反链；</p>\n</li>\n<li><p>在保证清晰度的前提下，将着陆页中的图片分辨率调低一点；</p>\n</li>\n<li><p>多做友链交换；</p>\n</li>\n<li><p>多写一些原创文章发布，实在没时间，做做伪原创也好，注意保持每日更新，每天更新数目不要少于10条，注意内容优化的原则。</p>\n</li>\n<li><p>通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：”振动筛,振动机械,振动设备,筛分设备,筛分机械”，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。</p>\n</li>\n<li><p>通用标题里最好加一些关键词，和振动设备相关的常用搜索关键词有：”振动筛,振动机械,振动设备,筛分设备,筛分机械”，那么标题可以撰写成：首页：【新乡市东威振动设备有限公司】_中国优质振动筛分机械设备供应商。 栏目可以写成：栏目名_优质振动筛分机械设备供应商【新乡东威】。 终端内容页可以写成：终端页文章/产品标题_栏目名_优质振动筛分机械设备供应商【新乡东威】；这样最大化的覆盖到目标关键词。</p>\n</li>\n<li><p>新站上线，至少弄点原创内容，做点外链。</p>\n</li>\n</ol>\n"},{"title":"影响网站收录的15个因素","author":"知识铺","date":"2019-11-09T12:48:18.000Z","_content":" \n网站的收录是由空间、网站、内容、抓取量、页面质量决定的。\n\n**1、网站速度的影响**\n\n机房问题、dns问题、cdn加速问题、服务器带宽、服务器硬件、操作系统、服务器软件以及服务器所安装的程序，这些都有可能影响我们网站的打开的速度。\n\n**2、nofollow标签的合理使用**\n\nnofollow是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。那么我们所要做的就是，用nofollow来屏蔽掉网站页面重复出现的链接以及对seo没有很高价值的页面，以减少网站权重的分散，并且可以减少搜索引擎重复抓取网站内每个页面的重复链接，以提高搜索引擎抓取效率。\n\n**3、网站硬盘问题:**如在服务器里面安装多个虚拟机，导致硬盘转速变慢，有时会导致搜索引擎打不开网站。\n\n**4、返回码问题：**比如同一个链接返回不同的返回码，又或者404页面返回200等\n\n**5、安全软件问题：**比如开启了防火墙规则、屏蔽了网站端口、开启防采集规则、开启防攻击规则等，导致了搜索引擎同一时间由于大量访问网站，而导致被安全软件拦截。\n\n**6、外链问题：**\n\n我们发外链的目的有两个，一个是吸引搜索引擎来抓取我们网站（引蜘蛛）另外一个就是提升网站的排名。外链首先要保证不能单纯的指向首页，要把外链做到指向栏目页、文章页的都有一些，另外做外链的时候一定要考虑一下几个因素：多样性、集中性、平衡性、相关性、准确性、高质量性、人文性等。\n\n**7、网站的权重**\n\n网站权重是搜索引擎对这个网站信任度的一个体现，如果网站的权重够高，那么搜索引擎抓取的也相应的会比较及时，反之则是网站权重低，搜索引擎对其信任度不高，也许蜘蛛会很久来访问网站一次，相应的抓取频率就很低了。\n\n**8、网站地图**\n\n网站地图是将网站的所有连接，最直观的反应给搜索引擎，可以提高搜素引擎的抓取效率，同时也为增加网站的收录提供了良好的帮助。\n\n**9、推广**\n网杂很难前期的推广也非常重要，前期推广包含QQ群推广、QQ空间推广、邮件推广、软文推广、论坛外链推广、平台信息推广。所有能引导来用户点击的推广都可以，当然一定要是良性的推广。因为有点击就会给予点击权重，而网页是具有一定权重以后才会被收录。\n\n**10、pr**\npr值是谷歌使用的衡量网站质量的一套标准，但是pr对于百度seo来说作用是非常小的，只是能够给我们提供一个参考价值，但是相对的来说pr的价值并不是很大。\n\n**11、url静态化**\n\nURL静态化的目的是有利于网站的排名，虽然现在搜索引擎已经可以收录动态地址，但是在在排名上静态化的页面比动态页面更有优势， 并且URL静态化将更有利于增加搜索引擎的信任度。但是，如果网站真的做不了静态化的话，那就尽量使用短的url并且url中尽量少的使用动态参数。\n\n**12、url的唯一性**\n网站中的同一个页面，只对应一个url地址；如果网站上多种url都能访问到同样的内容的话，那么就会出现以下问题：\na、搜索引擎会选一种url为标准，可能会和正版不同\nb、用户可能为同一网页的不同url做推荐，多种url形式分散了该网页的权重\n建议：\na、如果你的网站上已经存在多种url形式，建议按以下方式来处理：在系统中只使用正常形式url，不让用户接触到非正常形式的url\nb、不把session id、统计代码等不必要的内容放在url中\nc、不同形式的url，301永久跳转到正常形式防止用户输错而启用的备用域名.301永久跳转到主域名\nd、使用robots.txt禁止百度蜘蛛抓取你不想向用户展示的形式\n\n**13、ulr带关键词**\n尽量在url中带上网站的关键词（拼音），这样会在排名上面稍微的会占据一点因素，要知道百度是中文搜索引擎,对拼音的分析能力是很强大的。\n\n**14、代码因素**\n网站的代码要符合w3c的标准，结构层、表现层、行为层标签都应该完整，建议使用开源程序\n\n**15、head信息的正确性**\n\n网站的三大标签：标题标签(title)、关键词标签(keywords)、描述标签(description)","source":"_posts/影响网站收录的15个因素.md","raw":"title: 影响网站收录的15个因素\nauthor: 知识铺\ndate: 2019-11-09 20:48:18\ntags:\n---\n \n网站的收录是由空间、网站、内容、抓取量、页面质量决定的。\n\n**1、网站速度的影响**\n\n机房问题、dns问题、cdn加速问题、服务器带宽、服务器硬件、操作系统、服务器软件以及服务器所安装的程序，这些都有可能影响我们网站的打开的速度。\n\n**2、nofollow标签的合理使用**\n\nnofollow是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。那么我们所要做的就是，用nofollow来屏蔽掉网站页面重复出现的链接以及对seo没有很高价值的页面，以减少网站权重的分散，并且可以减少搜索引擎重复抓取网站内每个页面的重复链接，以提高搜索引擎抓取效率。\n\n**3、网站硬盘问题:**如在服务器里面安装多个虚拟机，导致硬盘转速变慢，有时会导致搜索引擎打不开网站。\n\n**4、返回码问题：**比如同一个链接返回不同的返回码，又或者404页面返回200等\n\n**5、安全软件问题：**比如开启了防火墙规则、屏蔽了网站端口、开启防采集规则、开启防攻击规则等，导致了搜索引擎同一时间由于大量访问网站，而导致被安全软件拦截。\n\n**6、外链问题：**\n\n我们发外链的目的有两个，一个是吸引搜索引擎来抓取我们网站（引蜘蛛）另外一个就是提升网站的排名。外链首先要保证不能单纯的指向首页，要把外链做到指向栏目页、文章页的都有一些，另外做外链的时候一定要考虑一下几个因素：多样性、集中性、平衡性、相关性、准确性、高质量性、人文性等。\n\n**7、网站的权重**\n\n网站权重是搜索引擎对这个网站信任度的一个体现，如果网站的权重够高，那么搜索引擎抓取的也相应的会比较及时，反之则是网站权重低，搜索引擎对其信任度不高，也许蜘蛛会很久来访问网站一次，相应的抓取频率就很低了。\n\n**8、网站地图**\n\n网站地图是将网站的所有连接，最直观的反应给搜索引擎，可以提高搜素引擎的抓取效率，同时也为增加网站的收录提供了良好的帮助。\n\n**9、推广**\n网杂很难前期的推广也非常重要，前期推广包含QQ群推广、QQ空间推广、邮件推广、软文推广、论坛外链推广、平台信息推广。所有能引导来用户点击的推广都可以，当然一定要是良性的推广。因为有点击就会给予点击权重，而网页是具有一定权重以后才会被收录。\n\n**10、pr**\npr值是谷歌使用的衡量网站质量的一套标准，但是pr对于百度seo来说作用是非常小的，只是能够给我们提供一个参考价值，但是相对的来说pr的价值并不是很大。\n\n**11、url静态化**\n\nURL静态化的目的是有利于网站的排名，虽然现在搜索引擎已经可以收录动态地址，但是在在排名上静态化的页面比动态页面更有优势， 并且URL静态化将更有利于增加搜索引擎的信任度。但是，如果网站真的做不了静态化的话，那就尽量使用短的url并且url中尽量少的使用动态参数。\n\n**12、url的唯一性**\n网站中的同一个页面，只对应一个url地址；如果网站上多种url都能访问到同样的内容的话，那么就会出现以下问题：\na、搜索引擎会选一种url为标准，可能会和正版不同\nb、用户可能为同一网页的不同url做推荐，多种url形式分散了该网页的权重\n建议：\na、如果你的网站上已经存在多种url形式，建议按以下方式来处理：在系统中只使用正常形式url，不让用户接触到非正常形式的url\nb、不把session id、统计代码等不必要的内容放在url中\nc、不同形式的url，301永久跳转到正常形式防止用户输错而启用的备用域名.301永久跳转到主域名\nd、使用robots.txt禁止百度蜘蛛抓取你不想向用户展示的形式\n\n**13、ulr带关键词**\n尽量在url中带上网站的关键词（拼音），这样会在排名上面稍微的会占据一点因素，要知道百度是中文搜索引擎,对拼音的分析能力是很强大的。\n\n**14、代码因素**\n网站的代码要符合w3c的标准，结构层、表现层、行为层标签都应该完整，建议使用开源程序\n\n**15、head信息的正确性**\n\n网站的三大标签：标题标签(title)、关键词标签(keywords)、描述标签(description)","slug":"影响网站收录的15个因素","published":1,"updated":"2019-11-09T12:48:34.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgix000vokdmkvz5rdwu","content":"<p>网站的收录是由空间、网站、内容、抓取量、页面质量决定的。</p>\n<p><strong>1、网站速度的影响</strong></p>\n<p>机房问题、dns问题、cdn加速问题、服务器带宽、服务器硬件、操作系统、服务器软件以及服务器所安装的程序，这些都有可能影响我们网站的打开的速度。</p>\n<p><strong>2、nofollow标签的合理使用</strong></p>\n<p>nofollow是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。那么我们所要做的就是，用nofollow来屏蔽掉网站页面重复出现的链接以及对seo没有很高价值的页面，以减少网站权重的分散，并且可以减少搜索引擎重复抓取网站内每个页面的重复链接，以提高搜索引擎抓取效率。</p>\n<p><strong>3、网站硬盘问题:</strong>如在服务器里面安装多个虚拟机，导致硬盘转速变慢，有时会导致搜索引擎打不开网站。</p>\n<p><strong>4、返回码问题：</strong>比如同一个链接返回不同的返回码，又或者404页面返回200等</p>\n<p><strong>5、安全软件问题：</strong>比如开启了防火墙规则、屏蔽了网站端口、开启防采集规则、开启防攻击规则等，导致了搜索引擎同一时间由于大量访问网站，而导致被安全软件拦截。</p>\n<p><strong>6、外链问题：</strong></p>\n<p>我们发外链的目的有两个，一个是吸引搜索引擎来抓取我们网站（引蜘蛛）另外一个就是提升网站的排名。外链首先要保证不能单纯的指向首页，要把外链做到指向栏目页、文章页的都有一些，另外做外链的时候一定要考虑一下几个因素：多样性、集中性、平衡性、相关性、准确性、高质量性、人文性等。</p>\n<p><strong>7、网站的权重</strong></p>\n<p>网站权重是搜索引擎对这个网站信任度的一个体现，如果网站的权重够高，那么搜索引擎抓取的也相应的会比较及时，反之则是网站权重低，搜索引擎对其信任度不高，也许蜘蛛会很久来访问网站一次，相应的抓取频率就很低了。</p>\n<p><strong>8、网站地图</strong></p>\n<p>网站地图是将网站的所有连接，最直观的反应给搜索引擎，可以提高搜素引擎的抓取效率，同时也为增加网站的收录提供了良好的帮助。</p>\n<p><strong>9、推广</strong><br>网杂很难前期的推广也非常重要，前期推广包含QQ群推广、QQ空间推广、邮件推广、软文推广、论坛外链推广、平台信息推广。所有能引导来用户点击的推广都可以，当然一定要是良性的推广。因为有点击就会给予点击权重，而网页是具有一定权重以后才会被收录。</p>\n<p><strong>10、pr</strong><br>pr值是谷歌使用的衡量网站质量的一套标准，但是pr对于百度seo来说作用是非常小的，只是能够给我们提供一个参考价值，但是相对的来说pr的价值并不是很大。</p>\n<p><strong>11、url静态化</strong></p>\n<p>URL静态化的目的是有利于网站的排名，虽然现在搜索引擎已经可以收录动态地址，但是在在排名上静态化的页面比动态页面更有优势， 并且URL静态化将更有利于增加搜索引擎的信任度。但是，如果网站真的做不了静态化的话，那就尽量使用短的url并且url中尽量少的使用动态参数。</p>\n<p><strong>12、url的唯一性</strong><br>网站中的同一个页面，只对应一个url地址；如果网站上多种url都能访问到同样的内容的话，那么就会出现以下问题：<br>a、搜索引擎会选一种url为标准，可能会和正版不同<br>b、用户可能为同一网页的不同url做推荐，多种url形式分散了该网页的权重<br>建议：<br>a、如果你的网站上已经存在多种url形式，建议按以下方式来处理：在系统中只使用正常形式url，不让用户接触到非正常形式的url<br>b、不把session id、统计代码等不必要的内容放在url中<br>c、不同形式的url，301永久跳转到正常形式防止用户输错而启用的备用域名.301永久跳转到主域名<br>d、使用robots.txt禁止百度蜘蛛抓取你不想向用户展示的形式</p>\n<p><strong>13、ulr带关键词</strong><br>尽量在url中带上网站的关键词（拼音），这样会在排名上面稍微的会占据一点因素，要知道百度是中文搜索引擎,对拼音的分析能力是很强大的。</p>\n<p><strong>14、代码因素</strong><br>网站的代码要符合w3c的标准，结构层、表现层、行为层标签都应该完整，建议使用开源程序</p>\n<p><strong>15、head信息的正确性</strong></p>\n<p>网站的三大标签：标题标签(title)、关键词标签(keywords)、描述标签(description)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网站的收录是由空间、网站、内容、抓取量、页面质量决定的。</p>\n<p><strong>1、网站速度的影响</strong></p>\n<p>机房问题、dns问题、cdn加速问题、服务器带宽、服务器硬件、操作系统、服务器软件以及服务器所安装的程序，这些都有可能影响我们网站的打开的速度。</p>\n<p><strong>2、nofollow标签的合理使用</strong></p>\n<p>nofollow是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。那么我们所要做的就是，用nofollow来屏蔽掉网站页面重复出现的链接以及对seo没有很高价值的页面，以减少网站权重的分散，并且可以减少搜索引擎重复抓取网站内每个页面的重复链接，以提高搜索引擎抓取效率。</p>\n<p><strong>3、网站硬盘问题:</strong>如在服务器里面安装多个虚拟机，导致硬盘转速变慢，有时会导致搜索引擎打不开网站。</p>\n<p><strong>4、返回码问题：</strong>比如同一个链接返回不同的返回码，又或者404页面返回200等</p>\n<p><strong>5、安全软件问题：</strong>比如开启了防火墙规则、屏蔽了网站端口、开启防采集规则、开启防攻击规则等，导致了搜索引擎同一时间由于大量访问网站，而导致被安全软件拦截。</p>\n<p><strong>6、外链问题：</strong></p>\n<p>我们发外链的目的有两个，一个是吸引搜索引擎来抓取我们网站（引蜘蛛）另外一个就是提升网站的排名。外链首先要保证不能单纯的指向首页，要把外链做到指向栏目页、文章页的都有一些，另外做外链的时候一定要考虑一下几个因素：多样性、集中性、平衡性、相关性、准确性、高质量性、人文性等。</p>\n<p><strong>7、网站的权重</strong></p>\n<p>网站权重是搜索引擎对这个网站信任度的一个体现，如果网站的权重够高，那么搜索引擎抓取的也相应的会比较及时，反之则是网站权重低，搜索引擎对其信任度不高，也许蜘蛛会很久来访问网站一次，相应的抓取频率就很低了。</p>\n<p><strong>8、网站地图</strong></p>\n<p>网站地图是将网站的所有连接，最直观的反应给搜索引擎，可以提高搜素引擎的抓取效率，同时也为增加网站的收录提供了良好的帮助。</p>\n<p><strong>9、推广</strong><br>网杂很难前期的推广也非常重要，前期推广包含QQ群推广、QQ空间推广、邮件推广、软文推广、论坛外链推广、平台信息推广。所有能引导来用户点击的推广都可以，当然一定要是良性的推广。因为有点击就会给予点击权重，而网页是具有一定权重以后才会被收录。</p>\n<p><strong>10、pr</strong><br>pr值是谷歌使用的衡量网站质量的一套标准，但是pr对于百度seo来说作用是非常小的，只是能够给我们提供一个参考价值，但是相对的来说pr的价值并不是很大。</p>\n<p><strong>11、url静态化</strong></p>\n<p>URL静态化的目的是有利于网站的排名，虽然现在搜索引擎已经可以收录动态地址，但是在在排名上静态化的页面比动态页面更有优势， 并且URL静态化将更有利于增加搜索引擎的信任度。但是，如果网站真的做不了静态化的话，那就尽量使用短的url并且url中尽量少的使用动态参数。</p>\n<p><strong>12、url的唯一性</strong><br>网站中的同一个页面，只对应一个url地址；如果网站上多种url都能访问到同样的内容的话，那么就会出现以下问题：<br>a、搜索引擎会选一种url为标准，可能会和正版不同<br>b、用户可能为同一网页的不同url做推荐，多种url形式分散了该网页的权重<br>建议：<br>a、如果你的网站上已经存在多种url形式，建议按以下方式来处理：在系统中只使用正常形式url，不让用户接触到非正常形式的url<br>b、不把session id、统计代码等不必要的内容放在url中<br>c、不同形式的url，301永久跳转到正常形式防止用户输错而启用的备用域名.301永久跳转到主域名<br>d、使用robots.txt禁止百度蜘蛛抓取你不想向用户展示的形式</p>\n<p><strong>13、ulr带关键词</strong><br>尽量在url中带上网站的关键词（拼音），这样会在排名上面稍微的会占据一点因素，要知道百度是中文搜索引擎,对拼音的分析能力是很强大的。</p>\n<p><strong>14、代码因素</strong><br>网站的代码要符合w3c的标准，结构层、表现层、行为层标签都应该完整，建议使用开源程序</p>\n<p><strong>15、head信息的正确性</strong></p>\n<p>网站的三大标签：标题标签(title)、关键词标签(keywords)、描述标签(description)</p>\n"},{"title":"新站SEO绝密九式，不小心泄漏","author":"知识铺","date":"2019-11-10T14:32:19.000Z","_content":"第一，在技术上下功夫。网站要做自身网页，还是PC、移动端都做差别还是蛮大的。我建议做自身页的网站，这样对用户或搜索引擎来说都是比较好的。\n\n第二，一定要在测试环境里把SEO的元素都搭建进去。比如我们的页面分为head、body、footer三部分，从头到尾我们都要做好优化和处理，包括我们的一些核心产品，都要做一些快速的入口。\n\n第三，做相应的测试。一些测试工具比如站长之家，都用蜘蛛模拟进行测试一下。\n\n第四， 做好提交的准备工作，提交网站的各个链接。传统有的SEO只是提交首页，这个效率太低。第一，不要只提交首页；第二，把各个栏目的首页、list页面都提交，时间允许的话各个页面都提交，这种情况要用工具，比如瑞士军刀（需要确认）、URL批量提交工具。\n\n第五，做好内容的更新和bug修改。更新分为真更新和假更新，假更新就是随机推荐，真更新就是根据用户去匹配，或根据后台的侦测搭配数据去推荐。UGC也是一种更新，比较讨巧的方式是利用开放性平台的代码来加强我们自身网页的更新。\n\n第六，适当对关键词做好SEO技术性的工作，内链、外链、锚链接都要做好。实际运营过程中，根据目前搜索量、关注点的变化，也要适当做一些调整。\n\n第七步，做好数据检查和统计，这非常重要。说白了就是周报、月报，网站日志，每周都要做一次，尤其是新网站搜索引擎来爬行的时候，日志一定要去查看，否则你不知道蜘蛛来的时候在你网站上干什么了。\n\n第八步，做好内容填充。一定要坚持去做，保持内容的新鲜度和质量度。\n\n第九步，根据实际情况实施作业调整。比如搜索引擎新进入这个点、算法更新，都尽量做一些调整。","source":"_posts/新站SEO绝密九式，不小心泄漏.md","raw":"title: 新站SEO绝密九式，不小心泄漏\nauthor: 知识铺\ndate: 2019-11-10 22:32:19\ntags:\n---\n第一，在技术上下功夫。网站要做自身网页，还是PC、移动端都做差别还是蛮大的。我建议做自身页的网站，这样对用户或搜索引擎来说都是比较好的。\n\n第二，一定要在测试环境里把SEO的元素都搭建进去。比如我们的页面分为head、body、footer三部分，从头到尾我们都要做好优化和处理，包括我们的一些核心产品，都要做一些快速的入口。\n\n第三，做相应的测试。一些测试工具比如站长之家，都用蜘蛛模拟进行测试一下。\n\n第四， 做好提交的准备工作，提交网站的各个链接。传统有的SEO只是提交首页，这个效率太低。第一，不要只提交首页；第二，把各个栏目的首页、list页面都提交，时间允许的话各个页面都提交，这种情况要用工具，比如瑞士军刀（需要确认）、URL批量提交工具。\n\n第五，做好内容的更新和bug修改。更新分为真更新和假更新，假更新就是随机推荐，真更新就是根据用户去匹配，或根据后台的侦测搭配数据去推荐。UGC也是一种更新，比较讨巧的方式是利用开放性平台的代码来加强我们自身网页的更新。\n\n第六，适当对关键词做好SEO技术性的工作，内链、外链、锚链接都要做好。实际运营过程中，根据目前搜索量、关注点的变化，也要适当做一些调整。\n\n第七步，做好数据检查和统计，这非常重要。说白了就是周报、月报，网站日志，每周都要做一次，尤其是新网站搜索引擎来爬行的时候，日志一定要去查看，否则你不知道蜘蛛来的时候在你网站上干什么了。\n\n第八步，做好内容填充。一定要坚持去做，保持内容的新鲜度和质量度。\n\n第九步，根据实际情况实施作业调整。比如搜索引擎新进入这个点、算法更新，都尽量做一些调整。","slug":"新站SEO绝密九式，不小心泄漏","published":1,"updated":"2019-11-10T14:32:21.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgiy000wokdmmyysappu","content":"<p>第一，在技术上下功夫。网站要做自身网页，还是PC、移动端都做差别还是蛮大的。我建议做自身页的网站，这样对用户或搜索引擎来说都是比较好的。</p>\n<p>第二，一定要在测试环境里把SEO的元素都搭建进去。比如我们的页面分为head、body、footer三部分，从头到尾我们都要做好优化和处理，包括我们的一些核心产品，都要做一些快速的入口。</p>\n<p>第三，做相应的测试。一些测试工具比如站长之家，都用蜘蛛模拟进行测试一下。</p>\n<p>第四， 做好提交的准备工作，提交网站的各个链接。传统有的SEO只是提交首页，这个效率太低。第一，不要只提交首页；第二，把各个栏目的首页、list页面都提交，时间允许的话各个页面都提交，这种情况要用工具，比如瑞士军刀（需要确认）、URL批量提交工具。</p>\n<p>第五，做好内容的更新和bug修改。更新分为真更新和假更新，假更新就是随机推荐，真更新就是根据用户去匹配，或根据后台的侦测搭配数据去推荐。UGC也是一种更新，比较讨巧的方式是利用开放性平台的代码来加强我们自身网页的更新。</p>\n<p>第六，适当对关键词做好SEO技术性的工作，内链、外链、锚链接都要做好。实际运营过程中，根据目前搜索量、关注点的变化，也要适当做一些调整。</p>\n<p>第七步，做好数据检查和统计，这非常重要。说白了就是周报、月报，网站日志，每周都要做一次，尤其是新网站搜索引擎来爬行的时候，日志一定要去查看，否则你不知道蜘蛛来的时候在你网站上干什么了。</p>\n<p>第八步，做好内容填充。一定要坚持去做，保持内容的新鲜度和质量度。</p>\n<p>第九步，根据实际情况实施作业调整。比如搜索引擎新进入这个点、算法更新，都尽量做一些调整。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一，在技术上下功夫。网站要做自身网页，还是PC、移动端都做差别还是蛮大的。我建议做自身页的网站，这样对用户或搜索引擎来说都是比较好的。</p>\n<p>第二，一定要在测试环境里把SEO的元素都搭建进去。比如我们的页面分为head、body、footer三部分，从头到尾我们都要做好优化和处理，包括我们的一些核心产品，都要做一些快速的入口。</p>\n<p>第三，做相应的测试。一些测试工具比如站长之家，都用蜘蛛模拟进行测试一下。</p>\n<p>第四， 做好提交的准备工作，提交网站的各个链接。传统有的SEO只是提交首页，这个效率太低。第一，不要只提交首页；第二，把各个栏目的首页、list页面都提交，时间允许的话各个页面都提交，这种情况要用工具，比如瑞士军刀（需要确认）、URL批量提交工具。</p>\n<p>第五，做好内容的更新和bug修改。更新分为真更新和假更新，假更新就是随机推荐，真更新就是根据用户去匹配，或根据后台的侦测搭配数据去推荐。UGC也是一种更新，比较讨巧的方式是利用开放性平台的代码来加强我们自身网页的更新。</p>\n<p>第六，适当对关键词做好SEO技术性的工作，内链、外链、锚链接都要做好。实际运营过程中，根据目前搜索量、关注点的变化，也要适当做一些调整。</p>\n<p>第七步，做好数据检查和统计，这非常重要。说白了就是周报、月报，网站日志，每周都要做一次，尤其是新网站搜索引擎来爬行的时候，日志一定要去查看，否则你不知道蜘蛛来的时候在你网站上干什么了。</p>\n<p>第八步，做好内容填充。一定要坚持去做，保持内容的新鲜度和质量度。</p>\n<p>第九步，根据实际情况实施作业调整。比如搜索引擎新进入这个点、算法更新，都尽量做一些调整。</p>\n"},{"title":"新站不被收录自检","author":"知识铺","date":"2019-11-09T12:50:27.000Z","_content":"### **一、网站服务器不稳定**\n\n就目前云服务器的市场来说，大部分人会选择阿里云或者腾讯云，基本上是不存在网站服务器不稳定这种情况的。但是也不排除有部分人会购买一些很便宜的服务器或者虚拟主机，所以这个问题还是需要稍稍排查下。\n\n### **二、robots文件设置错误**\n\n关于什么是robots，以及robots怎么用，请自行百度查找，一般情况下robots文件是不会设置错误的。\n\n### **三、网站域名选择问题**\n\n这个基本上属于小概率事件，意思就是说你目前用的这个域名以前被别人用过，并且还被用在了非法用途上，可能已经被百度k了，所以你的网站连首页都没有被收录。\n\n虽说是小概率事件，但还是要排查下。\n\n方法一：打开这个链接：[http://whois.domaintools.com/](https://link.zhihu.com/?target=http%3A//whois.domaintools.com/)，输入你网站URL，然后点击搜索，跳转页面后你就会看到这个URL的历史使用情况了。\n\n![知识铺-pasted-60.png](https:\\/\\/blog.zshipu.com/note/images/pasted-60.png)\n\n\n方法二：直接在百度上搜索你的url，看看有什么相关链接没有。\n\n### **四、网站文章原创度低**\n\n这种情况的几率稍微大些，因为有部分人不擅长写文章，所以就喜欢伪原创或者直接抄袭什么的，这样百度会认为这个网站不优秀，严重些还会加长观察期。\n\n### **五、网站文章少**\n\n这一点是简小师自己总结的，因为我实在是想不到除此之外其他的任何可能性了，再加上我文笔又差。\n\n### **六、关键词堆砌**\n\n顾名思义就是说在网站页面中大量的增加某个关键词出现的频次，以此来达到提升该关键词在页面中的关键词密度，从而误导搜索引擎抓取间接提升网站排名的方法。\n\n随着搜索引擎的不断提升改进，关键词的堆砌手法会被搜索引擎用分词算法查出来，一旦认定网站有严重堆砌行为，轻则降权，重则被K站。\n\n### **七、新站外链太少**\n\n一般新站外链就比较少，所以需要我们适当的增加一些外链。\n\n外链就是指在别的网站导入自己网站的链接。\n\n### **八、百度蜘蛛没有抓取过网站**\n\n这种情况的概率稍大些，因为新网站本身外链就比较少，或者说根本就没有，再加上你连URL都没有提交过，那么就有可能出现这个问题。\n\n所以要确定下百度蜘蛛到底有没有抓取过我们的网站，简小师以“宝塔”一键配置的服务器环境举例，我们打开宝塔面板，点击网页左边的“文件”，文件路径：“www/wwwlogs/”，打开之后你会发现有以“.log”为后缀的文件，嗯这些就是了。\n\n\n![知识铺-pasted-61.png](https:\\/\\/blog.zshipu.com/note/images/pasted-61.png)\n宝塔面板截图\n\n然后右键点击下载，把文件下载到本地之后，打开这个网址：[http://www.loghao.com/](https://link.zhihu.com/?target=http%3A//www.loghao.com/)，上传文件，开始分析。\n\n如果说“Baiduspider蜘蛛(0)”这里的括号内显示零，则表示百度蜘蛛没有抓取过网站，如果数字不为零，则表示百度蜘蛛抓取过网站，只是没有收录而已。\n\n\n![知识铺-pasted-62.png](https:\\/\\/blog.zshipu.com/note/images/pasted-62.png)网站日志分析截图\n\n如果百度蜘蛛没有抓取过我们的网站，这个很好解决。\n\n首先打开百度首页，在搜索栏里搜索自己网站URL，如果搜索结果显示“很抱歉，没有找到与URL相关的网页”，这说明我们的网站没有被收录。\n\n其次我们会看到这句话的下方有“提交网址”字样，别犹豫，直接狂点这个网址，得让百度感受一下我们的愤怒，这样百度蜘蛛就会感到恐惧，从而可以提高网站的收录率。\n\n当然了只是让百度蜘蛛感到恐惧还是远远不够的，最后还是得把自己的URL提交给它，这样它才知道具体该怎么做。\n\n如果说你没有百度账号的话，需要注册一个，不然是没有办法提交自己的URL的。这里要说明一点，主动提交自己的URL，是可以加快爬虫抓取速度，但无法解决网站内容是否收录，比如说“新手建站之路”也提交过很多次URL，但依旧未收录，可能是因为百度蜘蛛不害怕我吧。\n\n在这里推荐一篇文章，来源是百度经验，这篇文章写得不错很详细，我就不重新写了。链接地址：[直达链接](https://jingyan.baidu.com/article/6b97984dee19b81ca3b0bf4c.html)。\n\n里面有一点需要注意下，文章中他是用FTP上传文件的，但如果你的服务器是用“宝塔”一键配置的环境，那就会简单很多。直接登录宝塔面板，点击文件，然后根据教程把文件放在合适的位置就行了。\n\n### **九、网站有被蜘蛛抓取过，但首页依旧未收录**\n\n如果说是这种情况的话，这就复杂了，首先你先看下本篇文章的1-7点，看看能不能初步的检查出来自己网站的问题，如果还是不能的话，可以就需要你自己在网络的海洋中慢慢寻找了，或者是请教一些老站长，看看他们怎么说。\n\n### **十、关于坚持**\n\n生活，贵在坚持、难在坚持、成在坚持，坚持了不一定有好结果，但是不坚持下去一定没有结果，加油吧，各位同学。","source":"_posts/新站不被收录自检.md","raw":"title: 新站不被收录自检\nauthor: 知识铺\ndate: 2019-11-09 20:50:27\ntags:\n---\n### **一、网站服务器不稳定**\n\n就目前云服务器的市场来说，大部分人会选择阿里云或者腾讯云，基本上是不存在网站服务器不稳定这种情况的。但是也不排除有部分人会购买一些很便宜的服务器或者虚拟主机，所以这个问题还是需要稍稍排查下。\n\n### **二、robots文件设置错误**\n\n关于什么是robots，以及robots怎么用，请自行百度查找，一般情况下robots文件是不会设置错误的。\n\n### **三、网站域名选择问题**\n\n这个基本上属于小概率事件，意思就是说你目前用的这个域名以前被别人用过，并且还被用在了非法用途上，可能已经被百度k了，所以你的网站连首页都没有被收录。\n\n虽说是小概率事件，但还是要排查下。\n\n方法一：打开这个链接：[http://whois.domaintools.com/](https://link.zhihu.com/?target=http%3A//whois.domaintools.com/)，输入你网站URL，然后点击搜索，跳转页面后你就会看到这个URL的历史使用情况了。\n\n![知识铺-pasted-60.png](https:\\/\\/blog.zshipu.com/note/images/pasted-60.png)\n\n\n方法二：直接在百度上搜索你的url，看看有什么相关链接没有。\n\n### **四、网站文章原创度低**\n\n这种情况的几率稍微大些，因为有部分人不擅长写文章，所以就喜欢伪原创或者直接抄袭什么的，这样百度会认为这个网站不优秀，严重些还会加长观察期。\n\n### **五、网站文章少**\n\n这一点是简小师自己总结的，因为我实在是想不到除此之外其他的任何可能性了，再加上我文笔又差。\n\n### **六、关键词堆砌**\n\n顾名思义就是说在网站页面中大量的增加某个关键词出现的频次，以此来达到提升该关键词在页面中的关键词密度，从而误导搜索引擎抓取间接提升网站排名的方法。\n\n随着搜索引擎的不断提升改进，关键词的堆砌手法会被搜索引擎用分词算法查出来，一旦认定网站有严重堆砌行为，轻则降权，重则被K站。\n\n### **七、新站外链太少**\n\n一般新站外链就比较少，所以需要我们适当的增加一些外链。\n\n外链就是指在别的网站导入自己网站的链接。\n\n### **八、百度蜘蛛没有抓取过网站**\n\n这种情况的概率稍大些，因为新网站本身外链就比较少，或者说根本就没有，再加上你连URL都没有提交过，那么就有可能出现这个问题。\n\n所以要确定下百度蜘蛛到底有没有抓取过我们的网站，简小师以“宝塔”一键配置的服务器环境举例，我们打开宝塔面板，点击网页左边的“文件”，文件路径：“www/wwwlogs/”，打开之后你会发现有以“.log”为后缀的文件，嗯这些就是了。\n\n\n![知识铺-pasted-61.png](https:\\/\\/blog.zshipu.com/note/images/pasted-61.png)\n宝塔面板截图\n\n然后右键点击下载，把文件下载到本地之后，打开这个网址：[http://www.loghao.com/](https://link.zhihu.com/?target=http%3A//www.loghao.com/)，上传文件，开始分析。\n\n如果说“Baiduspider蜘蛛(0)”这里的括号内显示零，则表示百度蜘蛛没有抓取过网站，如果数字不为零，则表示百度蜘蛛抓取过网站，只是没有收录而已。\n\n\n![知识铺-pasted-62.png](https:\\/\\/blog.zshipu.com/note/images/pasted-62.png)网站日志分析截图\n\n如果百度蜘蛛没有抓取过我们的网站，这个很好解决。\n\n首先打开百度首页，在搜索栏里搜索自己网站URL，如果搜索结果显示“很抱歉，没有找到与URL相关的网页”，这说明我们的网站没有被收录。\n\n其次我们会看到这句话的下方有“提交网址”字样，别犹豫，直接狂点这个网址，得让百度感受一下我们的愤怒，这样百度蜘蛛就会感到恐惧，从而可以提高网站的收录率。\n\n当然了只是让百度蜘蛛感到恐惧还是远远不够的，最后还是得把自己的URL提交给它，这样它才知道具体该怎么做。\n\n如果说你没有百度账号的话，需要注册一个，不然是没有办法提交自己的URL的。这里要说明一点，主动提交自己的URL，是可以加快爬虫抓取速度，但无法解决网站内容是否收录，比如说“新手建站之路”也提交过很多次URL，但依旧未收录，可能是因为百度蜘蛛不害怕我吧。\n\n在这里推荐一篇文章，来源是百度经验，这篇文章写得不错很详细，我就不重新写了。链接地址：[直达链接](https://jingyan.baidu.com/article/6b97984dee19b81ca3b0bf4c.html)。\n\n里面有一点需要注意下，文章中他是用FTP上传文件的，但如果你的服务器是用“宝塔”一键配置的环境，那就会简单很多。直接登录宝塔面板，点击文件，然后根据教程把文件放在合适的位置就行了。\n\n### **九、网站有被蜘蛛抓取过，但首页依旧未收录**\n\n如果说是这种情况的话，这就复杂了，首先你先看下本篇文章的1-7点，看看能不能初步的检查出来自己网站的问题，如果还是不能的话，可以就需要你自己在网络的海洋中慢慢寻找了，或者是请教一些老站长，看看他们怎么说。\n\n### **十、关于坚持**\n\n生活，贵在坚持、难在坚持、成在坚持，坚持了不一定有好结果，但是不坚持下去一定没有结果，加油吧，各位同学。","slug":"新站不被收录自检","published":1,"updated":"2019-11-09T12:56:20.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgj5000xokdmpya23nmu","content":"<h3 id=\"一、网站服务器不稳定\"><a href=\"#一、网站服务器不稳定\" class=\"headerlink\" title=\"一、网站服务器不稳定\"></a><strong>一、网站服务器不稳定</strong></h3><p>就目前云服务器的市场来说，大部分人会选择阿里云或者腾讯云，基本上是不存在网站服务器不稳定这种情况的。但是也不排除有部分人会购买一些很便宜的服务器或者虚拟主机，所以这个问题还是需要稍稍排查下。</p>\n<h3 id=\"二、robots文件设置错误\"><a href=\"#二、robots文件设置错误\" class=\"headerlink\" title=\"二、robots文件设置错误\"></a><strong>二、robots文件设置错误</strong></h3><p>关于什么是robots，以及robots怎么用，请自行百度查找，一般情况下robots文件是不会设置错误的。</p>\n<h3 id=\"三、网站域名选择问题\"><a href=\"#三、网站域名选择问题\" class=\"headerlink\" title=\"三、网站域名选择问题\"></a><strong>三、网站域名选择问题</strong></h3><p>这个基本上属于小概率事件，意思就是说你目前用的这个域名以前被别人用过，并且还被用在了非法用途上，可能已经被百度k了，所以你的网站连首页都没有被收录。</p>\n<p>虽说是小概率事件，但还是要排查下。</p>\n<p>方法一：打开这个链接：<a href=\"https://link.zhihu.com/?target=http%3A//whois.domaintools.com/\" target=\"_blank\" rel=\"noopener\">http://whois.domaintools.com/</a>，输入你网站URL，然后点击搜索，跳转页面后你就会看到这个URL的历史使用情况了。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-60.png\" alt=\"知识铺-pasted-60.png\"></p>\n<p>方法二：直接在百度上搜索你的url，看看有什么相关链接没有。</p>\n<h3 id=\"四、网站文章原创度低\"><a href=\"#四、网站文章原创度低\" class=\"headerlink\" title=\"四、网站文章原创度低\"></a><strong>四、网站文章原创度低</strong></h3><p>这种情况的几率稍微大些，因为有部分人不擅长写文章，所以就喜欢伪原创或者直接抄袭什么的，这样百度会认为这个网站不优秀，严重些还会加长观察期。</p>\n<h3 id=\"五、网站文章少\"><a href=\"#五、网站文章少\" class=\"headerlink\" title=\"五、网站文章少\"></a><strong>五、网站文章少</strong></h3><p>这一点是简小师自己总结的，因为我实在是想不到除此之外其他的任何可能性了，再加上我文笔又差。</p>\n<h3 id=\"六、关键词堆砌\"><a href=\"#六、关键词堆砌\" class=\"headerlink\" title=\"六、关键词堆砌\"></a><strong>六、关键词堆砌</strong></h3><p>顾名思义就是说在网站页面中大量的增加某个关键词出现的频次，以此来达到提升该关键词在页面中的关键词密度，从而误导搜索引擎抓取间接提升网站排名的方法。</p>\n<p>随着搜索引擎的不断提升改进，关键词的堆砌手法会被搜索引擎用分词算法查出来，一旦认定网站有严重堆砌行为，轻则降权，重则被K站。</p>\n<h3 id=\"七、新站外链太少\"><a href=\"#七、新站外链太少\" class=\"headerlink\" title=\"七、新站外链太少\"></a><strong>七、新站外链太少</strong></h3><p>一般新站外链就比较少，所以需要我们适当的增加一些外链。</p>\n<p>外链就是指在别的网站导入自己网站的链接。</p>\n<h3 id=\"八、百度蜘蛛没有抓取过网站\"><a href=\"#八、百度蜘蛛没有抓取过网站\" class=\"headerlink\" title=\"八、百度蜘蛛没有抓取过网站\"></a><strong>八、百度蜘蛛没有抓取过网站</strong></h3><p>这种情况的概率稍大些，因为新网站本身外链就比较少，或者说根本就没有，再加上你连URL都没有提交过，那么就有可能出现这个问题。</p>\n<p>所以要确定下百度蜘蛛到底有没有抓取过我们的网站，简小师以“宝塔”一键配置的服务器环境举例，我们打开宝塔面板，点击网页左边的“文件”，文件路径：“www/wwwlogs/”，打开之后你会发现有以“.log”为后缀的文件，嗯这些就是了。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-61.png\" alt=\"知识铺-pasted-61.png\"><br>宝塔面板截图</p>\n<p>然后右键点击下载，把文件下载到本地之后，打开这个网址：<a href=\"https://link.zhihu.com/?target=http%3A//www.loghao.com/\" target=\"_blank\" rel=\"noopener\">http://www.loghao.com/</a>，上传文件，开始分析。</p>\n<p>如果说“Baiduspider蜘蛛(0)”这里的括号内显示零，则表示百度蜘蛛没有抓取过网站，如果数字不为零，则表示百度蜘蛛抓取过网站，只是没有收录而已。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-62.png\" alt=\"知识铺-pasted-62.png\">网站日志分析截图</p>\n<p>如果百度蜘蛛没有抓取过我们的网站，这个很好解决。</p>\n<p>首先打开百度首页，在搜索栏里搜索自己网站URL，如果搜索结果显示“很抱歉，没有找到与URL相关的网页”，这说明我们的网站没有被收录。</p>\n<p>其次我们会看到这句话的下方有“提交网址”字样，别犹豫，直接狂点这个网址，得让百度感受一下我们的愤怒，这样百度蜘蛛就会感到恐惧，从而可以提高网站的收录率。</p>\n<p>当然了只是让百度蜘蛛感到恐惧还是远远不够的，最后还是得把自己的URL提交给它，这样它才知道具体该怎么做。</p>\n<p>如果说你没有百度账号的话，需要注册一个，不然是没有办法提交自己的URL的。这里要说明一点，主动提交自己的URL，是可以加快爬虫抓取速度，但无法解决网站内容是否收录，比如说“新手建站之路”也提交过很多次URL，但依旧未收录，可能是因为百度蜘蛛不害怕我吧。</p>\n<p>在这里推荐一篇文章，来源是百度经验，这篇文章写得不错很详细，我就不重新写了。链接地址：<a href=\"https://jingyan.baidu.com/article/6b97984dee19b81ca3b0bf4c.html\" target=\"_blank\" rel=\"noopener\">直达链接</a>。</p>\n<p>里面有一点需要注意下，文章中他是用FTP上传文件的，但如果你的服务器是用“宝塔”一键配置的环境，那就会简单很多。直接登录宝塔面板，点击文件，然后根据教程把文件放在合适的位置就行了。</p>\n<h3 id=\"九、网站有被蜘蛛抓取过，但首页依旧未收录\"><a href=\"#九、网站有被蜘蛛抓取过，但首页依旧未收录\" class=\"headerlink\" title=\"九、网站有被蜘蛛抓取过，但首页依旧未收录\"></a><strong>九、网站有被蜘蛛抓取过，但首页依旧未收录</strong></h3><p>如果说是这种情况的话，这就复杂了，首先你先看下本篇文章的1-7点，看看能不能初步的检查出来自己网站的问题，如果还是不能的话，可以就需要你自己在网络的海洋中慢慢寻找了，或者是请教一些老站长，看看他们怎么说。</p>\n<h3 id=\"十、关于坚持\"><a href=\"#十、关于坚持\" class=\"headerlink\" title=\"十、关于坚持\"></a><strong>十、关于坚持</strong></h3><p>生活，贵在坚持、难在坚持、成在坚持，坚持了不一定有好结果，但是不坚持下去一定没有结果，加油吧，各位同学。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、网站服务器不稳定\"><a href=\"#一、网站服务器不稳定\" class=\"headerlink\" title=\"一、网站服务器不稳定\"></a><strong>一、网站服务器不稳定</strong></h3><p>就目前云服务器的市场来说，大部分人会选择阿里云或者腾讯云，基本上是不存在网站服务器不稳定这种情况的。但是也不排除有部分人会购买一些很便宜的服务器或者虚拟主机，所以这个问题还是需要稍稍排查下。</p>\n<h3 id=\"二、robots文件设置错误\"><a href=\"#二、robots文件设置错误\" class=\"headerlink\" title=\"二、robots文件设置错误\"></a><strong>二、robots文件设置错误</strong></h3><p>关于什么是robots，以及robots怎么用，请自行百度查找，一般情况下robots文件是不会设置错误的。</p>\n<h3 id=\"三、网站域名选择问题\"><a href=\"#三、网站域名选择问题\" class=\"headerlink\" title=\"三、网站域名选择问题\"></a><strong>三、网站域名选择问题</strong></h3><p>这个基本上属于小概率事件，意思就是说你目前用的这个域名以前被别人用过，并且还被用在了非法用途上，可能已经被百度k了，所以你的网站连首页都没有被收录。</p>\n<p>虽说是小概率事件，但还是要排查下。</p>\n<p>方法一：打开这个链接：<a href=\"https://link.zhihu.com/?target=http%3A//whois.domaintools.com/\" target=\"_blank\" rel=\"noopener\">http://whois.domaintools.com/</a>，输入你网站URL，然后点击搜索，跳转页面后你就会看到这个URL的历史使用情况了。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-60.png\" alt=\"知识铺-pasted-60.png\"></p>\n<p>方法二：直接在百度上搜索你的url，看看有什么相关链接没有。</p>\n<h3 id=\"四、网站文章原创度低\"><a href=\"#四、网站文章原创度低\" class=\"headerlink\" title=\"四、网站文章原创度低\"></a><strong>四、网站文章原创度低</strong></h3><p>这种情况的几率稍微大些，因为有部分人不擅长写文章，所以就喜欢伪原创或者直接抄袭什么的，这样百度会认为这个网站不优秀，严重些还会加长观察期。</p>\n<h3 id=\"五、网站文章少\"><a href=\"#五、网站文章少\" class=\"headerlink\" title=\"五、网站文章少\"></a><strong>五、网站文章少</strong></h3><p>这一点是简小师自己总结的，因为我实在是想不到除此之外其他的任何可能性了，再加上我文笔又差。</p>\n<h3 id=\"六、关键词堆砌\"><a href=\"#六、关键词堆砌\" class=\"headerlink\" title=\"六、关键词堆砌\"></a><strong>六、关键词堆砌</strong></h3><p>顾名思义就是说在网站页面中大量的增加某个关键词出现的频次，以此来达到提升该关键词在页面中的关键词密度，从而误导搜索引擎抓取间接提升网站排名的方法。</p>\n<p>随着搜索引擎的不断提升改进，关键词的堆砌手法会被搜索引擎用分词算法查出来，一旦认定网站有严重堆砌行为，轻则降权，重则被K站。</p>\n<h3 id=\"七、新站外链太少\"><a href=\"#七、新站外链太少\" class=\"headerlink\" title=\"七、新站外链太少\"></a><strong>七、新站外链太少</strong></h3><p>一般新站外链就比较少，所以需要我们适当的增加一些外链。</p>\n<p>外链就是指在别的网站导入自己网站的链接。</p>\n<h3 id=\"八、百度蜘蛛没有抓取过网站\"><a href=\"#八、百度蜘蛛没有抓取过网站\" class=\"headerlink\" title=\"八、百度蜘蛛没有抓取过网站\"></a><strong>八、百度蜘蛛没有抓取过网站</strong></h3><p>这种情况的概率稍大些，因为新网站本身外链就比较少，或者说根本就没有，再加上你连URL都没有提交过，那么就有可能出现这个问题。</p>\n<p>所以要确定下百度蜘蛛到底有没有抓取过我们的网站，简小师以“宝塔”一键配置的服务器环境举例，我们打开宝塔面板，点击网页左边的“文件”，文件路径：“www/wwwlogs/”，打开之后你会发现有以“.log”为后缀的文件，嗯这些就是了。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-61.png\" alt=\"知识铺-pasted-61.png\"><br>宝塔面板截图</p>\n<p>然后右键点击下载，把文件下载到本地之后，打开这个网址：<a href=\"https://link.zhihu.com/?target=http%3A//www.loghao.com/\" target=\"_blank\" rel=\"noopener\">http://www.loghao.com/</a>，上传文件，开始分析。</p>\n<p>如果说“Baiduspider蜘蛛(0)”这里的括号内显示零，则表示百度蜘蛛没有抓取过网站，如果数字不为零，则表示百度蜘蛛抓取过网站，只是没有收录而已。</p>\n<p><img src=\"https://blog.zshipu.com/note/images/pasted-62.png\" alt=\"知识铺-pasted-62.png\">网站日志分析截图</p>\n<p>如果百度蜘蛛没有抓取过我们的网站，这个很好解决。</p>\n<p>首先打开百度首页，在搜索栏里搜索自己网站URL，如果搜索结果显示“很抱歉，没有找到与URL相关的网页”，这说明我们的网站没有被收录。</p>\n<p>其次我们会看到这句话的下方有“提交网址”字样，别犹豫，直接狂点这个网址，得让百度感受一下我们的愤怒，这样百度蜘蛛就会感到恐惧，从而可以提高网站的收录率。</p>\n<p>当然了只是让百度蜘蛛感到恐惧还是远远不够的，最后还是得把自己的URL提交给它，这样它才知道具体该怎么做。</p>\n<p>如果说你没有百度账号的话，需要注册一个，不然是没有办法提交自己的URL的。这里要说明一点，主动提交自己的URL，是可以加快爬虫抓取速度，但无法解决网站内容是否收录，比如说“新手建站之路”也提交过很多次URL，但依旧未收录，可能是因为百度蜘蛛不害怕我吧。</p>\n<p>在这里推荐一篇文章，来源是百度经验，这篇文章写得不错很详细，我就不重新写了。链接地址：<a href=\"https://jingyan.baidu.com/article/6b97984dee19b81ca3b0bf4c.html\" target=\"_blank\" rel=\"noopener\">直达链接</a>。</p>\n<p>里面有一点需要注意下，文章中他是用FTP上传文件的，但如果你的服务器是用“宝塔”一键配置的环境，那就会简单很多。直接登录宝塔面板，点击文件，然后根据教程把文件放在合适的位置就行了。</p>\n<h3 id=\"九、网站有被蜘蛛抓取过，但首页依旧未收录\"><a href=\"#九、网站有被蜘蛛抓取过，但首页依旧未收录\" class=\"headerlink\" title=\"九、网站有被蜘蛛抓取过，但首页依旧未收录\"></a><strong>九、网站有被蜘蛛抓取过，但首页依旧未收录</strong></h3><p>如果说是这种情况的话，这就复杂了，首先你先看下本篇文章的1-7点，看看能不能初步的检查出来自己网站的问题，如果还是不能的话，可以就需要你自己在网络的海洋中慢慢寻找了，或者是请教一些老站长，看看他们怎么说。</p>\n<h3 id=\"十、关于坚持\"><a href=\"#十、关于坚持\" class=\"headerlink\" title=\"十、关于坚持\"></a><strong>十、关于坚持</strong></h3><p>生活，贵在坚持、难在坚持、成在坚持，坚持了不一定有好结果，但是不坚持下去一定没有结果，加油吧，各位同学。</p>\n"},{"title":"电商网站SEO优化指南","author":"知识铺","date":"2019-11-10T14:40:06.000Z","_content":" \n\n电商网站SEO不好做，因为电商的竞争激烈。实际上，对电商网站来说，可能另辟蹊径会更好做一些。很多时候，电商网站都是格式化的数据，而搜索引擎又特别喜欢格式化的数据，比如产品的名称、价格、颜色、大小、尺寸……你可以把这些标号通通提交给搜索引擎，让搜索引擎帮你获得更高的展现。\n\n首先，把网站所有商品的名称、ID、URL全部下载下来。\n\n第二，跑一下数据，比如有些页面的优先级不是很高，有时候可以把这些优先级调整一下；有些页面关键词缺乏内链的推荐、有些缺乏外链的助力，这种情况下我们一定要把原因找出来。\n\n第三，电商网站在落地执行时，一定要和程序员沟通好技术层面的支持。比如，化妆品筛选时有很多标签，美白、遮瑕、品牌、价格……等等，筛选条件越多，搜索剩下的结果就越少。这时搜索引擎费了半天劲才找到这个页面，但这个页面内容又特别少，再放一个单品的中单页面，那么他们俩就重合了，这样的抓取是没有意义的。所以如果说搜索结果是≤3、5，我们就把他屏蔽掉，不要让搜索引擎抓取到。\n\n第四，PC端和移动端的适配。\n\n第五，URL一定要做好。","source":"_posts/电商网站SEO优化指南.md","raw":"title: 电商网站SEO优化指南\nauthor: 知识铺\ndate: 2019-11-10 22:40:06\ntags:\n---\n \n\n电商网站SEO不好做，因为电商的竞争激烈。实际上，对电商网站来说，可能另辟蹊径会更好做一些。很多时候，电商网站都是格式化的数据，而搜索引擎又特别喜欢格式化的数据，比如产品的名称、价格、颜色、大小、尺寸……你可以把这些标号通通提交给搜索引擎，让搜索引擎帮你获得更高的展现。\n\n首先，把网站所有商品的名称、ID、URL全部下载下来。\n\n第二，跑一下数据，比如有些页面的优先级不是很高，有时候可以把这些优先级调整一下；有些页面关键词缺乏内链的推荐、有些缺乏外链的助力，这种情况下我们一定要把原因找出来。\n\n第三，电商网站在落地执行时，一定要和程序员沟通好技术层面的支持。比如，化妆品筛选时有很多标签，美白、遮瑕、品牌、价格……等等，筛选条件越多，搜索剩下的结果就越少。这时搜索引擎费了半天劲才找到这个页面，但这个页面内容又特别少，再放一个单品的中单页面，那么他们俩就重合了，这样的抓取是没有意义的。所以如果说搜索结果是≤3、5，我们就把他屏蔽掉，不要让搜索引擎抓取到。\n\n第四，PC端和移动端的适配。\n\n第五，URL一定要做好。","slug":"电商网站SEO优化指南","published":1,"updated":"2019-11-10T14:40:08.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgj6000yokdmze7syycb","content":"<p>电商网站SEO不好做，因为电商的竞争激烈。实际上，对电商网站来说，可能另辟蹊径会更好做一些。很多时候，电商网站都是格式化的数据，而搜索引擎又特别喜欢格式化的数据，比如产品的名称、价格、颜色、大小、尺寸……你可以把这些标号通通提交给搜索引擎，让搜索引擎帮你获得更高的展现。</p>\n<p>首先，把网站所有商品的名称、ID、URL全部下载下来。</p>\n<p>第二，跑一下数据，比如有些页面的优先级不是很高，有时候可以把这些优先级调整一下；有些页面关键词缺乏内链的推荐、有些缺乏外链的助力，这种情况下我们一定要把原因找出来。</p>\n<p>第三，电商网站在落地执行时，一定要和程序员沟通好技术层面的支持。比如，化妆品筛选时有很多标签，美白、遮瑕、品牌、价格……等等，筛选条件越多，搜索剩下的结果就越少。这时搜索引擎费了半天劲才找到这个页面，但这个页面内容又特别少，再放一个单品的中单页面，那么他们俩就重合了，这样的抓取是没有意义的。所以如果说搜索结果是≤3、5，我们就把他屏蔽掉，不要让搜索引擎抓取到。</p>\n<p>第四，PC端和移动端的适配。</p>\n<p>第五，URL一定要做好。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>电商网站SEO不好做，因为电商的竞争激烈。实际上，对电商网站来说，可能另辟蹊径会更好做一些。很多时候，电商网站都是格式化的数据，而搜索引擎又特别喜欢格式化的数据，比如产品的名称、价格、颜色、大小、尺寸……你可以把这些标号通通提交给搜索引擎，让搜索引擎帮你获得更高的展现。</p>\n<p>首先，把网站所有商品的名称、ID、URL全部下载下来。</p>\n<p>第二，跑一下数据，比如有些页面的优先级不是很高，有时候可以把这些优先级调整一下；有些页面关键词缺乏内链的推荐、有些缺乏外链的助力，这种情况下我们一定要把原因找出来。</p>\n<p>第三，电商网站在落地执行时，一定要和程序员沟通好技术层面的支持。比如，化妆品筛选时有很多标签，美白、遮瑕、品牌、价格……等等，筛选条件越多，搜索剩下的结果就越少。这时搜索引擎费了半天劲才找到这个页面，但这个页面内容又特别少，再放一个单品的中单页面，那么他们俩就重合了，这样的抓取是没有意义的。所以如果说搜索结果是≤3、5，我们就把他屏蔽掉，不要让搜索引擎抓取到。</p>\n<p>第四，PC端和移动端的适配。</p>\n<p>第五，URL一定要做好。</p>\n"},{"title":"网站收录踩过的坑","author":"知识铺","date":"2019-11-09T13:30:44.000Z","_content":" \n\n网站不收录，有两种情况：\n①连首页都不收录\n②只收录首页，迟迟没有收录内页\n\n针对情况①，一般都是因为域名问题，特别是买老域名或者抢注的，不是全新注册的域名最容易出现这种情况，新手做SEO常常没有分辨域名的经验，买到做过灰色的垃圾域名，最常见的情况就是连首页都久久不收录，而全新域名不出意外均是2天内收录首页。（学习域名判断技巧请关注公众号：XG营销客，在SEO技术栏目中查看挑选老域名经验一文）\n\n针对情况②，一般是站内优化没做好，没有每日更新内容页，或者是更新的内容页质量太差，对蜘蛛不友好。另外就是更新了但没有每天坚持在百度后台提交链接，没做sitemap，这些都是主要的问题。在我公众号中也有关于解决这一问题的方案，新站上线要做的工作，还有高质量内容页做法，由于文章太长我就不在这都放出来了。\n","source":"_posts/网站收录踩过的坑.md","raw":"title: 网站收录踩过的坑\nauthor: 知识铺\ndate: 2019-11-09 21:30:44\ntags:\n---\n \n\n网站不收录，有两种情况：\n①连首页都不收录\n②只收录首页，迟迟没有收录内页\n\n针对情况①，一般都是因为域名问题，特别是买老域名或者抢注的，不是全新注册的域名最容易出现这种情况，新手做SEO常常没有分辨域名的经验，买到做过灰色的垃圾域名，最常见的情况就是连首页都久久不收录，而全新域名不出意外均是2天内收录首页。（学习域名判断技巧请关注公众号：XG营销客，在SEO技术栏目中查看挑选老域名经验一文）\n\n针对情况②，一般是站内优化没做好，没有每日更新内容页，或者是更新的内容页质量太差，对蜘蛛不友好。另外就是更新了但没有每天坚持在百度后台提交链接，没做sitemap，这些都是主要的问题。在我公众号中也有关于解决这一问题的方案，新站上线要做的工作，还有高质量内容页做法，由于文章太长我就不在这都放出来了。\n","slug":"网站收录踩过的坑","published":1,"updated":"2019-11-09T13:30:51.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vdwgj7000zokdmkz4ruydh","content":"<p>网站不收录，有两种情况：<br>①连首页都不收录<br>②只收录首页，迟迟没有收录内页</p>\n<p>针对情况①，一般都是因为域名问题，特别是买老域名或者抢注的，不是全新注册的域名最容易出现这种情况，新手做SEO常常没有分辨域名的经验，买到做过灰色的垃圾域名，最常见的情况就是连首页都久久不收录，而全新域名不出意外均是2天内收录首页。（学习域名判断技巧请关注公众号：XG营销客，在SEO技术栏目中查看挑选老域名经验一文）</p>\n<p>针对情况②，一般是站内优化没做好，没有每日更新内容页，或者是更新的内容页质量太差，对蜘蛛不友好。另外就是更新了但没有每天坚持在百度后台提交链接，没做sitemap，这些都是主要的问题。在我公众号中也有关于解决这一问题的方案，新站上线要做的工作，还有高质量内容页做法，由于文章太长我就不在这都放出来了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网站不收录，有两种情况：<br>①连首页都不收录<br>②只收录首页，迟迟没有收录内页</p>\n<p>针对情况①，一般都是因为域名问题，特别是买老域名或者抢注的，不是全新注册的域名最容易出现这种情况，新手做SEO常常没有分辨域名的经验，买到做过灰色的垃圾域名，最常见的情况就是连首页都久久不收录，而全新域名不出意外均是2天内收录首页。（学习域名判断技巧请关注公众号：XG营销客，在SEO技术栏目中查看挑选老域名经验一文）</p>\n<p>针对情况②，一般是站内优化没做好，没有每日更新内容页，或者是更新的内容页质量太差，对蜘蛛不友好。另外就是更新了但没有每天坚持在百度后台提交链接，没做sitemap，这些都是主要的问题。在我公众号中也有关于解决这一问题的方案，新站上线要做的工作，还有高质量内容页做法，由于文章太长我就不在这都放出来了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8vdwgh60005okdmtgytk69m","category_id":"ck8vdwgh50004okdm4rgiimgs","_id":"ck8vdwgin000iokdm2km9u61x"},{"post_id":"ck8vdwggu0001okdmx66896s3","category_id":"ck8vdwgh50004okdm4rgiimgs","_id":"ck8vdwgiq000nokdm3wwz4ajk"},{"post_id":"ck8vdwggu0001okdmx66896s3","category_id":"ck8vdwgib000fokdm3lrlzfgq","_id":"ck8vdwgir000pokdmh1snsf47"}],"PostTag":[{"post_id":"ck8vdwggn0000okdmrn3lnocd","tag_id":"ck8vdwgh00002okdmu8ggswk7","_id":"ck8vdwgi20008okdmsau5fnq2"},{"post_id":"ck8vdwggu0001okdmx66896s3","tag_id":"ck8vdwgh00002okdmu8ggswk7","_id":"ck8vdwgi8000dokdmmq1y3q74"},{"post_id":"ck8vdwgh60005okdmtgytk69m","tag_id":"ck8vdwgh00002okdmu8ggswk7","_id":"ck8vdwgin000jokdm4qwywm8p"},{"post_id":"ck8vdwgh60005okdmtgytk69m","tag_id":"ck8vdwgi7000cokdmp4s63xg7","_id":"ck8vdwgio000lokdmouotejpv"},{"post_id":"ck8vdwgit000rokdmmzf3nauw","tag_id":"ck8vdwgh00002okdmu8ggswk7","_id":"ck8vdwgiv000tokdmc769kyr9"}],"Tag":[{"name":"hexo","_id":"ck8vdwgh00002okdmu8ggswk7"},{"name":"个人博客","_id":"ck8vdwgi7000cokdmp4s63xg7"}]}}